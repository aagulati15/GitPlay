 XC7010: proc options(main noexecops);

 default range(*) label;

 /*-------------------------------------------------------------------*/
 /* Standard Copybook Includes                                        */
 /*-------------------------------------------------------------------*/
  /* BEGIN %INCLUDE PGMANFA */
 /****************************** BEGIN INCLUDE PGMANFA **************/
 /***************************************** STAND 08.10.2007 ********/
 /*                                         MEMBER PGMANFA          */
 /*      Dieses Member muss von allen PL/1 Programmen               */
 /*      mit OPTIONS(MAIN) benutzt werden.                          */
 /*                                                                 */
 /*      Die alten xxxANFA Members d|rfen mit EPLI auf keinen Fall  */
 /*      mehr verwendet werden.                                     */
 /*                                                                 */
 /*                                                                 */
 /*******************************************************************/
 /*      created by:               KCDS21  F299050 R.Schuster       */
 /*      modified by:              KSDI611 F299050 R.Schuster       */
 /*      08.10.2007 remove call to PLIDUMP,                         */
 /*                 add full options to CEE3DUMP,                   */
 /*                 use CEE3ABD to terminate enclave                */
 /*      13.03.2008 add SNAP keyword fpr sysout message F299050     */
 /*******************************************************************/

 DECLARE  CEE3DMP EXT ENTRY(CHAR(80),CHAR(255),CHAR(12) OPTIONAL)
                  OPTIONS(ASM);
 DECLARE  CEE3ABD ENTRY(BIN FIXED(31),BIN FIXED(31)) OPTIONS(ASM);

 /**/
 ON ERROR SNAP BEGIN;

    ON ERROR SYSTEM;
    CALL CEE3DMP ('Complete CEEDUMP',
                  'STORAGE '!!
                  'TRACEBACK '!!
                  'FILES '!!
                  'BLOCKS '!!
                  'VARIABLES '!!
                  'CONDITION '!!
                  'STACKFRAME(ALL) '!!
                  'NOENTRY '!!
                  'PAGE(0) '!!
                  'GENOPTS '!!
                  'REGSTOR(32) '!!
                  'FNAME(CEEDUMP)',
                   *);

    CALL CEE3ABD(20,2);

 END;
 /******************************** END INCLUDE pgmanfa **************/
  /*   END %INCLUDE PGMANFA */
 ;
  /* BEGIN %INCLUDE YXRRSAF */
 /*  ENTRY DECLARATION OF YXRRSAF                                     */
    DCL YXRRSAF EXTERNAL ENTRY(CHAR(12),CHAR(4) OPTIONAL,
                        CHAR(8) OPTIONAL)
                        RETURNS(BIN FIXED(31));
 /*  END OF ENTRY DECLARATION OF YXRRSAF                              */
  /*   END %INCLUDE YXRRSAF */
 /*-------------------------------------------------------------------*/
  /* BEGIN %INCLUDE OSM1000 */
 /*'Mail function package : Mail User consumer calls for yySmtp'      */

 /*_Variables ________________________________________________________*/
    dcl osm1000_rc       bin fixed(31);
    dcl osm1000_rm       char(528);

 /* entries                                                           */
  /* BEGIN %INCLUDE OSM1000E */
 /*'Mail function package entrys'                                     */

 /* package dummy                                                     */
    dcl osm1000                     external abnormal   entry;

 /*_Consumer Calls____________________________________________________*/

 /*___________yySmtp_Init call ______________________________function_*/
    dcl #osm1_yySmtp_Init                external('OSM1INI') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* sender SMTP       */,char(254)       byaddr  inonly
 /* address           */
 /* Subject           */,char(254)       byaddr  inonly
 /* Mail Type         */,char(32)        byaddr  inonly
 /*   (TEXT/PLAIN)    */
 /*    TEXT/HTML      */
 /* importance        */,char(12)        byaddr  inonly
 /*   (NORMAL)        */
 /*    LOW            */
 /*    HIGH           */
 /* sensitivity       */,char(12)        byaddr  inonly
 /*   (NORMAL)        */
 /*    PERSONAL       */
 /*    PRIVATE        */
 /*    CONFIDENTIAL   */
 /* Send              */,char(1)         byaddr  inonly
 /* (Y) Send it       */
 /*  N  Archive BETA92*/
 /*  T  Send it in    */
 /*     Test Envs.    */
 /*  P  Send it in    */
 /*     Prod Envs.    */
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_IsInitialized call______________________function_*/
    dcl #osm1_yySmtp_IsInitialized       external('OSM1ISI') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bit(1));

 /*___________yySmtp_AddTO call _____________________________function_*/
    dcl #osm1_yySmtp_AddTO               external('OSM1ATO') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* SMTP address      */,char(254)       byaddr  inonly
 /* SMS  number       */
 /* PID               */
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_AddCC call _____________________________function_*/
    dcl #osm1_yySmtp_AddCC               external('OSM1ACC') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* SMTP address      */,char(254)       byaddr  inonly
 /* SMS  number       */
 /* PID               */
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_AddBCC call ____________________________function_*/
    dcl #osm1_yySmtp_AddBCC              external('OSM1ABC') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* SMTP address      */,char(254)       byaddr  inonly
 /* SMS  number       */
 /* PID               */
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_AddText call ___________________________function_*/
    dcl #osm1_yySmtp_AddText             external('OSM1ATX') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Text              */,char(998)       byaddr  inonly
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_AddReplace call ________________________function_*/
    dcl #osm1_yySmtp_AddReplace          external('OSM1ARP') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* from string       */,char(512) var   byaddr  inonly
 /* to   string       */,char(512) var   byaddr  inonly
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_AddAttachment call _____________________function_*/
    dcl #osm1_yySmtp_AddAttachment       external('OSM1AAT') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* DDName or         */,char(08)        byaddr  inonly
 /* Datasetname       */,char(256) var   byaddr  inonly
 /* Filename          */,char(256) var   byaddr  inonly
 /* Filetype          */,char(32)  var   byaddr  inonly
 /*   (TEXT/PLAIN)    */
 /*    ...            */
 /* ASCII Conversion  */,char(1)         byaddr  inonly
 /*   (Y)             */
 /*    N              */
 /*    R (Raw if      */
 /*       no Base64   */
 /*       and ascii   */
 /*       conversion  */
 /*       required)   */
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_AddAttachmentByBuffer __________________function_*/
    dcl #osm1_yySmtp_AddAttachmentByBuffer   external('OSM1AAB') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Pointer           */,pointer         byaddr  inonly
 /* Length            */,bin fixed(31)   byaddr  inonly
 /* Filename          */,char(256) var   byaddr  inonly
 /* Filetype          */,char(32)  var   byaddr  inonly
 /*   (TEXT/PLAIN)    */
 /*    ...            */
 /* ASCII Conversion  */,char(1)         byaddr  inonly
 /*   (Y)             */
 /*    N              */
 /*    R (Raw if      */
 /*       no Base64   */
 /*       and ascii   */
 /*       conversion  */
 /*       required)   */
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_SetImportance call _____________________function_*/
    dcl #osm1_yySmtp_SetImportance       external('OSM1SIP') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Importance        */,char(12)        byaddr  inonly
 /* (NORMAL)          */
 /*  LOW              */
 /*  HIGH             */
 /* trace             */,char(1)         byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_SetSender call _____________________function_*/
    dcl #osm1_yySmtp_SetSender           external('OSM1SDR') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Sender            */,char(254)       byaddr  inonly
 /* trace             */,char(1)         byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_SetSensitivity call ____________________function_*/
    dcl #osm1_yySmtp_SetSensitivity      external('OSM1SSV') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Sensitivity       */,char(12)        byaddr  inonly
 /* (NORMAL)          */
 /*  PERSONAL         */
 /*  PRIVATE          */
 /*  CONFIDENTIAL     */
 /* trace             */,char(1)         byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_SetBodyType call________________________function_*/
    dcl #osm1_yySmtp_SetBodyType         external('OSM1SBT') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Body Type         */,char(32)        byaddr  inonly
 /* (TEXT/PLAIN)      */
 /*  TEXT/HTML        */
 /* trace             */,char(1)         byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_SetTestOptions call_____________________function_*/
    dcl #OSM1_yySmtp_SetTestOptions      external('OSM1STO') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Testinfo Subject  */,char(1)         byaddr  inonly
 /*   (Y)             */
 /*    N              */
 /* Testinfo Body     */,char(1)         byaddr  inonly
 /*   (Y)             */
 /*    N              */
 /* trace             */,char(1)         byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_SetRecipientOptions call________________function_*/
    dcl #OSM1_yySmtp_SetRecipientOptions external('OSM1SRO') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Notification for  */,char(1)         byaddr  inonly
 /* PID not found     */
 /*   (Y)             */
 /*    N              */
 /* Reply to Sender   */,char(1)         byaddr  inonly
 /* as BCC            */
 /* for PID not found */
 /*    Y              */
 /*   (N)             */
 /* trace             */,char(1)         byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_SetSubject call_________________________function_*/
    dcl #osm1_yySmtp_SetSubject          external('OSM1SSB') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Subject           */,char(254)       byaddr  inonly
 /* trace             */,char(1)         byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_SetSend ________________________________function_*/
    dcl #osm1_yySmtp_SetSend             external('OSM1SSN') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Send              */,char(1)         byaddr  inonly
 /* (Y) Send it       */
 /*  N  Archive BETA92*/
 /*  T  Send it in    */
 /*     Test Envs.    */
 /*  P  Send it in    */
 /*     Prod Envs.    */
 /* trace             */,char(1)         byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_SetSmtpDD_______________________________function_*/
    dcl #osm1_yySmtp_SetSmtpDD           external('OSM1SSD') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Smtp DDNAME       */,char(8)         byaddr  inonly
 /* trace             */,char(1)         byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_SetAttachmentDD_________________________function_*/
    dcl #osm1_yySmtp_SetAttachmentDD     external('OSM1SAD') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* Attachment DDNAME */,char(8)         byaddr  inonly
 /* trace             */,char(1)         byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_Send ___________________________________function_*/
    dcl #osm1_yySmtp_Send                external('OSM1SND') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));

 /*___________yySmtp_Cleanup ________________________________function_*/
    dcl #osm1_yySmtp_Cleanup             external('OSM1CLN') entry
 /* rc                */(bin fixed(31)   byaddr  outonly assignable
 /* rcMessage         */,char(528)       byaddr  outonly assignable
 /* Mail ID           */,char(32)        byaddr  inonly
 /* trace             */,char (1)        byaddr  inonly)
 /*   (N)             */
 /*    Y              */
 /*>Rc                */                 returns(bin fixed(31));


  /*   END %INCLUDE OSM1000E */
  /*   END %INCLUDE OSM1000 */
                  ;                                             /*PB01*/
  /* BEGIN %INCLUDE YIDPARM */
 /********************************************************************/
 /*   YIDPARM - Retrieve EOS Application (BOLI & Dynamic PARM)       */
 /********************************************************************/
 DCL  YIDPARM                /* */
      ENTRY
      (File,                 /* File Pointer                         */
       PTR,                  /* Output Structure Pointer             */
       bin fixed(31))        /* Output Structure Length              */
      Returns(Bin Fixed(15));/* Return Code                          */
 /********************************************************************/
  /*   END %INCLUDE YIDPARM */
 ;
 dcl DD#DYN              External File Record Input;
 dcl YIDPARM_Len         bin fixed(31)   init(0);
 /*-------------------------------------------------------------------*/
  /* BEGIN %INCLUDE YXCETRC# */
 /*@=================================================================@*/
 /*@ Program       : YXCETRC# Centralized Trace Logic                @*/
 /*@ Application   : RETMM ONline                                    @*/
 /*@ Swan XP CR    : 155241                                          @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 03-Dec-2013                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@      This copybook includes centralized procedures which are    @*/
 /*@         commonly used in all main prgrams (YXCETRC)             @*/
 /*@         and modules (YXCETRCU)                                  @*/
 /*@=================================================================@*/
 /*@ Revisor       : <name>                      Tag  : <tag>        @*/
 /*@ Swan XP CR    : <swanxp number>             Date : <dd-mmm-yyyy>@*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -   <enter your description here>                             @*/
 /*@=================================================================@*/

 /*-------------------------------------------------------------------*/
 /* Common Variables                                                  */
 /*-------------------------------------------------------------------*/
 dcl @True                  bit(1)         aligned   init('1'B);
 dcl @False                 bit(1)         aligned   init('0'B);
 dcl @Force                 bit(1)         aligned   init('1'B);
 dcl @Dflt                  bit(1)         aligned   init('0'B);
 dcl @Trace                 bit(1)         aligned   init('0'B);
 dcl @PgmName               char(08)       init(procedurename());

 /*-------------------------------------------------------------------*/
 /* YXCETRC#                                                          */
 /*-------------------------------------------------------------------*/
 LogTrace: Proc($Force,$Tag,$Msg);
    dcl $Force                  bit(1)         aligned;
    dcl $Tag                    char(04);
    dcl $Msg                    char(*);
    If @Trace ! $Force then
 ; /*put skip lines removed (by topaz plugin) */
 End LogTrace;

 /*-------------------------------------------------------------------*/
 /* YXCETRC#                                                          */
 /*-------------------------------------------------------------------*/
 HandleException: Proc($Tag,$Tbl,$Msg);
    dcl $Tag                    char(04);
    dcl $Tbl                    char(40);
    dcl $Msg                    char(*);
    call LogTrace('1'b,$Tag,(90)' ');
    call LogTrace('1'b,$Tag,(90)'*');
    call LogTrace('1'b,$Tag,'Operation Failure: '!!trim($Tbl));
    call LogTrace('1'b,$Tag,(90)'*');
    call LogTrace('1'b,$Tag,'error   =' !! trim($Msg));
    call LogTrace('1'b,$Tag,'sqlcaid =' !! sqlca.sqlcaid);
    call LogTrace('1'b,$Tag,'sqlcabc =' !! sqlca.sqlcabc);
    call LogTrace('1'b,$Tag,'sqlcode =' !! sqlca.sqlcode);
    call LogTrace('1'b,$Tag,'sqlerrm =' !! sqlca.sqlerrm);
    call LogTrace('1'b,$Tag,'sqlerrp =' !! sqlca.sqlerrp);
    call LogTrace('1'b,$Tag,'sqlext  =' !! string(sqlca.sqlext));
    call LogTrace('1'b,$Tag,(90)'=');
    call LogTrace('1'b,$Tag,(90)' ');
    SIGNAL ERROR;
 End HandleException;
  /*   END %INCLUDE YXCETRC# */
 ;
 /*-------------------------------------------------------------------*/
  /* BEGIN %INCLUDE YIDMQ */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YIDMQ - EODIST MQ Operations                    @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 21-Apr-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
  /* BEGIN %INCLUDE CMQP */
 /********************************************************************/
 /*                                                                  */
 /*                   WebSphere MQ for z/OS                          */
 /*                                                                  */
 /*  FILE NAME:      CMQP                                            */
 /*                                                                  */
 /*  DESCRIPTION:    Declarations for Main MQI                       */
 /*                                                                  */
 /********************************************************************/
 /*  @START_COPYRIGHT@                                               */
 /*  Statement:     Licensed Materials - Property of IBM             */
 /*                                                                  */
 /*                 5655-W97                                         */
 /*                                                                  */
 /*  (c) Copyright IBM Corp. 1993, 2013 All Rights Reserved.         */
 /*                                                                  */
 /*  US Government Users Restricted Rights - Use, duplication or     */
 /*  disclosure restricted by GSA ADP Schedule Contract with         */
 /*  IBM Corp.                                                       */
 /*  @END_COPYRIGHT@                                                 */
 /********************************************************************/
 /*                                                                  */
 /*  FUNCTION:       This file declares the functions, structures    */
 /*                  and named constants for the main MQI.           */
 /*                                                                  */
 /*  PROCESSOR:      PL/I                                            */
 /*                                                                  */
 /********************************************************************/

 /********************************************************************/
 /* Check if the compiler is 64-bit capable.                         */
 /********************************************************************/

 /********************************************************************/
 /* Values Related to MQAIR Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Authentication Information Type */

 /********************************************************************/
 /* Values Related to MQBMHO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Buffer To Message Handle Options */

 /********************************************************************/
 /* Values Related to MQBO Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Begin Options */

 /********************************************************************/
 /* Values Related to MQCBC Structure - Callback Context             */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /* Callback type */

 /* Consumer state */

 /* Reconnect delay */

 /********************************************************************/
 /* Values Related to MQCBD Structure - Callback Descriptor          */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Callback Options */

 /* This is the type of the Callback Function */

 /* Buffer size values */

 /********************************************************************/
 /* Values Related to MQCHARV Structure                              */
 /********************************************************************/

 /* Variable String Length */

 /********************************************************************/
 /* Values Related to MQCIH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /* Return Codes */

 /* Unit-of-Work Controls */

 /* Get Wait Interval */

 /* Link Types */

 /* Output Data Length */

 /* ADS Descriptors */

 /* Conversational Task Options */

 /* Task End Status */

 /* Facility */

 /* Functions */

 /* Start Codes */

 /********************************************************************/
 /* Values Related to MQCMHO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Create Message Handle Options */

 /********************************************************************/
 /* Values Related to MQCTLO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Consumer Control Options */

 /********************************************************************/
 /* Values Related to MQSCO Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* SuiteB Type */

 /* Key Reset Count */

 /* Certificate Validation Policy Type */

 /********************************************************************/
 /* Values Related to MQCSP Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Authentication Types */

 /********************************************************************/
 /* Values Related to MQCNO Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Connect Options */

 /* Queue Manager Connection Tag */

 /* Connection Identifier */

 /********************************************************************/
 /* Values Related to MQDH Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /********************************************************************/
 /* Values Related to MQDLH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQDMHO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Delete Message Handle Options */

 /********************************************************************/
 /* Values Related to MQDMPO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Delete Message Property Options */

 /********************************************************************/
 /* Values Related to MQGMO Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Get Message Options */

 /* Wait Interval */

 /* Signal Values */

 /* Match Options */

 /* Group Status */

 /* Segment Status */

 /* Segmentation */

 /* Message Token */

 /* Returned Length */

 /********************************************************************/
 /* Values Related to MQIIH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /* Authenticator */

 /* Transaction Instance Identifier */

 /* Transaction States */

 /* Commit Modes */

 /* Security Scopes */

 /********************************************************************/
 /* Values Related to MQIMPO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Inquire Message Property Options */

 /********************************************************************/
 /* Values Related to MQMD Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Report Options */

 /* Report Options Masks */

 /* Message Types */

 /* Expiry */

 /* Feedback Values */

 /* Encoding */

 /* Encoding Masks */

 /* Encodings for Binary Integers */

 /* Encodings for Packed Decimal Integers */

 /* Encodings for Floating Point Numbers */

 /* Encodings for Multicast */

 /* Coded Character Set Identifiers */

 /* Formats */

 /* Priority */

 /* Persistence Values */

 /* Put Response Values */

 /* Message Identifier */

 /* Correlation Identifier */

 /* Accounting Token */

 /* Put Application Types */

 /* Group Identifier */

 /* Message Flags */

 /* Message Flags Masks */

 /* Original Length */

 /********************************************************************/
 /* Values Related to MQMDE Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /********************************************************************/
 /* Values Related to MQMD1 Structure                                */
 /********************************************************************/

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQMD2 Structure                                */
 /********************************************************************/

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQMHBO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Message Handle To Buffer Options */

 /********************************************************************/
 /* Values Related to MQOD Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Obsolete DB2 Messages options on Inquire Group */

 /* Object Types */

 /* Extended Object Types */

 /********************************************************************/
 /* Values Related to MQPD Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Property Descriptor Options */

 /* Property Support Options */

 /* Property Context */

 /* Property Copy Options */

 /********************************************************************/
 /* Values Related to MQPMO Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Put Message Options */

 /* Put Message Options for publish mask */

 /* Put Message Record Fields */

 /* Action */

 /********************************************************************/
 /* Values Related to MQRFH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */
 /* MQRFH2 flags in the restricted mask are reserved for MQ use: */

 /* 0x80000000 - MQRFH_INTERNAL - This flag indicates the RFH2 header */
 /* was created by WebSphere MQ for internal use. */


 /* Names for Name/Value String */

 /********************************************************************/
 /* Values Related to MQRFH Structure                                */
 /********************************************************************/

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQRMH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /* Object Instance Identifier */

 /********************************************************************/
 /* Values Related to MQSD Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Security Identifier */

 /* Security Identifier Types */

 /********************************************************************/
 /* Values Related to MQSMPO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Set Message Property Options */

 /********************************************************************/
 /* Values Related to MQSRO Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Subscription Request Options */

 /********************************************************************/
 /* Values Related to MQSTS Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQTM Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQTMC Structure                                */
 /********************************************************************/

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQTMC2 Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Length */

 /* Structure Version Number */

 /********************************************************************/
 /* Values Related to MQWIH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /********************************************************************/
 /* Values Related to MQXQH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /********************************************************************/
 /* Values Related to All Functions                                  */
 /********************************************************************/

 /* Connection Handles */

 /* String Lengths */

 /* Completion Codes */

 /* Reason Codes */

 /********************************************************************/
 /* Values Related to Queue Attributes                               */
 /********************************************************************/

 /* Queue Types */

 /* Cluster Queue Types */

 /* Extended Queue Types */

 /* Queue Definition Types */

 /* Inhibit Get Values */

 /* Inhibit Put Values */

 /* Queue Shareability */

 /* Back-Out Hardening */

 /* Message Delivery Sequence */

 /* Nonpersistent Message Class */

 /* Trigger Controls */

 /* Trigger Types */

 /* Trigger Restart */

 /* Queue Usages */

 /* Distribution Lists */

 /* Index Types */

 /* Default Bindings */

 /* Queue Sharing Group Dispositions */

 /* Reorganization Controls */

 /* Read Ahead Values */

 /* Queue and Channel Property Control Values */

 /********************************************************************/
 /* Values Related to Namelist Attributes                            */
 /********************************************************************/

 /* Name Count */

 /* Namelist Types */

 /********************************************************************/
 /* Values Related to CF-Structure Attributes                        */
 /********************************************************************/

 /* CF Recoverability */

 /* CF Automatic Recovery */

 /* CF Loss of Connectivity Action */

 /********************************************************************/
 /* Values Related to Service Attributes                             */
 /********************************************************************/

 /* Service Types */

 /********************************************************************/
 /* Values Related to QueueManager Attributes                        */
 /********************************************************************/

 /* Adopt New MCA Checks */

 /* Adopt New MCA Types */

 /* Autostart */

 /* Channel Auto Definition */

 /* Cluster Workload */

 /* Command Levels */

 /* Command Server Options */

 /* DNS WLM */

 /* Expiration Scan Interval */

 /* Intra-Group Queuing */

 /* Intra-Group Queuing Put Authority */

 /* IP Address Versions */

 /* Message Mark-Browse Interval */

 /* Monitoring Values */

 /* Application Function Types */

 /* Application Activity Trace Detail */

 /* Platforms */

 /* Maximum Properties Length */

 /* Pub/Sub Mode */

 /* Pub/Sub clusters */

 /* Control Options */

 /* Receive Timeout Types */

 /* Recording Options */

 /* Security Case */

 /* Shared Queue Queue Manager Name */

 /* SSL FIPS Requirements */

 /* Syncpoint Availability */

 /* Service Controls */

 /* Service Status */

 /* TCP Keepalive */

 /* TCP Stack Types */

 /* Channel Initiator Trace Autostart */

 /* Capability */
 /********************************************************************/
 /* Values Related to Topic Attributes                               */
 /********************************************************************/

 /* Persistent/Non-persistent Message Delivery */

 /* Master administration */

 /* Publish scope */

 /* Durable subscriptions */

 /* Wildcards */

 /* Subscriptions Allowed */

 /* Proxy Sub Propagation */

 /* Publications Allowed */

 /* Topic Type */

 /* Multicast */

 /* CommInfo Type */

 /********************************************************************/
 /* Values Related to Subscription Attributes                        */
 /********************************************************************/

 /* Destination Class */

 /* Pub/Sub Message Properties */

 /* Request Only */

 /* Durable Subscriptions */

 /* Subscription Scope */

 /* Variable User ID */

 /* Wildcard Schema */

 /********************************************************************/
 /* Values Related to Channel Authentication Configuration           */
 /* Attributes                                                       */
 /********************************************************************/

 /* User Source Options */

 /* Warn Options */

 /* DSBlock Options */

 /* DSExpand Options */

 /* OffldUse Options */

 /* Use Dead Letter Queue Options */

 /********************************************************************/
 /* Values Related to MQCLOSE Function                               */
 /********************************************************************/

 /* Object Handle */

 /* Close Options */

 /********************************************************************/
 /* Values Related to MQCTL and MQCB Functions                       */
 /********************************************************************/

 /* Operation codes for MQCTL */

 /* Operation codes for MQCB */

 /* Operation codes for MQCTL and MQCB */

 /********************************************************************/
 /* Values Related to MQDLTMH Function                               */
 /********************************************************************/

 /* Message handle */

 /********************************************************************/
 /* Values Related to MQINQ Function                                 */
 /********************************************************************/

 /* Byte Attribute Selectors */

 /* Character Attribute Selectors */

 /* Integer Attribute Selectors */

 /* Integer Attribute Values */

 /* CommInfo Bridge */

 /* Group Attribute Selectors */

 /********************************************************************/
 /* Values Related to MQOPEN Function                                */
 /********************************************************************/

 /* Open Options */

 /* Following used in C++ only */

 /********************************************************************/
 /* Values Related to MQSETMP Function                               */
 /********************************************************************/

 /* Property data types */

 /* Property value lengths */

 /********************************************************************/
 /* Values Related to MQSTAT Function                                */
 /********************************************************************/

 /* Stat Options */

 /********************************************************************/
 /* Values Related to MQSUB Function                                 */
 /********************************************************************/

 /* Subscribe Options */

 /********************************************************************/
 /* Values Related to MQSUBRQ Function                               */
 /********************************************************************/

 /* Action */

 /********************************************************************/
 /* Constants for MQ Extended Reach                                  */
 /********************************************************************/

 /* General Constants */

 /********************************************************************/
 /* MQAIR Structure -- Authentication Information Record             */
 /********************************************************************/

 dcl
  1 MQAIR based,
   3 StrucId char(4)
     init('AIR '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(1),            /* Structure version number */
   3 AuthInfoType fixed bin(31)
     init(1),             /* Type of authentication */
                                       /* information */
   3 AuthInfoConnName char(264)
     init(''),                         /* Connection name of CRL LDAP */
                                       /* server */
   3 LDAPUserNamePtr pointer
     init(sysnull()),                  /* Address of LDAP user name */
   3 LDAPUserNameOffset fixed bin(31)
     init(0),                          /* Offset of LDAP user name */
                                       /* from start of MQAIR */
                                       /* structure */
   3 LDAPUserNameLength fixed bin(31)
     init(0),                          /* Length of LDAP user name */
   3 LDAPPassword char(32)
     init(''),                         /* Password to access LDAP */
                                       /* server */
   /* Ver:1 */
   3 OCSPResponderURL char(256)
     init('');                         /* URL of the OCSP responder */
   /* Ver:2 */

 /********************************************************************/
 /* MQBMHO Structure -- Buffer To Message Handle Options             */
 /********************************************************************/

 dcl
  1 MQBMHO based,
   3 StrucId char(4)
     init('BMHO'),          /* Structure identifier */
   3 Version fixed bin(31)
     init(1),         /* Structure version number */
   3 Options fixed bin(31)
     init(1); /* Options that control the */
                                     /* action of MQBUFMH */

 /********************************************************************/
 /* MQCBC Structure -- Callback Context                              */
 /********************************************************************/

 dcl
  1 MQCBC based,
   3 StrucId char(4)
     init('CBC '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(1),        /* Structure version number */
   3 CallType fixed bin(31)
     init(0),                      /* Why Function was called */
   3 Hobj fixed bin(31)
     init(-1),     /* Object Handle */
   3 CallbackArea pointer
     init(sysnull()),              /* Callback data passed to the */
                                   /* function */
   3 ConnectionArea pointer
     init(sysnull()),              /* MQCTL Data area passed to the */
                                   /* function */
   3 CompCode fixed bin(31)
     init(0),                /* Completion Code */
   3 Reason fixed bin(31)
     init(0),              /* Reason Code */
   3 State fixed bin(31)
     init(0),              /* Consumer State */
   3 DataLength fixed bin(31)
     init(0),                      /* Message Data Length */
   3 BufferLength fixed bin(31)
     init(0),                      /* Buffer Length */
   3 Flags fixed bin(31)
     init(0),            /* Flags containing information */
                                   /* about this consumer */
   /* Ver:1 */
   3 ReconnectDelay fixed bin(31)
     init(0);                      /* Number of milliseconds before */
                                   /* reconnect attempt */
   /* Ver:2 */

 /********************************************************************/
 /* MQCBD Structure -- Callback Data Descriptor                      */
 /********************************************************************/

 dcl
  1 MQCBD based,
   3 StrucId char(4)
     init('CBD '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(1),        /* Structure version number */
   3 CallbackType fixed bin(31)
     init(1), /* Callback function type */
   3 Options fixed bin(31)
     init(0),            /* Options controlling message */
                                   /* consumption */
   3 CallbackArea pointer
     init(sysnull()),              /* User data passed to the */
                                   /* function */
   3 CallbackFunction pointer
     init(sysnull()),              /* Callback function pointer */
   3 CallbackName char(128)
     init('\0'),                   /* Callback name */
   3 MaxMsgLength fixed bin(31)
     init(-1);  /* Maximum message length */

 /********************************************************************/
 /* MQCHARV Structure -- Variable-length string                      */
 /********************************************************************/

 dcl
  1 MQCHARV based,
   3 VSPtr pointer
     init(sysnull()),         /* Address of variable length string */
   3 VSOffset fixed bin(31)
     init(0),                 /* Offset of variable length string */
   3 VSBufSize fixed bin(31)
     init(0),                 /* Size of buffer */
   3 VSLength fixed bin(31)
     init(0),                 /* Length of variable length string */
   3 VSCCSID fixed bin(31)
     init(-3);       /* CCSID of variable length string */

 /********************************************************************/
 /* MQCIH Structure -- CICS Information Header                       */
 /********************************************************************/

 dcl
  1 MQCIH based,
   3 StrucId char(4)
     init('CIH '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(2),            /* Structure version number */
   3 StrucLength fixed bin(31)
     init(180),             /* Length of MQCIH structure */
   3 Encoding fixed bin(31)
     init(0),                          /* Reserved */
   3 CodedCharSetId fixed bin(31)
     init(0),                          /* Reserved */
   3 Format char(8)
     init('        '),                 /* MQ format name of data that */
                                       /* follows MQCIH */
   3 Flags fixed bin(31)
     init(0),                 /* Flags */
   3 ReturnCode fixed bin(31)
     init(0),                   /* Return code from bridge */
   3 CompCode fixed bin(31)
     init(0),                    /* MQ completion code or CICS */
                                       /* EIBRESP */
   3 Reason fixed bin(31)
     init(0),                  /* MQ reason or feedback code, */
                                       /* or CICS EIBRESP2 */
   3 UOWControl fixed bin(31)
     init(273),               /* Unit-of-work control */
   3 GetWaitInterval fixed bin(31)
     init(-2),             /* Wait interval for MQGET */
                                       /* call issued by bridge task */
   3 LinkType fixed bin(31)
     init(1),              /* Link type */
   3 OutputDataLength fixed bin(31)
     init(-1),            /* Output COMMAREA data length */
   3 FacilityKeepTime fixed bin(31)
     init(0),                          /* Bridge facility release */
                                       /* time */
   3 ADSDescriptor fixed bin(31)
     init(0),               /* Send/receive ADS descriptor */
   3 ConversationalTask fixed bin(31)
     init(0),                   /* Whether task can be */
                                       /* conversational */
   3 TaskEndStatus fixed bin(31)
     init(0),              /* Status at end of task */
   3 Facility char(8)
     init('0000000000000000'X),                /* Bridge facility token
 */
   3 Function char(4)
     init('    '),               /* MQ call name or CICS EIBFN */
                                       /* function */
   3 AbendCode char(4)
     init(''),                         /* Abend code */
   3 Authenticator char(8)
     init(''),                         /* Password or passticket */
   3 Reserved1 char(8)
     init(''),                         /* Reserved */
   3 ReplyToFormat char(8)
     init('        '),                 /* MQ format name of reply */
                                       /* message */
   3 RemoteSysId char(4)
     init(''),                         /* Remote CICS system id to */
                                       /* use */
   3 RemoteTransId char(4)
     init(''),                         /* CICS RTRANSID to use */
   3 TransactionId char(4)
     init(''),                         /* Transaction to attach */
   3 FacilityLike char(4)
     init(''),                         /* Terminal emulated */
                                       /* attributes */
   3 AttentionId char(4)
     init(''),                         /* AID key */
   3 StartCode char(4)
     init('    '),                 /* Transaction start code */
   3 CancelCode char(4)
     init(''),                         /* Abend transaction code */
   3 NextTransactionId char(4)
     init(''),                         /* Next transaction to attach */
   3 Reserved2 char(8)
     init(''),                         /* Reserved */
   3 Reserved3 char(8)
     init(''),                         /* Reserved */
   /* Ver:1 */
   3 CursorPosition fixed bin(31)
     init(0),                          /* Cursor position */
   3 ErrorOffset fixed bin(31)
     init(0),                          /* Offset of error in message */
   3 InputItem fixed bin(31)
     init(0),                          /* Reserved */
   3 Reserved4 fixed bin(31)
     init(0);                          /* Reserved */
   /* Ver:2 */

 /********************************************************************/
 /* MQCMHO Structure -- Create Message Handle Options                */
 /********************************************************************/

 dcl
  1 MQCMHO based,
   3 StrucId char(4)
     init('CMHO'),           /* Structure identifier */
   3 Version fixed bin(31)
     init(1),          /* Structure version number */
   3 Options fixed bin(31)
     init(0); /* Options that control the */
                                      /* action of MQCRTMH */

 /********************************************************************/
 /* MQCTLO Structure -- MQCTL function options                       */
 /********************************************************************/

 dcl
  1 MQCTLO based,
   3 StrucId char(4)
     init('CTLO'),  /* Structure identifier */
   3 Version fixed bin(31)
     init(1), /* Structure version number */
   3 Options fixed bin(31)
     init(0),      /* Options that control the action of */
                             /* MQCTL */
   3 Reserved fixed bin(31)
     init(-1),   /* Reserved */
   3 ConnectionArea pointer
     init(sysnull());        /* MQCTL Data area passed to the */
                             /* function */

 /********************************************************************/
 /* MQSCO Structure -- SSL Configuration Options                     */
 /********************************************************************/

 dcl
  1 MQSCO based,
   3 StrucId char(4)
     init('SCO '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(1),             /* Structure version number */
   3 KeyRepository char(256)
     init(''),                          /* Location of SSL key */
                                        /* repository */
   3 CryptoHardware char(256)
     init(''),                          /* Cryptographic hardware */
                                        /* configuration string */
   3 AuthInfoRecCount fixed bin(31)
     init(0),                           /* Number of MQAIR records */
                                        /* present */
   3 AuthInfoRecOffset fixed bin(31)
     init(0),                           /* Offset of first MQAIR */
                                        /* record from start of MQSCO */
                                        /* structure */
   3 AuthInfoRecPtr pointer
     init(sysnull()),                   /* Address of first MQAIR */
                                        /* record */
   /* Ver:1 */
   3 KeyResetCount fixed bin(31)
     init(0),   /* Number of unencrypted */
                                        /* bytes sent/received before */
                                        /* secret key is reset */
   3 FipsRequired fixed bin(31)
     init(0),               /* Using FIPS-certified */
                                        /* algorithms */
   /* Ver:2 */
   3 EncryptionPolicySuiteB (4) fixed bin(31)
     init(1,0,0,0),                     /* Use only Suite B */
                                        /* cryptographic algorithms */
   /* Ver:3 */
   3 CertificateValPolicy fixed bin(31)
     init(0),  /* Certificate validation */
                                        /* policy */
   /* Ver:4 */
   3 CertificateLabel char(64)
     init('');                          /* SSL/TLS certificate label */
   /* Ver:5 */

 /********************************************************************/
 /* MQCSP Structure -- Security Parameters                           */
 /********************************************************************/

 dcl
  1 MQCSP based,
   3 StrucId char(4)
     init('CSP '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(1),            /* Structure version number */
   3 AuthenticationType fixed bin(31)
     init(0),            /* Type of authentication */
   3 Reserved1 char(4)
     init('00000000'X),                /* Reserved */
   3 CSPUserIdPtr pointer
     init(sysnull()),                  /* Address of user ID */
   3 CSPUserIdOffset fixed bin(31)
     init(0),                          /* Offset of user ID */
   3 CSPUserIdLength fixed bin(31)
     init(0),                          /* Length of user ID */
   3 Reserved2 char(8)
     init('0000000000000000'X),        /* Reserved */
   3 CSPPasswordPtr pointer
     init(sysnull()),                  /* Address of password */
   3 CSPPasswordOffset fixed bin(31)
     init(0),                          /* Offset of password */
   3 CSPPasswordLength fixed bin(31)
     init(0);                          /* Length of password */

 /********************************************************************/
 /* MQCNO Structure -- Connect Options                               */
 /********************************************************************/

 dcl
  1 MQCNO based,
   3 StrucId char(4)
     init('CNO '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(1),             /* Structure version number */
   3 Options fixed bin(31)
     init(0),                  /* Options that control the */
                                        /* action of MQCONNX */
   /* Ver:1 */
   3 ClientConnOffset fixed bin(31)
     init(0),                           /* Offset of MQCD structure */
                                        /* for client connection */
   3 ClientConnPtr pointer
     init(sysnull()),                   /* Address of MQCD structure */
                                        /* for client connection */
   /* Ver:2 */
   3 ConnTag char(128)
     init('0000000000000000000000000000000000000000000000000000000000000
 00000000000000000000000000000000000000000000000000000000000000000000000
 00000000000000000000000000000000000000000000000000000000000000000000000
 00000000000000000000000000000000000000000000000000000'X),
      /* Queue-manager connection */
                                        /* tag */
   /* Ver:3 */
   3 SSLConfigPtr pointer
     init(sysnull()),                   /* Address of MQSCO structure */
                                        /* for client connection */
   3 SSLConfigOffset fixed bin(31)
     init(0),                           /* Offset of MQSCO structure */
                                        /* for client connection */
   /* Ver:4 */
   3 ConnectionId char(24)
     init('000000000000000000000000000000000000000000000000'X),
       /* Unique Connection */
                                        /* Identifier */
   3 SecurityParmsOffset fixed bin(31)
     init(0),                           /* Offset of MQCSP structure */
   3 SecurityParmsPtr pointer
     init(sysnull());                   /* Address of MQCSP structure */
   /* Ver:5 */

 /********************************************************************/
 /* MQDH Structure -- Distribution Header                            */
 /********************************************************************/

 dcl
  1 MQDH based,
   3 StrucId char(4)
     init('DH  '),           /* Structure identifier */
   3 Version fixed bin(31)
     init(1),          /* Structure version number */
   3 StrucLength fixed bin(31)
     init(0),                       /* Length of MQDH structure plus */
                                    /* following MQOR and MQPMR */
                                    /* records */
   3 Encoding fixed bin(31)
     init(0),                       /* Numeric encoding of data that */
                                    /* follows the MQOR and MQPMR */
                                    /* records */
   3 CodedCharSetId fixed bin(31)
     init(0),        /* Character set identifier of */
                                    /* data that follows the MQOR and */
                                    /* MQPMR records */
   3 Format char(8)
     init('        '),              /* Format name of data that */
                                    /* follows the MQOR and MQPMR */
                                    /* records */
   3 Flags fixed bin(31)
     init(0),              /* General flags */
   3 PutMsgRecFields fixed bin(31)
     init(0),             /* Flags indicating which MQPMR */
                                    /* fields are present */
   3 RecsPresent fixed bin(31)
     init(0),                       /* Number of MQOR records present */
   3 ObjectRecOffset fixed bin(31)
     init(0),                       /* Offset of first MQOR record */
                                    /* from start of MQDH */
   3 PutMsgRecOffset fixed bin(31)
     init(0);                       /* Offset of first MQPMR record */
                                    /* from start of MQDH */

 /********************************************************************/
 /* MQDLH Structure -- Dead Letter Header                            */
 /********************************************************************/

 dcl
  1 MQDLH based,
   3 StrucId char(4)
     init('DLH '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(1),        /* Structure version number */
   3 Reason fixed bin(31)
     init(0),              /* Reason message arrived on */
                                   /* dead-letter */
                                   /* (undelivered-message) queue */
   3 DestQName char(48)
     init(''),                     /* Name of original destination */
                                   /* queue */
   3 DestQMgrName char(48)
     init(''),                     /* Name of original destination */
                                   /* queue manager */
   3 Encoding fixed bin(31)
     init(0),                      /* Numeric encoding of data that */
                                   /* follows MQDLH */
   3 CodedCharSetId fixed bin(31)
     init(0),       /* Character set identifier of */
                                   /* data that follows MQDLH */
   3 Format char(8)
     init('        '),             /* Format name of data that */
                                   /* follows MQDLH */
   3 PutApplType fixed bin(31)
     init(0),                      /* Type of application that put */
                                   /* message on dead-letter */
                                   /* (undelivered-message) queue */
   3 PutApplName char(28)
     init(''),                     /* Name of application that put */
                                   /* message on dead-letter */
                                   /* (undelivered-message) queue */
   3 PutDate char(8)
     init(''),                     /* Date when message was put on */
                                   /* dead-letter */
                                   /* (undelivered-message) queue */
   3 PutTime char(8)
     init('');                     /* Time when message was put on */
                                   /* dead-letter */
                                   /* (undelivered-message) queue */

 /********************************************************************/
 /* MQDMHO Structure -- Delete Message Handle Options                */
 /********************************************************************/

 dcl
  1 MQDMHO based,
   3 StrucId char(4)
     init('DMHO'),  /* Structure identifier */
   3 Version fixed bin(31)
     init(1), /* Structure version number */
   3 Options fixed bin(31)
     init(0);      /* Options that control the action of */
                             /* MQDLTMH */

 /********************************************************************/
 /* MQDMPO Structure -- Delete Message Property Options              */
 /********************************************************************/

 dcl
  1 MQDMPO based,
   3 StrucId char(4)
     init('DMPO'),  /* Structure identifier */
   3 Version fixed bin(31)
     init(1), /* Structure version number */
   3 Options fixed bin(31)
     init(0); /* Options that control the action of */
                             /* MQDLTMP */

 /********************************************************************/
 /* MQGMO Structure -- Get Message Options                           */
 /********************************************************************/

 dcl
  1 MQGMO based,

   3 StrucId char(4)
     init('GMO '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(1),             /* Structure version number */
   3 Options fixed bin(31)
     init((0+0)),
                                        /* Options that control the */
                                        /* action of MQGET */
   3 WaitInterval fixed bin(31)
     init(0),                           /* Wait interval */
   3 Signal1 pointer
     init(sysnull()),                   /* Signal */
   3 Signal2 fixed bin(31)
     init(0),                           /* Signal identifier */
   3 ResolvedQName char(48)
     init(''),                          /* Resolved name of */
                                        /* destination queue */
   /* Ver:1 */
   3 MatchOptions fixed bin(31)
     init((1+2)),
                                        /* Options controlling */
                                        /* selection criteria used */
                                        /* for MQGET */
   3 GroupStatus char(1)
     init(' '),           /* Flag indicating whether */
                                        /* message retrieved is in a */
                                        /* group */
   3 SegmentStatus char(1)
     init(' '),          /* Flag indicating whether */
                                        /* message retrieved is a */
                                        /* segment of a logical */
                                        /* message */
   3 Segmentation char(1)
     init(' '),             /* Flag indicating whether */
                                        /* further segmentation is */
                                        /* allowed for the message */
                                        /* retrieved */
   3 Reserved1 char(1)
     init(''),                          /* Reserved */
   /* Ver:2 */
   3 MsgToken char(16)
     init('00000000000000000000000000000000'X),                 /* Messa
 ge token */
   3 ReturnedLength fixed bin(31)
     init(-1),              /* Length of message data */
                                        /* returned (bytes) */
   /* Ver:3 */
   3 Reserved2 fixed bin(31)
     init(0),                           /* Reserved */
   3 MsgHandle FIXED BIN(63)

     init(0);                   /* Message handle */
   /* Ver:4 */

 /********************************************************************/
 /* MQIIH Structure -- IMS Information Header                        */
 /********************************************************************/

 dcl
  1 MQIIH based,
   3 StrucId char(4)
     init('IIH '),            /* Structure identifier */
   3 Version fixed bin(31)
     init(1),           /* Structure version number */
   3 StrucLength fixed bin(31)
     init(84),            /* Length of MQIIH structure */
   3 Encoding fixed bin(31)
     init(0),                         /* Reserved */
   3 CodedCharSetId fixed bin(31)
     init(0),                         /* Reserved */
   3 Format char(8)
     init('        '),                /* MQ format name of data that */
                                      /* follows MQIIH */
   3 Flags fixed bin(31)
     init(0),                /* Flags */
   3 LTermOverride char(8)
     init(''),                        /* Logical terminal override */
   3 MFSMapName char(8)
     init(''),                        /* Message format services map */
                                      /* name */
   3 ReplyToFormat char(8)
     init('        '),                /* MQ format name of reply */
                                      /* message */
   3 Authenticator char(8)
     init('        '),               /* RACF password or passticket */
   3 TranInstanceId char(16)
     init('00000000000000000000000000000000'X),               /* Transac
 tion instance */
                                      /* identifier */
   3 TranState char(1)
     init(' '), /* Transaction state */
   3 CommitMode char(1)
     init('0'),    /* Commit mode */
   3 SecurityScope char(1)
     init('C'),               /* Security scope */
   3 Reserved char(1)
     init('');                        /* Reserved */

 /********************************************************************/
 /* MQIMPO Structure -- Inquire Message Property Options             */
 /********************************************************************/

 dcl
  1 MQIMPO based,
   3 StrucId char(4)
     init('IMPO'),           /* Structure identifier */
   3 Version fixed bin(31)
     init(1),          /* Structure version number */
   3 Options fixed bin(31)
     init(0),          /* Options that control the */
                                      /* action of MQINQMP */
   3 RequestedEncoding fixed bin(31)
     init(785),              /* Requested encoding of Value */
   3 RequestedCCSID fixed bin(31)
     init(-3),               /* Requested character set */
                                      /* identifier of Value */
   3 ReturnedEncoding fixed bin(31)
     init(785),              /* Returned encoding of Value */
   3 ReturnedCCSID fixed bin(31)
     init(0),                         /* Returned character set */
                                      /* identifier of Value */
   3 Reserved1 fixed bin(31)
     init(0),                         /* Reserved */
   3 ReturnedName,                    /* Returned property name */
     5 VSPtr pointer
       init(sysnull()),               /* Address of variable length */
                                      /* string */
     5 VSOffset fixed bin(31)
       init(0),                       /* Offset of variable length */
                                      /* string */
     5 VSBufSize fixed bin(31)
       init(0),                       /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                       /* Length of variable length */
                                      /* string */
     5 VSCCSID fixed bin(31)
       init(-3),             /* CCSID of variable length */
                                      /* string */
   3 TypeString char(8)
     init('');                        /* Property data type as a */
                                      /* string */

 /********************************************************************/
 /* MQMD Structure -- Message Descriptor                             */
 /********************************************************************/

 dcl
  1 MQMD based,
   3 StrucId char(4)
     init('MD  '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(1),             /* Structure version number */
   3 Report fixed bin(31)
     init(0),                  /* Options for report messages */
   3 MsgType fixed bin(31)
     init(8),              /* Message type */
   3 Expiry fixed bin(31)
     init(-1),             /* Message lifetime */
   3 Feedback fixed bin(31)
     init(0),                  /* Feedback or reason code */
   3 Encoding fixed bin(31)
     init(785),               /* Numeric encoding of message */
                                       /* data */
   3 CodedCharSetId fixed bin(31)
     init(0),               /* Character set identifier of */
                                       /* message data */
   3 Format char(8)
     init('        '),                 /* Format name of message data */
   3 Priority fixed bin(31)
     init(-1),    /* Message priority */
   3 Persistence fixed bin(31)
     init(2), /* Message persistence */
   3 MsgId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Message identifier */
   3 CorrelId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Correlation identifier */
   3 BackoutCount fixed bin(31)
     init(0),                          /* Backout counter */
   3 ReplyToQ char(48)
     init(''),                         /* Name of reply queue */
   3 ReplyToQMgr char(48)
     init(''),                         /* Name of reply queue manager */
   3 UserIdentifier char(12)
     init(''),                         /* User identifier */
   3 AccountingToken char(32)
     init('0000000000000000000000000000000000000000000000000000000000000
 000'X),                 /* Accounting token */
   3 ApplIdentityData char(32)
     init(''),                         /* Application data relating */
                                       /* to identity */
   3 PutApplType fixed bin(31)
     init(0),            /* Type of application that */
                                       /* put the message */
   3 PutApplName char(28)
     init(''),                         /* Name of application that */
                                       /* put the message */
   3 PutDate char(8)
     init(''),                         /* Date when message was put */
   3 PutTime char(8)
     init(''),                         /* Time when message was put */
   3 ApplOriginData char(4)
     init('');                         /* Application data relating */
                                       /* to origin */
   /* Ver:1 */

 /********************************************************************/
 /* MQMDE Structure -- Message Descriptor Extension                  */
 /********************************************************************/

 dcl
  1 MQMDE based,
   3 StrucId char(4)
     init('MDE '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(2),        /* Structure version number */
   3 StrucLength fixed bin(31)
     init(72),         /* Length of MQMDE structure */
   3 Encoding fixed bin(31)
     init(785),           /* Numeric encoding of data that */
                                   /* follows MQMDE */
   3 CodedCharSetId fixed bin(31)
     init(0),       /* Character-set identifier of */
                                   /* data that follows MQMDE */
   3 Format char(8)
     init('        '),             /* Format name of data that */
                                   /* follows MQMDE */
   3 Flags fixed bin(31)
     init(0),            /* General flags */
   3 GroupId char(24)
     init('000000000000000000000000000000000000000000000000'X),
      /* Group identifier */
   3 MsgSeqNumber fixed bin(31)
     init(1),                      /* Sequence number of logical */
                                   /* message within group */
   3 Offset fixed bin(31)
     init(0),                      /* Offset of data in physical */
                                   /* message from start of logical */
                                   /* message */
   3 MsgFlags fixed bin(31)
     init(0),              /* Message flags */
   3 OriginalLength fixed bin(31)
     init(-1);         /* Length of original message */

 /********************************************************************/
 /* MQMD1 Structure -- Version-1 Message Descriptor                  */
 /********************************************************************/

 dcl
  1 MQMD1 based,
   3 StrucId char(4)
     init('MD  '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(1),             /* Structure version number */
   3 Report fixed bin(31)
     init(0),                  /* Options for report messages */
   3 MsgType fixed bin(31)
     init(8),              /* Message type */
   3 Expiry fixed bin(31)
     init(-1),             /* Message lifetime */
   3 Feedback fixed bin(31)
     init(0),                  /* Feedback or reason code */
   3 Encoding fixed bin(31)
     init(785),               /* Numeric encoding of message */
                                       /* data */
   3 CodedCharSetId fixed bin(31)
     init(0),               /* Character set identifier of */
                                       /* message data */
   3 Format char(8)
     init('        '),                 /* Format name of message data */
   3 Priority fixed bin(31)
     init(-1),    /* Message priority */
   3 Persistence fixed bin(31)
     init(2), /* Message persistence */
   3 MsgId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Message identifier */
   3 CorrelId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Correlation identifier */
   3 BackoutCount fixed bin(31)
     init(0),                          /* Backout counter */
   3 ReplyToQ char(48)
     init(''),                         /* Name of reply queue */
   3 ReplyToQMgr char(48)
     init(''),                         /* Name of reply queue manager */
   3 UserIdentifier char(12)
     init(''),                         /* User identifier */
   3 AccountingToken char(32)
     init('0000000000000000000000000000000000000000000000000000000000000
 000'X),                 /* Accounting token */
   3 ApplIdentityData char(32)
     init(''),                         /* Application data relating */
                                       /* to identity */
   3 PutApplType fixed bin(31)
     init(0),            /* Type of application that */
                                       /* put the message */
   3 PutApplName char(28)
     init(''),                         /* Name of application that */
                                       /* put the message */
   3 PutDate char(8)
     init(''),                         /* Date when message was put */
   3 PutTime char(8)
     init(''),                         /* Time when message was put */
   3 ApplOriginData char(4)
     init('');                         /* Application data relating */
                                       /* to origin */

 /********************************************************************/
 /* MQMD2 Structure -- Version-2 Message Descriptor                  */
 /********************************************************************/

 dcl
  1 MQMD2 based,
   3 StrucId char(4)
     init('MD  '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(2),             /* Structure version number */
   3 Report fixed bin(31)
     init(0),                  /* Options for report messages */
   3 MsgType fixed bin(31)
     init(8),              /* Message type */
   3 Expiry fixed bin(31)
     init(-1),             /* Message lifetime */
   3 Feedback fixed bin(31)
     init(0),                  /* Feedback or reason code */
   3 Encoding fixed bin(31)
     init(785),               /* Numeric encoding of message */
                                       /* data */
   3 CodedCharSetId fixed bin(31)
     init(0),               /* Character set identifier of */
                                       /* message data */
   3 Format char(8)
     init('        '),                 /* Format name of message data */
   3 Priority fixed bin(31)
     init(-1),    /* Message priority */
   3 Persistence fixed bin(31)
     init(2), /* Message persistence */
   3 MsgId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Message identifier */
   3 CorrelId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Correlation identifier */
   3 BackoutCount fixed bin(31)
     init(0),                          /* Backout counter */
   3 ReplyToQ char(48)
     init(''),                         /* Name of reply queue */
   3 ReplyToQMgr char(48)
     init(''),                         /* Name of reply queue manager */
   3 UserIdentifier char(12)
     init(''),                         /* User identifier */
   3 AccountingToken char(32)
     init('0000000000000000000000000000000000000000000000000000000000000
 000'X),                 /* Accounting token */
   3 ApplIdentityData char(32)
     init(''),                         /* Application data relating */
                                       /* to identity */
   3 PutApplType fixed bin(31)
     init(0),            /* Type of application that */
                                       /* put the message */
   3 PutApplName char(28)
     init(''),                         /* Name of application that */
                                       /* put the message */
   3 PutDate char(8)
     init(''),                         /* Date when message was put */
   3 PutTime char(8)
     init(''),                         /* Time when message was put */
   3 ApplOriginData char(4)
     init(''),                         /* Application data relating */
                                       /* to origin */
   /* Ver:1 */
   3 GroupId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Group identifier */
   3 MsgSeqNumber fixed bin(31)
     init(1),                          /* Sequence number of logical */
                                       /* message within group */
   3 Offset fixed bin(31)
     init(0),                          /* Offset of data in physical */
                                       /* message from start of */
                                       /* logical message */
   3 MsgFlags fixed bin(31)
     init(0),                  /* Message flags */
   3 OriginalLength fixed bin(31)
     init(-1);             /* Length of original message */
   /* Ver:2 */

 /********************************************************************/
 /* MQMHBO Structure -- Message Handle To Buffer Options             */
 /********************************************************************/

 dcl
  1 MQMHBO based,
   3 StrucId char(4)
     init('MHBO'),             /* Structure identifier */
   3 Version fixed bin(31)
     init(1),            /* Structure version number */
   3 Options fixed bin(31)
     init(1); /* Options that control the */
                                        /* action of MQMHBUF */

 /********************************************************************/
 /* MQOD Structure -- Object descriptor                              */
 /********************************************************************/

 dcl
  1 MQOD based,
   3 StrucId char(4)
     init('OD  '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(1),            /* Structure version number */
   3 ObjectType fixed bin(31)
     init(1),                    /* Object type */
   3 ObjectName char(48)
     init(''),                        /* Object name */
   3 ObjectQMgrName char(48)
     init(''),                        /* Object queue manager name */
   3 DynamicQName char(48)
     init('CSQ.*'),                   /* Dynamic queue name */
   3 AlternateUserId char(12)
     init(''),                        /* Alternate user identifier */
   /* Ver:1 */
   3 RecsPresent fixed bin(31)
     init(0),                         /* Number of object records */
                                      /* present */
   3 KnownDestCount fixed bin(31)
     init(0),                         /* Number of local queues */
                                      /* opened successfully */
   3 UnknownDestCount fixed bin(31)
     init(0),                         /* Number of remote queues */
                                      /* opened */
   3 InvalidDestCount fixed bin(31)
     init(0),                         /* Number of queues that failed */
                                      /* to open */
   3 ObjectRecOffset fixed bin(31)
     init(0),                         /* Offset of first object */
                                      /* record from start of MQOD */
   3 ResponseRecOffset fixed bin(31)
     init(0),                         /* Offset of first response */
                                      /* record from start of MQOD */
   3 ObjectRecPtr pointer
     init(sysnull()),                 /* Address of first object */
                                      /* record */
   3 ResponseRecPtr pointer
     init(sysnull()),                 /* Address of first response */
                                      /* record */
   /* Ver:2 */
   3 AlternateSecurityId char(40)
     init('0000000000000000000000000000000000000000000000000000000000000
 0000000000000000000'X),                /* Alternate security */

                                      /* identifier */
   3 ResolvedQName char(48)
     init(''),                        /* Resolved queue name */
   3 ResolvedQMgrName char(48)
     init(''),                        /* Resolved queue manager name */
   /* Ver:3 */
   3 ObjectString,                    /* Object long name */
     5 VSPtr pointer
       init(sysnull()),               /* Address of variable length */
                                      /* string */
     5 VSOffset fixed bin(31)
       init(0),                       /* Offset of variable length */
                                      /* string */
     5 VSBufSize fixed bin(31)
       init(0),                       /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                       /* Length of variable length */
                                      /* string */
     5 VSCCSID fixed bin(31)
       init(-3),             /* CCSID of variable length */
                                      /* string */
   3 SelectionString,                 /* Message Selector */
     5 VSPtr pointer
       init(sysnull()),               /* Address of variable length */
                                      /* string */
     5 VSOffset fixed bin(31)
       init(0),                       /* Offset of variable length */
                                      /* string */
     5 VSBufSize fixed bin(31)
       init(0),                       /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                       /* Length of variable length */
                                      /* string */
     5 VSCCSID fixed bin(31)
       init(-3),             /* CCSID of variable length */
                                      /* string */
   3 ResObjectString,                 /* Resolved long object name */
     5 VSPtr pointer
       init(sysnull()),               /* Address of variable length */
                                      /* string */
     5 VSOffset fixed bin(31)
       init(0),                       /* Offset of variable length */
                                      /* string */
     5 VSBufSize fixed bin(31)
       init(0),                       /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                       /* Length of variable length */
                                      /* string */
     5 VSCCSID fixed bin(31)
       init(-3),             /* CCSID of variable length */
                                      /* string */
   3 ResolvedType fixed bin(31)
     init(0);                 /* Alias queue resolved object */
                                      /* type */
   /* Ver:4 */

 /********************************************************************/
 /* MQOR Structure -- Object Record                                  */
 /********************************************************************/

 dcl
  1 MQOR based,
   3 ObjectName char(48)
     init(''),                /* Object name */
   3 ObjectQMgrName char(48)
     init('');                /* Object queue manager name */

 /********************************************************************/
 /* MQPD Structure -- Property descriptor                            */
 /********************************************************************/

 dcl
  1 MQPD based,
   3 StrucId char(4)
     init('PD  '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(1),        /* Structure version number */
   3 Options fixed bin(31)
     init(0),             /* Options that control the action */
                                  /* of MQSETMP and MQINQMP */
   3 Support fixed bin(31)
     init(1), /* Property support option */
   3 Context fixed bin(31)
     init(0),       /* Property context */
   3 CopyOptions fixed bin(31)
     init(22);        /* Property copy options */

 /********************************************************************/
 /* MQPMO Structure -- Put Message Options                           */
 /********************************************************************/

 dcl
  1 MQPMO based,
   3 StrucId char(4)
     init('PMO '),            /* Structure identifier */
   3 Version fixed bin(31)
     init(1),           /* Structure version number */
   3 Options fixed bin(31)
     init(0),                /* Options that control the */
                                      /* action of MQPUT and MQPUT1 */
   3 Timeout fixed bin(31)
     init(-1),                        /* Reserved */
   3 Context fixed bin(31)
     init(0),                         /* Object handle of input queue */
   3 KnownDestCount fixed bin(31)
     init(0),                         /* Number of messages sent */
                                      /* successfully to local queues */
   3 UnknownDestCount fixed bin(31)
     init(0),                         /* Number of messages sent */
                                      /* successfully to remote */
                                      /* queues */
   3 InvalidDestCount fixed bin(31)
     init(0),                         /* Number of messages that */
                                      /* could not be sent */
   3 ResolvedQName char(48)
     init(''),                        /* Resolved name of destination */
                                      /* queue */
   3 ResolvedQMgrName char(48)
     init(''),                        /* Resolved name of destination */
                                      /* queue manager */
   /* Ver:1 */
   3 RecsPresent fixed bin(31)
     init(0),                         /* Number of put message */
                                      /* records or response records */
                                      /* present */
   3 PutMsgRecFields fixed bin(31)
     init(0),               /* Flags indicating which MQPMR */
                                      /* fields are present */
   3 PutMsgRecOffset fixed bin(31)
     init(0),                         /* Offset of first put message */
                                      /* record from start of MQPMO */
   3 ResponseRecOffset fixed bin(31)
     init(0),                         /* Offset of first response */
                                      /* record from start of MQPMO */
   3 PutMsgRecPtr pointer
     init(sysnull()),                 /* Address of first put message */
                                      /* record */
   3 ResponseRecPtr pointer
     init(sysnull()),                 /* Address of first response */
                                      /* record */
   /* Ver:2 */
   3 OriginalMsgHandle FIXED BIN(63)

     init(0),                 /* Original message handle */
   3 NewMsgHandle FIXED BIN(63)

     init(0),                 /* New message handle */
   3 Action fixed bin(31)
     init(0),                /* The action being performed */
   3 PubLevel fixed bin(31)
     init(9);                         /* Publication level */
   /* Ver:3 */

 /********************************************************************/
 /* MQRFH Structure -- Rules and Formatting Header                   */
 /********************************************************************/

 dcl
  1 MQRFH based,
   3 StrucId char(4)
     init('RFH '),           /* Structure identifier */
   3 Version fixed bin(31)
     init(1),          /* Structure version number */
   3 StrucLength fixed bin(31)
     init(32), /* Total length of MQRFH */
                                     /* including NameValueString */
   3 Encoding fixed bin(31)
     init(785),             /* Numeric encoding of data that */
                                     /* follows NameValueString */
   3 CodedCharSetId fixed bin(31)
     init(0),         /* Character set identifier of */
                                     /* data that follows */
                                     /* NameValueString */
   3 Format char(8)
     init('        '),               /* Format name of data that */
                                     /* follows NameValueString */
   3 Flags fixed bin(31)
     init(0);               /* Flags */

 /********************************************************************/
 /* MQRFH2 Structure -- Rules and Formatting Header 2                */
 /********************************************************************/

 dcl
  1 MQRFH2 based,
   3 StrucId char(4)
     init('RFH '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(2),            /* Structure version number */
   3 StrucLength fixed bin(31)
     init(36), /* Total length of MQRFH2 */
                                       /* including all */
                                       /* NameValueLength and */
                                       /* NameValueData fields */
   3 Encoding fixed bin(31)
     init(785),               /* Numeric encoding of data */
                                       /* that follows last */
                                       /* NameValueData field */
   3 CodedCharSetId fixed bin(31)
     init(-2),             /* Character set identifier of */
                                       /* data that follows last */
                                       /* NameValueData field */
   3 Format char(8)
     init('        '),                 /* Format name of data that */
                                       /* follows last NameValueData */
                                       /* field */
   3 Flags fixed bin(31)
     init(0),                 /* Flags */
   3 NameValueCCSID fixed bin(31)
     init(1208);                       /* Character set identifier of */
                                       /* NameValueData */

 /********************************************************************/
 /* MQRMH Structure -- Reference Message Header                      */
 /********************************************************************/

 dcl
  1 MQRMH based,
   3 StrucId char(4)
     init('RMH '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(1),            /* Structure version number */
   3 StrucLength fixed bin(31)
     init(0),                          /* Total length of MQRMH, */
                                       /* including strings at end of */
                                       /* fixed fields, but not the */
                                       /* bulk data */
   3 Encoding fixed bin(31)
     init(785),               /* Numeric encoding of bulk */
                                       /* data */
   3 CodedCharSetId fixed bin(31)
     init(0),           /* Character set identifier of */
                                       /* bulk data */
   3 Format char(8)
     init('        '),                 /* Format name of bulk data */
   3 Flags fixed bin(31)
     init(0),            /* Reference message flags */
   3 ObjectType char(8)
     init(''),                         /* Object type */
   3 ObjectInstanceId char(24)
     init('000000000000000000000000000000000000000000000000'X),
         /* Object instance identifier */
   3 SrcEnvLength fixed bin(31)
     init(0),                          /* Length of source */
                                       /* environment data */
   3 SrcEnvOffset fixed bin(31)
     init(0),                          /* Offset of source */
                                       /* environment data */
   3 SrcNameLength fixed bin(31)
     init(0),                          /* Length of source object */
                                       /* name */
   3 SrcNameOffset fixed bin(31)
     init(0),                          /* Offset of source object */
                                       /* name */
   3 DestEnvLength fixed bin(31)
     init(0),                          /* Length of destination */
                                       /* environment data */
   3 DestEnvOffset fixed bin(31)
     init(0),                          /* Offset of destination */
                                       /* environment */
   3 DestNameLength fixed bin(31)
     init(0),                          /* Length of destination */
                                       /* object name */
   3 DestNameOffset fixed bin(31)
     init(0),                          /* Offset of destination */
                                       /* object name */
   3 DataLogicalLength fixed bin(31)
     init(0),                          /* Length of bulk data */
   3 DataLogicalOffset fixed bin(31)
     init(0),                          /* Low offset of bulk data */
   3 DataLogicalOffset2 fixed bin(31)
     init(0);                          /* High offset of bulk data */

 /********************************************************************/
 /* MQSD Structure -- Subscription Descriptor                        */
 /********************************************************************/

 dcl
  1 MQSD based,
   3 StrucId char(4)
     init('SD  '),               /* Structure identifier */
   3 Version fixed bin(31)
     init(1),              /* Structure version number */
   3 Options fixed bin(31)
     init(0),                           /* Options associated with */
                                        /* subscribing */
   3 ObjectName char(48)
     init(''),                          /* Object name */
   3 AlternateUserId char(12)
     init(''),                          /* Alternate user identifier */
   3 AlternateSecurityId char(40)
     init('0000000000000000000000000000000000000000000000000000000000000
 0000000000000000000'X),                  /* Alternate security */

                                        /* identifier */
   3 SubExpiry fixed bin(31)
     init(-1),              /* Expiry of Subscription */
   3 ObjectString,                      /* Object long name */
     5 VSPtr pointer
       init(sysnull()),                 /* Address of variable length */
                                        /* string */
     5 VSOffset fixed bin(31)
       init(0),                         /* Offset of variable length */
                                        /* string */
     5 VSBufSize fixed bin(31)
       init(0),                         /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                         /* Length of variable length */
                                        /* string */
     5 VSCCSID fixed bin(31)
       init(-3),               /* CCSID of variable length */
                                        /* string */
   3 SubName,                           /* Subscription name */
     5 VSPtr pointer
       init(sysnull()),                 /* Address of variable length */
                                        /* string */
     5 VSOffset fixed bin(31)
       init(0),                         /* Offset of variable length */
                                        /* string */
     5 VSBufSize fixed bin(31)
       init(0),                         /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                         /* Length of variable length */
                                        /* string */
     5 VSCCSID fixed bin(31)
       init(-3),               /* CCSID of variable length */
                                        /* string */
   3 SubUserData,                       /* Subscription user data */
     5 VSPtr pointer
       init(sysnull()),                 /* Address of variable length */
                                        /* string */
     5 VSOffset fixed bin(31)
       init(0),                         /* Offset of variable length */
                                        /* string */
     5 VSBufSize fixed bin(31)
       init(0),                         /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                         /* Length of variable length */
                                        /* string */
     5 VSCCSID fixed bin(31)
       init(-3),               /* CCSID of variable length */
                                        /* string */
   3 SubCorrelId char(24)
     init('000000000000000000000000000000000000000000000000'X),
           /* Correlation Id related to */
                                        /* this subscription */
   3 PubPriority fixed bin(31)
     init(-3), /* Priority set in */
                                        /* publications */
   3 PubAccountingToken char(32)
     init('0000000000000000000000000000000000000000000000000000000000000
 000'X),                  /* Accounting Token set in */
                                        /* publications */
   3 PubApplIdentityData char(32)
     init(''),                          /* Appl Identity Data set in */
                                        /* publications */
   3 SelectionString,                   /* Message selector structure */
     5 VSPtr pointer
       init(sysnull()),                 /* Address of variable length */
                                        /* string */
     5 VSOffset fixed bin(31)
       init(0),                         /* Offset of variable length */
                                        /* string */
     5 VSBufSize fixed bin(31)
       init(0),                         /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                         /* Length of variable length */
                                        /* string */
     5 VSCCSID fixed bin(31)
       init(-3),               /* CCSID of variable length */
                                        /* string */
   3 SubLevel fixed bin(31)
     init(1),                           /* Subscription level */
   3 ResObjectString,                   /* Resolved long object name */
     5 VSPtr pointer
       init(sysnull()),                 /* Address of variable length */
                                        /* string */
     5 VSOffset fixed bin(31)
       init(0),                         /* Offset of variable length */
                                        /* string */
     5 VSBufSize fixed bin(31)
       init(0),                         /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                         /* Length of variable length */
                                        /* string */
     5 VSCCSID fixed bin(31)
       init(-3);               /* CCSID of variable length */
                                        /* string */

 /********************************************************************/
 /* MQSMPO Structure -- Set Message Property Options                 */
 /********************************************************************/

 dcl
  1 MQSMPO based,
   3 StrucId char(4)
     init('SMPO'),       /* Structure identifier */
   3 Version fixed bin(31)
     init(1),      /* Structure version number */
   3 Options fixed bin(31)
     init(0),      /* Options that control the action */
                                  /* of MQSETMP */
   3 ValueEncoding fixed bin(31)
     init(785),          /* Encoding of Value */
   3 ValueCCSID fixed bin(31)
     init(-3);           /* Character set identifier of */
                                  /* Value */

 /********************************************************************/
 /* MQSRO Structure -- Subscription Request Options                  */
 /********************************************************************/

 dcl
  1 MQSRO based,
   3 StrucId char(4)
     init('SRO '),  /* Structure identifier */
   3 Version fixed bin(31)
     init(1), /* Structure version number */
   3 Options fixed bin(31)
     init(0),               /* Options that control the action of */
                            /* MQSUBRQ */
   3 NumPubs fixed bin(31)
     init(0);               /* Number of publications sent */

 /********************************************************************/
 /* MQSTS Structure -- Status Information Record                     */
 /********************************************************************/

 dcl
  1 MQSTS based,
   3 StrucId char(4)
     init('STAT'),          /* Structure identifier */
   3 Version fixed bin(31)
     init(1),         /* Structure version number */
   3 CompCode fixed bin(31)
     init(0),                       /* Completion Code of first error */
   3 Reason fixed bin(31)
     init(0),                       /* Reason Code of first error */
   3 PutSuccessCount fixed bin(31)
     init(0),                       /* Number of Async put calls */
                                    /* succeeded */
   3 PutWarningCount fixed bin(31)
     init(0),                 /* Number of Async put calls had */
                                    /* warnings */
   3 PutFailureCount fixed bin(31)
     init(0),               /* Number of Async put calls had */
                                    /* failures */
   3 ObjectType fixed bin(31)
     init(1),                  /* Failing object type */
   3 ObjectName char(48)
     init(''),                      /* Failing object name */
   3 ObjectQMgrName char(48)
     init(''),                      /* Failing object queue manager */
   3 ResolvedObjectName char(48)
     init(''),                      /* Resolved name of destination */
                                    /* queue */
   3 ResolvedQMgrName char(48)
     init(''),                      /* Resolved name of destination */
                                    /* qmgr */
   /* Ver:1 */
   3 ObjectString,                  /* Failing object long name */
     5 VSPtr pointer
       init(sysnull()),             /* Address of variable length */
                                    /* string */
     5 VSOffset fixed bin(31)
       init(0),                     /* Offset of variable length */
                                    /* string */
     5 VSBufSize fixed bin(31)
       init(0),                     /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                     /* Length of variable length */
                                    /* string */
     5 VSCCSID fixed bin(31)
       init(-3),           /* CCSID of variable length */
                                    /* string */
   3 SubName,                       /* Failing subscription name */
     5 VSPtr pointer
       init(sysnull()),             /* Address of variable length */
                                    /* string */
     5 VSOffset fixed bin(31)
       init(0),                     /* Offset of variable length */
                                    /* string */
     5 VSBufSize fixed bin(31)
       init(0),                     /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                     /* Length of variable length */
                                    /* string */
     5 VSCCSID fixed bin(31)
       init(-3),           /* CCSID of variable length */
                                    /* string */
   3 OpenOptions fixed bin(31)
     init(0),                       /* Failing open options */
   3 SubOptions fixed bin(31)
     init(0);                       /* Failing subscription options */
   /* Ver:2 */

 /********************************************************************/
 /* MQTM Structure -- Trigger Message                                */
 /********************************************************************/

 dcl
  1 MQTM based,
   3 StrucId char(4)
     init('TM  '),    /* Structure identifier */
   3 Version fixed bin(31)
     init(1),   /* Structure version number */
   3 QName char(48)
     init(''),               /* Name of triggered queue */
   3 ProcessName char(48)
     init(''),               /* Name of process object */
   3 TriggerData char(64)
     init(''),               /* Trigger data */
   3 ApplType fixed bin(31)
     init(0),                /* Application type */
   3 ApplId char(256)
     init(''),               /* Application identifier */
   3 EnvData char(128)
     init(''),               /* Environment data */
   3 UserData char(128)
     init('');               /* User data */

 /********************************************************************/
 /* MQTMC2 Structure -- Trigger Message 2 (Character)                */
 /********************************************************************/

 dcl
  1 MQTMC2 based,
   3 StrucId char(4)
     init('TMC '),  /* Structure identifier */
   3 Version char(4)
     init('   2'), /* Structure version number */
   3 QName char(48)
     init(''),              /* Name of triggered queue */
   3 ProcessName char(48)
     init(''),              /* Name of process object */
   3 TriggerData char(64)
     init(''),              /* Trigger data */
   3 ApplType char(4)
     init(''),              /* Application type */
   3 ApplId char(256)
     init(''),              /* Application identifier */
   3 EnvData char(128)
     init(''),              /* Environment data */
   3 UserData char(128)
     init(''),              /* User data */
   /* Ver:1 */
   3 QMgrName char(48)
     init('');              /* Queue manager name */
   /* Ver:2 */

 /********************************************************************/
 /* MQWIH Structure -- Work Information Header                       */
 /********************************************************************/

 dcl
  1 MQWIH based,
   3 StrucId char(4)
     init('WIH '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(1),        /* Structure version number */
   3 StrucLength fixed bin(31)
     init(120),         /* Length of MQWIH structure */
   3 Encoding fixed bin(31)
     init(0),                      /* Numeric encoding of data that */
                                   /* follows MQWIH */
   3 CodedCharSetId fixed bin(31)
     init(0),       /* Character-set identifier of */
                                   /* data that follows MQWIH */
   3 Format char(8)
     init('        '),             /* Format name of data that */
                                   /* follows MQWIH */
   3 Flags fixed bin(31)
     init(0),             /* Flags */
   3 ServiceName char(32)
     init(''),                     /* Service name */
   3 ServiceStep char(8)
     init(''),                     /* Service step name */
   3 MsgToken char(16)
     init('00000000000000000000000000000000'X),            /* Message to
 ken */
   3 Reserved char(32)
     init('');                     /* Reserved */

 /********************************************************************/
 /* MQXQH Structure -- Transmission Queue Header                     */
 /********************************************************************/

 dcl
  1 MQXQH based,
   3 StrucId char(4)
     init('XQH '),    /* Structure identifier */
   3 Version fixed bin(31)
     init(1),   /* Structure version number */
   3 RemoteQName char(48)
     init(''),                /* Name of destination queue */
   3 RemoteQMgrName char(48)
     init(''),                /* Name of destination queue manager */
   3 MsgDesc,                 /* Original message descriptor */
     5 StrucId char(4)
       init('MD  '),   /* Structure identifier */
     5 Version fixed bin(31)
       init(1),  /* Structure version number */
     5 Report fixed bin(31)
       init(0),       /* Options for report messages */
     5 MsgType fixed bin(31)
       init(8),   /* Message type */
     5 Expiry fixed bin(31)
       init(-1),  /* Message lifetime */
     5 Feedback fixed bin(31)
       init(0),       /* Feedback or reason code */
     5 Encoding fixed bin(31)
       init(785),    /* Numeric encoding of message data */
     5 CodedCharSetId fixed bin(31)
       init(0),    /* Character set identifier of message */
                              /* data */
     5 Format char(8)
       init('        '),      /* Format name of message data */
     5 Priority fixed bin(31)
       init(-1),
                              /* Message priority */
     5 Persistence fixed bin(31)
       init(2),
                              /* Message persistence */
     5 MsgId char(24)
       init('000000000000000000000000000000000000000000000000'X),
 /* Message identifier */
     5 CorrelId char(24)
       init('000000000000000000000000000000000000000000000000'X),
 /* Correlation identifier */
     5 BackoutCount fixed bin(31)
       init(0),               /* Backout counter */
     5 ReplyToQ char(48)
       init(''),              /* Name of reply queue */
     5 ReplyToQMgr char(48)
       init(''),              /* Name of reply queue manager */
     5 UserIdentifier char(12)
       init(''),              /* User identifier */
     5 AccountingToken char(32)
       init('00000000000000000000000000000000000000000000000000000000000
 00000'X),      /* Accounting token */
     5 ApplIdentityData char(32)
       init(''),              /* Application data relating to */
                              /* identity */
     5 PutApplType fixed bin(31)
       init(0), /* Type of application that put the */
                              /* message */
     5 PutApplName char(28)
       init(''),              /* Name of application that put the */
                              /* message */
     5 PutDate char(8)
       init(''),              /* Date when message was put */
     5 PutTime char(8)
       init(''),              /* Time when message was put */
     5 ApplOriginData char(4)
       init('');              /* Application data relating to origin */


 /********************************************************************/
 /*  End of CMQP                                                     */
 /********************************************************************/
  /*   END %INCLUDE CMQP */
 ;

  /* BEGIN %INCLUDE YIDMQCN */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YIDMQCN - MQ Connection Module                  @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 21-Apr-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/

 dcl YIDMQCN       External Entry (pointer);        /* Comm Area     */

 /*------------------------------------------------------------------*/
 /*- Ende Copybook YIDMQCN                                          -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YIDMQCN */
                  ;                          /* MQ CONNECT            */
  /* BEGIN %INCLUDE YIDMQOP */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YIDMQOP - Open MQ Module                        @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 21-Apr-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/

 dcl YIDMQOP       External Entry (pointer,         /* Comm Area     */
                                   bin fixed(31));  /* Open Options  */

 /*------------------------------------------------------------------*/
 /*- Ende Copybook YIDMQOP                                          -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YIDMQOP */
                  ;                          /* MQ OPEN               */
  /* BEGIN %INCLUDE YIDMQGT */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   06. May. 2010   17:22   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YIDMQGT - MQ GET Operation                      @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 21-Apr-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       : Pronabananda Basu           Tag  : PB01         @*/
 /*@ Swan XP CR    : RLSE                        Date : 25-May-2016  @*/
 /*@ Changes Description:                                            @*/
 /*@  - Add wait interval time (MS) for MQGET                        @*/
 /*@-----------------------------------------------------------------@*/
 dcl  YIDMQGT      External entry (pointer,          /* Comm Area     */
                                   bin fixed (31),   /* Get Options   */
                                   bin fixed (31),   /* Wait Interval */
                                                     /* Defaut is     */
                                                     /* 1000 ms   PB01*/
                                   bin fixed (31),   /* Message Len   */
                                   pointer,          /* Message Ptr   */
                                   bin fixed (31));  /* Message Len   */
 /*------------------------------------------------------------------*/
 /*- Ende Copybook YIDMQPT                                          -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YIDMQGT */
                  ;                          /* MQ GET                */
  /* BEGIN %INCLUDE YIDMQPT */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   06. May. 2010   17:22   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YIDMQPT - MQ PUT Operation                      @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 21-Apr-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
 dcl  YIDMQPT      External entry (pointer,          /* Comm Area     */
                                   char (24),        /* Corelation ID */
                                   bin fixed (31),   /* Put Options   */
                                   bin fixed (31),   /* Priority      */
                                   bin fixed (31),   /* Message Len   */
                                   pointer);         /* Message Ptr   */
 /*------------------------------------------------------------------*/
 /*- Ende Copybook YIDMQPT                                          -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YIDMQPT */
                  ;                          /* MQ PUT                */
  /* BEGIN %INCLUDE YIDMQCM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YIDMQCM - MQ Commit Module                      @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 21-Apr-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/

 dcl YIDMQCM       External Entry (pointer);        /* Comm Area     */

 /*------------------------------------------------------------------*/
 /*- Ende Copybook YIDMQDC                                          -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YIDMQCM */
                  ;                          /* MQ COMMIT             */
  /* BEGIN %INCLUDE YIDMQCL */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YIDMQCL - Close MQ Connection                   @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 21-Apr-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/

 dcl YIDMQCL       External Entry (pointer);        /* Comm Area     */

 /*------------------------------------------------------------------*/
 /*- Ende Copybook YIDMQCL                                          -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YIDMQCL */
                  ;                          /* MQ CLOSE              */
  /* BEGIN %INCLUDE YIDMQDC */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YIDMQDC - MQ Disconnect Module                  @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 21-Apr-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/

 dcl YIDMQDC       External Entry (pointer);        /* Comm Area     */

 /*------------------------------------------------------------------*/
 /*- Ende Copybook YIDMQDC                                          -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YIDMQDC */
                  ;                          /* MQ DISCONNECT         */
  /* BEGIN %INCLUDE YIDMQIQ */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   26. May. 2010   12:39   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YIDMQIQ - MQ Inquire Operation                  @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 21-Apr-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/

 dcl YIDMQIQ       External Entry (pointer,         /* Comm Area     */
                                   bin fixed(31),   /* Inquire Opt   */
                                   pointer,         /* Int IO Area   */
                                   pointer,         /* Char IO Area  */
                                   bin fixed(31));  /* Char IO Len   */

 /*------------------------------------------------------------------*/
 /*- Ende Copybook YIDMQOP                                          -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YIDMQIQ */
                  ;                          /* MQ INQUIRE            */

 /*------------------------------------------------------------------*/
 /*- Ende Copybook YIDMQ                                            -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YIDMQ */
 ;
 dcl 1 MQSignReqCommArea,
  /* BEGIN %INCLUDE IDMQCOMM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : IDMQCOMM - EOS Handler MQ Modules Comm Area     @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 05-May-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
    2   $Trace                bit(01),
    2   $QueueManager         char(48),
    2   $QueueName            char(48),
    2   $HandleConnection     bin fixed(31),
    2   $HandleObject         bin fixed(31),
    2   $CompCode             bin fixed(31),
    2   $Reason               bin fixed(31);
  /*   END %INCLUDE IDMQCOMM */
 ;

 /*-------------------------------------------------------------------*/
 /* Common Variables                                                  */
 /*-------------------------------------------------------------------*/
 dcl DB2_Current_Timestamp  char(26)       init ('');
 dcl DB2_Current_Date       char(10)       init ('');
 dcl PL1_Current_Date       char(08)       init ('');

 /*-------------------------------------------------------------------*/
 /* IMS Includes                                                      */
 /*-------------------------------------------------------------------*/
 dcl PLITDLI                entry;
 dcl ltm                    ptr;
  /* BEGIN %INCLUDE TPPCB */
 /*********************************************************************/
 /* DATENKOMMUNIKATIONS - PCB                     MEMBERNAME: TPPCB   */
 /* IMS I/O PCB MASK                                                  */
 /* -> IMS/ESA APPLICATION PROGRAMMING: TRANSACTIN MANAGER            */
 /*                                                                   */
 /* DNDERUNGEN                                                        */
 /* 20.03.01  LIN-/APPL-/INFO-BITS ELIMINIERT -> ERSETZT DURCH SEQNR  */
 /*           ERGDNZT MIT UTC TIME STAMP                              */
 /*           ROGER MAYER, CIAF 31                          ROM032001 */
 /*********************************************************************/
 DCL 1 TPPCB  BASED (LTM),
       2 TERM       CHAR      (08),  /* TERMIAL-NAME                  */
       2 TPRES      BIT       (16),  /* RESERVED FOR IMS              */
       2 TPSTC      CHAR      (02),  /* STATUS CODE                   */
       2 MTIME,                      /* LOCAL MESSAGE RECEIVE TIME    */
       3 DAT        FIXED     (07),  /* DATE    YYYYDDD               */
       3 TIM        FIXED     (07,1),/* TIME    HHMMSS.T              */
       2 SEQNR      BIN FIXED (31),  /* INPUT MESSAGE SEQUENCE NR.    */
       2 MOD1       CHAR      (08),  /* NEXT MOD NAME                 */
       2 USERIDT    CHAR      (08),  /* USER IDENTIFICATION, USERID   */
       2 GRPNAME    CHAR      (08),  /* GROUP NAME                    */
       2 UTC_TIME,                   /* 12-BYTE TIME STAMP (UTC)      */
         3 UTC_DAT  FIXED     (07),  /* DATE    YYYYDDD               */
         3 UTC_TIM  CHAR      (06),  /* TIME    4HHMMSSTHMIJU4X       */
         3 UTC_OFF  CHAR      (02),  /* OFFSET  AQQ$ : 04 = 4X15MIN   */
                                     /* +/- 004 = UTC, 104 = LOCAL    */
                                     /* +004=WINTER- +008=SOMMER-ZEIT */
       FCLTM        CHAR      (04),  /*                               */
       CTLTM        BIN FIXED (31),  /*                               */
       $LTM         PTR;             /*                               */
       LTM = $LTM;                   /*                               */
  /*   END %INCLUDE TPPCB */
 ;

 /*-------------------------------------------------------------------*/
 /* IMS Commands                                                      */
 /*-------------------------------------------------------------------*/
 dcl xrst                   char(4)        static init ('XRST');
 dcl chkp                   char(4)        static init ('CHKP');
 dcl ct6                    bin(31,0)      static init (6);

 /*-------------------------------------------------------------------*/
 /* IMS Chkp Xrst Variables                                           */
 /*-------------------------------------------------------------------*/
 dcl ChkpFreq               bin fixed(31)  init(0);

 dcl 1 ChkpHeaderArea,
       2 JobName            char(06)       init(''),
       2 SeqNum             pic '(2)9'     init(0);

 dcl 1 XrstHeaderArea,
       2 JobName            char(06)       init(''),
       2 SeqNum             pic '(2)9'     init(0);

 dcl ChkpHeaderAreaLen      bin fixed(31)  init
                                           (cstg(ChkpHeaderArea));
 dcl XrstHeaderAreaLen      bin fixed(31)  init
                                           (cstg(XrstHeaderArea));
 dcl ChkpXrstUserAreaLen    bin fixed(31)  init
                                           (cstg(ChkpXrstUserArea));

 dcl PXrstHeaderAreaLen     ptr            init
                                          (addr(XrstHeaderAreaLen));
 dcl PXrstHeaderArea        ptr            init
                                           (addr(XrstHeaderArea));
 dcl PChkpHeaderAreaLen     ptr            init
                                          (addr(ChkpHeaderAreaLen));
 dcl PChkpHeaderArea        ptr            init
                                           (addr(ChkpHeaderArea));
 dcl PChkpXrstUserAreaLen   ptr            init
                                           (addr(ChkpXrstUserAreaLen));
 dcl PChkpXrstUserArea      ptr            init
                                           (addr(ChkpXrstUserArea));
 /*-------------------------------------------------------------------*/
 /* SQLCA                                                             */
 /*-------------------------------------------------------------------*/
 EXEC SQL
   INCLUDE SQLCA;

 /*===================================================================*/
 /*  YXCETRC                                                          */
 /*===================================================================*/
 InitiateProgram: Proc($PgmDesc);
    dcl $PgmDesc                char(90)       varying;

    /*---------------------------------------------------------------*/
    /*  Compile DateTime                                             */
    /*---------------------------------------------------------------*/
    dcl @CompileTS              char(20)  static init(202005141429340);

    @CompileTS  = trim(@CompileTS);

    /*---------------------------------------------------------------*/
    /*  Program Information                                          */
    /*---------------------------------------------------------------*/
    call LogTrace('1'b,'####',(90)' ');
    call LogTrace('1'b,'####',(90)'*');
    call LogTrace('1'b,'####','Program Name        : ' !! @PgmName);
    call LogTrace('1'b,'####','Program Description : ' !! $PgmDesc);
    call LogTrace('1'b,'####','Last Compiled       : ' !! @CompileTS);
    call LogTrace('1'b,'####','Run Time            : ' !! datetime());
    call LogTrace('1'b,'####',(90)'*');
    call LogTrace('1'b,'####',(90)' ');

    /*---------------------------------------------------------------*/
    /*  Y Y C N T R L - removed: must be included after parm decl.   */
    /*---------------------------------------------------------------*/
    If $@parm8 = "Y" ! $@parm8 = "J"
    then @Trace = @True;

    ChkpFreq = bin($@parm6);

    /*---------------------------------------------------------------*/
    /*  DB2 Current Date and Timestamp                               */
    /*---------------------------------------------------------------*/
    DB2_Current_Timestamp = TIMESTAMP();
    DB2_Current_Date      = repattern(DB2_Current_Timestamp
                                     ,'DD.MM.YYYY'
                                     ,'YYYY-MM-DD-HH.MI.SS.999999');
    PL1_Current_Date      = repattern(DB2_Current_Timestamp
                                     ,'YYYYMMDD'
                                     ,'YYYY-MM-DD-HH.MI.SS.999999');
 End InitiateProgram;

 /*-------------------------------------------------------------------*/
 /*  YXCETRC                                                          */
 /*-------------------------------------------------------------------*/
 PerformIMSChkpOperation: Proc($force);
    dcl $Force                  bit(1)         aligned;

    call LogTrace(@Dflt,'Proc','PerformIMSChkpOperation');
    ChkpXrstUserArea.RecCnt = ChkpXrstUserArea.RecCnt + 1;
    If $@parm7 = "Y"
    then do;
       If MOD(ChkpXrstUserArea.RecCnt,ChkpFreq) = 0 ! $Force
       then do;
          ChkpHeaderArea.JobName   = @PgmName;
          If ChkpHeaderArea.SeqNum >= 99
          then ChkpHeaderArea.SeqNum = 1;
          else ChkpHeaderArea.SeqNum = ChkpHeaderArea.SeqNum + 1;

          call PLITDLI(ct6,chkp,ltm,
                       PChkpHeaderAreaLen,
                       PChkpHeaderArea,
                       PChkpXrstUserAreaLen,
                       PChkpXrstUserArea);

          If ltm-> tpstc = ' '
          then do;
             call LogTrace(@Force,'I#01','IMS CHKP# ' !!
                                              ChkpHeaderArea.JobName !!
                                             '-' !!
                                              ChkpHeaderArea.SeqNum!!
                                             ' => REC# ' !!
                                              ChkpXrstUserArea.RecCnt);
          end;
          else do;
             call LogTrace(@Force,'####',(90)' ');
             call LogTrace(@Force,'####',(90)'*');
             call LogTrace(@Force,'####','CHKP FAILIURE');
             call LogTrace(@Force,'####',(90)'*');
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
             call LogTrace(@Force,'####',(90)'*');
             call HandleException('#E99','IMS_CHKP',
                                         'Unable to perform IMS CHKP,'!!
                                         'STC:'!!ltm-> tpstc);
          end;
          end;
       end;
 End PerformIMSChkpOperation;

 /*-------------------------------------------------------------------*/
 /*  YXCETRC                                                          */
 /*-------------------------------------------------------------------*/
 CheckIMSXrstOperation: Proc   returns(bit(01));
    call LogTrace(@Dflt,'Proc','PerformIMSXrstOperation');
    If $@parm7 = "Y" ! $@parm7 = "J" then
       do;
       XrstHeaderArea     = '';
       ChkpXrstUserArea   = '';

       call PLITDLI(ct6,xrst,ltm,
                    PXrstHeaderAreaLen,
                    PXrstHeaderArea,
                    PChkpXrstUserAreaLen,
                    PChkpXrstUserArea);

       If ltm-> tpstc = ' ' then
          do;
          call LogTrace(@Force,'I#02','IMS XRST Operation ' !!
                                          ' => ' !! 'STC:'!!ltm->tpstc);
          call LogTrace(@Force,'####',(90)' ');
          call LogTrace(@Force,'####',(90)'*');
          call LogTrace(@Force,'####','XRST Variables');
          call LogTrace(@Force,'####',(90)'*');
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
          call LogTrace(@Force,'####',(90)'*');

          If XrstHeaderArea.JobName = '' then
             return (@False);
          else
             return (@True);
          end;
       else
          do;
          call LogTrace(@Force,'####',(90)' ');
          call LogTrace(@Force,'####',(90)'*');
          call LogTrace(@Force,'####','XRST FAILIURE');
          call LogTrace(@Force,'####',(90)'*');
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
          call LogTrace(@Force,'####',(90)'*');
          call HandleException('#E99','IMS_XRST',
                                      'Unable to perform IMS XRST,'!!
                                      'STC:'!!ltm-> tpstc);
          end;
       end;
    else
       call LogTrace(@Dflt,'Info','ECR Flag is OFF in PARM');
    return (@False);
 End CheckIMSXrstOperation;

  /*   END %INCLUDE YXCETRC */
 ;
  /* BEGIN %INCLUDE YXRE004R */
 /********************************************************************/
 /*@ Creator: Cognizant Tech Sol  Date   : 08.02.2008       Ver:   1 @*/
 /*@ Instr  :                     Member : YXRE004R         Rel:   1 @*/
 /*@ Project: N1579 eRET Reengineering                               @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Purpose: Common include copybook for YXREnnL.PLU module. It     @*/
 /*@ includes the various constants which will be used in DR.        @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Prerequ: PL1 V  R  , DB2 V  R  , IMS  V  R ETC.                 @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Arka Sarkar       Revdate: 14.08.2010         Rev: 0001@*/
 /*@ Instr  : Cognizant                                              @*/
 /*@ Reason : Added new document content types for                   @*/
 /*@          1. Header Record                                       @*/
 /*@          2. Document Address Record                             @*/
 /*@          3. Channel Address Record                              @*/
 /*@          4. Index Record                                        @*/
 /*@          5. Trailer Record                                      @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Avik Kumar Biswas    Revdate: 18.10.2011    Rev: AKB01 @*/
 /*@ Instr  : Cognizant                                              @*/
 /*@ Reason : N3970 eRET Bulkmail Solution Changes                   @*/
 /*@          -------------------------------------                  @*/
 /*@          Addition of constants for supplement state in TXR124A1 @*/
 /*@          (XR124_SUP_STATE)                                      @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Tamal Kar             Revdate: 09.11.2012    Rev: TK01 @*/
 /*@ Instr  : Cognizant                                              @*/
 /*@ Reason : N3971_RETMM_Enhancements                               @*/
 /*@          -------------------------------------                  @*/
 /*@          Addition of constants for print range in TXR103A1      @*/
 /*@          (XR103_PRINT_RANGE)                                    @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Abhishek Raman        Revdate: 15.03.2013    Rev: AR05 @*/
 /*@          Tamal Kar             Revdate: 15.03.2013    Rev: TK01 @*/
 /*@          Dipayan Sardar        Revdate: 15.03.2013    Rev: DS01 @*/
 /*@          Nidhi Palsule         Revdate: 20.03.2013    Rev: NP01 @*/
 /*@ Swan XP: 141764                                                 @*/
 /*@ Reason :                                                        @*/
 /*@   -  New Doc Group defined for FOMS documents.                  @*/
 /*@   -  New Order Destination for FOMS.                            @*/
 /*@   -  New Order Type defined for FOMS.                           @*/
 /*@   -  New Printer Printing Styles definitive values.             @*/
 /*@   -  New CIF Account Mapping status for SwissCard docuents.     @*/
 /*@   -  New Document Status for SwissCard documents.               @*/
 /*@   -  New Incident Codes for SwissCard documents updates.        @*/
 /*@   -  New AGP tags defined for Begin/End document and            @*/
 /*@      Begin/End Named Page Group                                 @*/
 /*@   -  New Job type defined for Periodic FOMS Order               @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Tamal Kar             Revdate: 21.05.2013    Rev: TK02 @*/
 /*@ Swan XP:                                                        @*/
 /*@ Reason :                                                        @*/
 /*@   -  New document states for SwissCard documents - 80/81/82     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Dipayan Sardar        Revdate: 06.02.2014    Rev: DS02 @*/
 /*@ Swan XP: 0158368                                                @*/
 /*@ Reason :                                                        @*/
 /*@   -  New values for field (XR100_IS_RETMM) in TXR100A1          @*/
 /*@   -  Old values are redefined as constant instead of hard coded @*/
 /*@      in main modules                                            @*/
 /*@-----------------------------------------------------------------@*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Abhishek Raman        Revdate: 22.03.2014    Rev: AR01 @*/
 /*@ Swan XP: 159284                                                 @*/
 /*@ Reason :                                                        @*/
 /*@   -  Add constant for default bankstale                         @*/
 /*@-----------------------------------------------------------------@*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Vineet Agarwah        Revdate: 30.01.2015    Rev: VA01 @*/
 /*@ Release: RLSE000200135                                          @*/
 /*@ Reason :                                                        @*/
 /*@   -  Add constant for notificationto LM for ADHOC RET           @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Pronabananda Basu     Revdate: 31-May-2016   Rev: PB01 @*/
 /*@ Release: RLSE000000000                                          @*/
 /*@ Reason :                                                        @*/
 /*@   -  Add Process Keys for Doc Converter                         @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Aritri Saha           Revdate: 01-Dec-2016   Rev: AS01 @*/
 /*@ Release: RLSE000209705                                     PB02 @*/
 /*@ Reason :                                                        @*/
 /*@   -  Add Job Type for Automatic Dispatch                        @*/
 /*@   -  Add incident codes of AD order for push back and reprint   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Rammyani Mitra        Revdate: 01-Dec-2016   Rev: RM03 @*/
 /*@ Release: RLSE000210087                                     RM03 @*/
 /*@ Reason :                                                        @*/
 /*@   -  Add Job Type for Automatic Dispatch for RET 27             @*/
 /*@   -  Add New Kuhat (P and Q) for RET 27                         @*/
 /*@   -  Add Online Acceptance Status Defination(A,C,I,N,U)         @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Rammyani Mitra        Revdate: 26-May-2017   Rev: RM04 @*/
 /*@ Release: RLSE000211847                                     RM04 @*/
 /*@ Reason :                                                        @*/
 /*@   -  Update value of ORDER_TYP_RET27_AD to '81'                 @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Rammyani Mitra        Revdate: 26-May-2017   Rev: RM05 @*/
 /*@ Release: RLSE000211578                                          @*/
 /*@ Reason :                                                        @*/
 /*@   -  Add New Variables for AD Type                              @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: PraveenKumar V V      Revdate: 01-Aug-2017   Rev: PK01 @*/
 /*@ Release: RLSE000212758                                          @*/
 /*@ Reason :                                                        @*/
 /*@   -  Add New Variables                                          @*/
 /*@   -  INCIDENT_DOC_SC_RJCT_CIF_NOTEXIST  to '83'                 @*/
 /*@   -  INCIDENT_DOC_SC_RJCT_DOSR_NOTEXIST to '84'                 @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Aritri Saha           Revdate: 20-Sept-2018  Rev: AS02 @*/
 /*@ Release: RLSE000216793                                          @*/
 /*@ Reason :                                                        @*/
 /*@   - Remove variables related to EOMS processing                 @*/
 /*@   - Remove variables for eforms XR14 and XR15                   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Renuka Prasad G K     Revdate: 11-Feb-2019   Rev: RP01 @*/
 /*@ Release: RLSE000218631                                          @*/
 /*@ Reason :                                                        @*/
 /*@   - Added new Variable DBOX_DOC_FORMAT_AFP ,DBOX_DOC_FORMAT_LNE @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Raymond Stofer        Revdate: 15-Mar-2019   Rev: RS01 @*/
 /*@ Release: RLSE000218631                                          @*/
 /*@ Reason :                                                        @*/
 /*@   - outdated definitions removed                                @*/
 /*@   - Definitions for Placeholders added                          @*/
 /*@   - Definitions for scanning process key PDF->AFP added   DS03  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor: Renuka Prasad G K     Revdate: 19-Jun-2019   Rev: RP02 @*/
 /*@ Release: RLSE000219591                                          @*/
 /*@ Reason :                                                        @*/
 /*@   - Added new definition of Enriched FOMS document group        @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Revisor       : Debalina Sarkar             Tag  : DS01         @*/
 /*@ Release Number: RLSE000220936               Date : 12.11.2019   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@    -Remove FOMS processing related all variables.               @*/
 /*@-----------------------------------------------------------------@*/
 /*@=================================================================@*/
 /*   PERIODIC MAIL PRINTING STATUSCODE                               */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   PRINT SORT ORDER                                                */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   FEEDBACK SEARCH (EVE SEARCH WITH FEEDBACK)                      */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   PRINTER STATUS                                                  */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   PERIODIC PRINT JOB DEFINITION STATUS                            */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   DOCUMENT FORMATS                                                */
 /*-------------------------------------------------------------------*/
                                                              /* VA02 */
                                                              /* 0001 */
                                                              /* 0001 */
                                                              /* 0001 */
                                                              /* 0001 */
                                                              /* 0001 */

                                                              /* VA02 */
                                                              /* 0001 */
                                                              /* 0001 */
                                                              /* 0001 */
                                                              /* 0001 */
                                                              /* 0001 */

 /*-------------------------------------------------------------------*/
 /*   HANDOVER TYPE                                                   */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   DOCUMENT RANGE                                                  */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Constants for Dossier table TXR100A1                              */
 /*-------------------------------------------------------------------*/
 /*-------------------------------------------------------------------*/
 /* XR100_DOSR_STATUS - Dossier status                                */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* XR100_CIF_STATUS - CIF status                                     */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Constants for Document metadata table TXR101A1                    */
 /*-------------------------------------------------------------------*/
 /*-------------------------------------------------------------------*/
 /* XR101_DOC_GROUP - Document group                                  */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* XR101_DOC_STATUS - Doc status                                DS01 */
 /*-------------------------------------------------------------------*/
                                                                /*TK01*/
                                                                /*TK01*/
                                                                /*TK01*/
                                                                /*TK01*/
                                                                /*TK01*/
                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*TK01*/
                                                                /*TK01*/
                                                                /*TK01*/
                                                                /*TK01*/
                                                                /*TK01*/
                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*TK02*/

 /*-------------------------------------------------------------------*/
 /* Constants for default timestamp and default date                  */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Constants for Order status                                        */
 /*-------------------------------------------------------------------*/
 /*-------------------------------------------------------------------*/
 /* Constants for Order types                                         */
 /*-------------------------------------------------------------------*/
                                                                /*AR05*/
                                                                /*RM02*/
                                                                /*RM03*/
                                                                /*AR05*/
                                                                /*RM02*/
                                                                /*RM04*/
 /*-------------------------------------------------------------------*/
 /* Constants for Business Object Types                               */
 /*-------------------------------------------------------------------*/
                                                                /*RM02*/

                                                                /*RM02*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR BUSINESS INCIDENT CODES                         DS01*/
 /*-------------------------------------------------------------------*/
                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*PK01*/
                                                                /*PK01*/
                                                                /*PK01*/
                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*PK01*/
                                                                /*TK02*/
                                                                /*VA01*/
                                                                /*RM02*/
                                                                /*RM02*/
                                                                /*RM02*/
                                                                /*AS01*/
                                                                /*PB02*/
                                                                /*PB02*/
                                                                /*PB02*/
                                                                /*PB02*/
                                                                /*PB02*/
                                                                /*RM02*/
                                                                /*RM02*/
                                                                /*AS01*/
                                                                /*RM03*/
                                                                /*RM03*/

                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*PK01*/
                                                                /*PK01*/
                                                                /*PK01*/
                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*TK02*/
                                                                /*PK01*/
                                                                /*PK01*/
                                                                /*VA01*/
                                                                /*RM02*/
                                                                /*RM02*/
                                                                /*RM02*/
                                                                /*AS01*/
                                                                /*PB02*/
                                                                /*PB02*/
                                                                /*PB02*/
                                                                /*PB02*/
                                                                /*PB02*/
                                                                /*RM02*/
                                                                /*RM02*/
                                                                /*AS01*/
                                                                /*RM03*/
                                                                /*RM03*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR DEFINITION STATUS CODES                             */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR DIFFERENT CARD TYPES BELONGING TO PHYSICAL STORAGE  */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR DIFFERENT STATUS OF EVE IN TXR105A1 TABLE           */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR EVE CLOSING REASON CODES                            */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR DUNNING (MAHNUNG) PERIODICITY FOR EVE               */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR CLIENT TYPE                                         */
 /*-------------------------------------------------------------------*/
 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR CONVERSION STATUS IN TXR114A1                       */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR PRINT OPTION IN TXR103A1                            */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR PRINT MODE IN TXR103A1                              */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR JOB STATUS IN TXR116A1                              */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR SPLIT STATUS IN TXR111A1                            */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR JOB_TYPE IN TXR116A1                                */
 /*-------------------------------------------------------------------*/
                               /*AS01*/

                            /*AS01*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR SUPPLEMENT DOCUMENT STATE IN TXR124A1       AKB01   */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR RET INTERNAL DOCUMENTS USED IN PRINTING         AC10*/
 /*-------------------------------------------------------------------*/
                                                                /*AR07*/
                                                                /*AR07*/
                                                                /*AR05*/
                                                                /*AR07*/
                                                                /*AR07*/
                                                                /*AR05*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR XR100_LANG_CDE                                  AC10*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR XR103_Del_Option                                AR02*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR Printer Address Type                            AR02*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR XR103_PRINT_RANGE (MAX PRINT RANGE)             TK01*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* CONSTANTS FOR Delivery Destination Mode                       AR02*/
 /*-------------------------------------------------------------------*/
                                                                /*TK01*/


 /*-------------------------------------------------------------------*/
 /* AFP Tags Declaration                                          AC02*/
 /*-------------------------------------------------------------------*/
                                                          /*NP01 Start*/
                                                          /*NP01 End  */


 /*-------------------------------------------------------------------*/
 /* Logo code declaration                                         AR03*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Printing Style                                                AR05*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Mapping Table Status                                          DS01*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Kuhat information                                             DS02*/
 /*-------------------------------------------------------------------*/
                                                                /*RM03*/
                                                                /*RM03*/

                                                                /*RM03*/
                                                                /*RM03*/

 /*-------------------------------------------------------------------*/
 /* Bankstale constant                                            AR01*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Program Name constant                                         DS02*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Process Keys for Doc Converter                                PB01*/
 /*-------------------------------------------------------------------*/
                                                                /*DS03*/


 /*-------------------------------------------------------------------*/
 /* Priorities   for Doc Converter                                VA01*/
 /*-------------------------------------------------------------------*/
                                                                /*DS03*/

                                                                /*DS03*/

 /*-------------------------------------------------------------------*/
 /* Operating Mode Defination for XR5370                          RM01*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Online Acceptance Status Defination                           RM03*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Automatic Dispatch Type (AD Type)                             RM05*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* DBOX Document Formats                                         RP01*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  e-Form XR18 Constants                                            */
 /*-------------------------------------------------------------------*/

  /*   END %INCLUDE YXRE004R */
 ;         /* Preprocessor Declare                 */
  /* BEGIN %INCLUDE YXCPCOM */
 /********************************************************************/
 /*@=================================================================@*/
 /*@ Program       : YXCPCOM - Dbox common copybook for constants    @*/
 /*@ Application   : DBox                                            @*/
 /*@ Swan XP CR    : 155241                                          @*/
 /*@ Author        : Abhishek Raman                                  @*/
 /*@ Creation Date : 08-Nov-2013                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@   -  Common include copybook for EOS/eRET module.It include     @*/
 /*@ the various constants which will be used in DBOX migration      @*/
 /*@=================================================================@*/
 /*@ Revisor       : Amit Chaudhary              Tag  : AC01         @*/
 /*@ Swan XP CR    : 0158373                     Date                @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new pre-processor variables                     @*/
 /*@=================================================================@*/
 /*@ Revisor       : VINEET AGARWAL              Tag  : VA01         @*/
 /*@ Swan XP CR    : RLSE000201375               Date : 28-MAY-2015  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new create trigger definati                     @*/
 /*@=================================================================@*/
 /*@ Revisor       : Aritri Saha                 Tag  : AS01         @*/
 /*@ Swan XP CR    : RLSE000201375               Date : 28-MAY-2015  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new variable for Delete Action-ID of TXC102A1   @*/
 /*@=================================================================@*/
 /*@ Revisor       : Vineet Agarwal              Tag  : VA02         @*/
 /*@ Swan XP CR    : RLSE000202932               Date : 15-SEP-2015  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new pre-processor variables                     @*/
 /*@=================================================================@*/
 /*@ Revisor       : Nicole Mellini              Tag  : ME01         @*/
 /*@ Swan XP CR    : RLSE000204893               Date : 05-JAN-2016  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new tables TXC520A1, TXC521A1, TXC522A1         @*/
 /*@=================================================================@*/
 /*@ Revisor       : Pronabananda Basu           Tag  : PB01         @*/
 /*@ Swan XP CR    : RLSE000204901               Date : 29-Feb-2016  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new Action ID L98 for Document Delete in DBOX   @*/
 /*@   -     Include new Action ID C17 for Document Unopen Action    @*/
 /*@   -     Rename Variables for C12, C15, C16 and C18 action IDs   @*/
 /*@         as per the copybook YXCE004R                            @*/
 /*@   -     Add action types for RM Ecosystem notifications         @*/
 /*@=================================================================@*/
 /*@ Revisor       : Aritri Saha                 Tag  : AS02         @*/
 /*@ Swan XP CR    : RLSE000204901               Date : 16-MAR-2015  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new variable for Delete Action-ID of TXC105A1   @*/
 /*@=================================================================@*/
 /*@ Revisor       : Vineet Agarwal              Tag  : VA03         @*/
 /*@ Swan XP CR    : RLSE000200135               Date : 23.06.2016   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new pre-processor variables                     @*/
 /*@=================================================================@*/
 /*@ Revisor       : Pronabananda Basu           Tag  : PB02         @*/
 /*@ Release       : RLSE000204901               Date : 16.08.2016   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -  new action_id for blocking document                        @*/
 /*@=================================================================@*/
 /*@ Revisor       : Nicole Mellini              Tag  : ME02         @*/
 /*@ Swan XP CR    : RLSE000207238               Date : 30-AUG-2016  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new tables TXC523A1, TXC524A1, TXC525A1         @*/
 /*@=================================================================@*/
 /*@ Revisor       : Stofer Raymond              Tag  : RS01         @*/
 /*@ Swan XP CR    : RLSE000208886               Date : 22-Nov-2016  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include variable Encl Load Action on TXC105A1 table     @*/
 /*@=================================================================@*/
 /*@ Revisor       : Subhodeep Majumder          Tag  : SM01         @*/
 /*@ Swan XP CR    : RLSE000209623               Date : 10.02.2016   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new pre-processor variables                     @*/
 /*@=================================================================@*/
 /*@ Revisor       : Shruti Arya                 Tag  : SA02         @*/
 /*@ Swan XP CR    : RLSE000209974               Date : 17.03.2016   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new pre-processor variables                     @*/
 /*@=================================================================@*/
 /*@ Revisor       : Dipayan Sardar              Tag  : DS01 , RP01  @*/
 /*@ Swan XP CR    : RLSE000210130               Date : 14.02.2017   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new pre-processor variables for BOX, EMH        @*/
 /*@=================================================================@*/
 /*@ Revisor       : Renuka Prasad G K           Tag  : RP02         @*/
 /*@ Swan XP CR    : RLSE000211474               Date : 31.05.2017   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new pre-processor variables for POV             @*/
 /*@   -     Added new Pre Processor variable for process key of     @*/
 /*@         Mixed Format in case of POV channel                     @*/
 /*@=================================================================@*/
 /*@ Revisor       : Stofer Raymond              Tag  : RS02         @*/
 /*@ Swan XP CR    : RLSE000212826               Date : 15.08.2017   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     remove OCF Postscript Process-Key, no more used         @*/
 /*@   -     remove POV Process key POV-A and POV-L as it is no more @*/
 /*@         used                                              RP03  @*/
 /*@   -     remove POV priorities @PRIO_AFPTOPDF_POV and            @*/
 /*@         @PRIO_LINETOPDF_POV. New Priority is added for POV      @*/
 /*@         @PRIO_MIXEDFMTTOPDF_POV                           RP03  @*/
 /*@=================================================================@*/
 /*@ Revisor       : Rammyani Mitra              Tag  : RM01 SG01    @*/
 /*@                                                    AS03 DS02    @*/
 /*@                                                    RP04         @*/
 /*@ Swan XP CR    : RLSE000212732               Date : 01.09.2017   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     added variable for Subscription sttaus                  @*/
 /*@         Subscription_Status_Active,Subscription_Status_Inactive,@*/
 /*@         Status_Subscribed,Status_Subscribed for POV Digi proj   @*/
 /*@   -     added variable @XC103_ACTIONID_MOTIVATION_LETTER        @*/
 /*@         for action ID,@MOTIVATION_LETTER_DOC_TYPE and           @*/
 /*@         @STATEMENT_OF_INTEREST_DOC_TYPE for doc type.           @*/
 /*@   -     Added new preprocessor variables for Action Ids in      @*/
 /*@         TXC105A1 and for Doc Group of Statement of Interest     @*/
 /*@         doc and Motivation letter doc.                          @*/
 /*@   -     Added variable for ActionId XC105_ACTIONID_DOC_PRINTED  @*/
 /*@   -     added variable @DOC_STATUS_PRINT_REQ                    @*/
 /*@   -     added variable @DOC_CATEGORY_SPLIT                      @*/
 /*@   -     format definitions                                      @*/
 /*@   -     added variable XC105_ACTIONID_DOC_EMAIL_NOTIFIED        @*/
 /*@   -     added variable XC102_ACTIONID_SEARCH_DOCUMENTS          @*/
 /*@=================================================================@*/
 /*@ Revisor       : Renuka Prasad G K           Tag  : RP05         @*/
 /*@ Swan XP CR    : RLSE000213745               Date : 16.11.2017   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Added New Action ID XC105_ACTIONID_POV_DOC_PRINTED for  @*/
 /*@         POV Documents printing                                  @*/
 /*@=================================================================@*/
 /*@ Revisor: Raymond Stofer    Revdate: 15.11.2017         Rev:RS03 @*/
 /*@ Release: RLSE000214948                                          @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -   prio for EMH changed                                      @*/
 /*@   -   new prio for dbox adhoc conversion                        @*/
 /*@=================================================================@*/
 /*@ Revisor: Nicole Mellini    Revdate: 13.08.2018         Rev:ME03 @*/
 /*@ Release: RLSE000216793                                          @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -   new action id for logging long running queries (TXC102A1) @*/
 /*@=================================================================@*/
 /*@ Revisor: Nicole Mellini    Revdate: 13.08.2018         Rev:ME04 @*/
 /*@ Release: RLSE000216793                                          @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -   new POV List Doc Group                                    @*/
 /*@=================================================================@*/
 /*@ Revisor: Nicole Mellini    Revdate: 26.03.2019         Rev:     @*/
 /*@ Release: RLSE000218631                                          @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -   Cosmetic changes                                          @*/
 /*@   -   Remove unused variable                                    @*/
 /*@=================================================================@*/
 /*@ Revisor: Debalina Sarkar                    Tag  : DS03         @*/
 /*@ Release: RLSE000219591                      Date : 18-06-2019   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -   Add format @DBOX_DOC_FORMAT_AFO                           @*/
 /*@=================================================================@*/
 /*@ Revisor: Aritri Saha                        Tag  : AS02         @*/
 /*@ Release: RLSE000220648                      Date : 15-11-2019   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -   Add PDFConv Priority @DBOX_PDF_CONV_REQUEST_PRIORITY_IMDT @*/
 /*@=================================================================@*/
 /*@ Revisor: Nicole Mellini                     Tag  : ME05         @*/
 /*@ Release: RLSE000220936                      Date : 16-12-2019   @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -   Add Action Id M99 which is used in TXC105A1 with REXX     @*/
 /*@       MOVEDOCB                                                  @*/
 /*@=================================================================@*/
 /*@ Revisor: Raymond Stofer                     Tag  : RS04         @*/
 /*@ Release: RFC5449845                         Date : 21-Jan-2020  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new table  TXC504A1                             @*/
 /*@=================================================================@*/
 /*@ Revisor: Abhishek Raman                     Tag  : AR01         @*/
 /*@ Release: RLSE000221304                      Date : 26-Mar-2020  @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@   -     Include new table  TXC505A1 & TXC506A1                  @*/
 /*********************************************************************/
 /*-------------------------------------------------------------------*/
 /*   DBOX CHANNELS                                                   */
 /*-------------------------------------------------------------------*/
                                                                /*RP02*/
                                                                /*DS01*/
                                                                /*VA03*/
                                                                /*VA03*/
                                                                /*VA03*/
                                                                /*SA01*/
                                                                /*RP02*/
                                                                /*DS01*/
                                                                /*VA03*/
                                                                /*VA03*/
                                                                /*VA03*/
                                                                /*SA01*/

 /*-------------------------------------------------------------------*/
 /*   DOCUMENT FORMAT FOR DBOX                                        */
 /*-------------------------------------------------------------------*/
                                                                /*DS03*/
                                                                /*DS03*/

 /*-------------------------------------------------------------------*/
 /*   ACTIVE DATA FOR TXC302A1                                        */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   TABLE NAME                                                      */
 /*-------------------------------------------------------------------*/
                                                                /*MR01*/
                                                                /*RS04*/
                                                                /*AR01*/
                                                                /*AR01*/
                                                                /*MR01*/
                                                                /*MR01*/
                                                                /*MR01*/

                                                                /*MR01*/
                                                                /*RS04*/
                                                                /*AR01*/
                                                                /*AR01*/
                                                                /*MR01*/
                                                                /*MR01*/
                                                                /*MR01*/

 /*-------------------------------------------------------------------*/
 /*   Partition Status                                                */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   DOCUMENT STATUS                                                 */
 /*-------------------------------------------------------------------*/
                                                                /*VA01*/
                                                                /*VA01*/
                                                                /*SG01*/

                                                                /*VA01*/
                                                                /*VA01*/
                                                                /*SG01*/

 /*-------------------------------------------------------------------*/
 /*   SUPPLEMENT STATUS (TXC409_SUP_STATUS)                           */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   SUPPLEMENT CATEGORY                                             */
 /*-------------------------------------------------------------------*/
                                                                /*SG01*/

                                                                /*SG01*/

 /*-------------------------------------------------------------------*/
 /*  CIF STATUS                                                       */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  RECIPIENT STATUS                                                 */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  Content Modes during retrieval                                   */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  Constants for Recipient Type                                     */
 /*-------------------------------------------------------------------*/
                                                                /*RP01*/
                                                                /*RP01*/
                                                                /*RP01*/
                                                                /*RP01*/
                                                                /*RP01*/
                                                                /*RP01*/

 /*-------------------------------------------------------------------*/
 /*  Global Constants                                                 */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  TXC102A1,TXC103A1,TXC104A1,TXC105A1 RUNSTART_TS                  */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  TXC102A1.XC102_ACTIONID Possible States                          */
 /*-------------------------------------------------------------------*/
                                                                /*RM01*/
                                                                /*VA01*/
                                                                /*AS01*/
                                                                /*RM01*/
                                                                /*RM01*/
                                                                /*ME03*/

                                                                /*RM01*/
                                                                /*VA01*/
                                                                /*AS01*/
                                                                /*RM01*/
                                                                /*RM01*/
                                                                /*ME03*/

 /*-------------------------------------------------------------------*/
 /*  EOS REPOSITORY BATCH LOGS AT CUSTOMER LEVEL (TXC103A1) possible  */
 /*  Action ID's                                                      */
 /*  TXC103A1.XC103_ACTIONID                                          */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  DocBox REPOSITORY ONLINE LOGS AT DOCUMENT LEVEL (TXC104A1)       */
 /*  possible Action ID's                                             */
 /*  TXC104A1.XC104_ACTIONID                                 MR01/PB01*/
 /*-------------------------------------------------------------------*/
                                                                /*AR03*/
                                                                /*AR03*/
                                                                /*PB02*/
                                                                /*SG01*/

                                                                /*SG01*/
                                                                /*PB02*/

 /*-------------------------------------------------------------------*/
 /*  EOS REPOSITORY BATCH LOGS AT DOCUMENT LEVEL (TXC105A1) possible  */
 /*  Action ID's                                                      */
 /*  TXC105A1.XC105_ACTIONID                                          */
 /*-------------------------------------------------------------------*/
                                                                /*RS01*/
                                                                /*RP04*/
                                                                /*PB01*/
                                                                /*AS02*/
                                                                /*AS03*/
                                                                /*AS03*/
                                                                /*SA03*/
                                                                /*RP05*/
                                                                /*ME05*/

                                                                /*AS02*/
                                                                /*RS01*/
                                                                /*RP04*/
                                                                /*PB01*/
                                                                /*SA03*/
                                                                /*AS03*/
                                                                /*AS03*/
                                                                /*RP05*/
                                                                /*ME05*/

 /*-------------------------------------------------------------------*/
 /* TXC126A1 - DBOX PDF CONVERSION REQUEST                       AC01 */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* TXC127A1 - DBOX DIGITAL SIGNATURE REQUEST                    AC01 */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*       TXC126A1 - Request Priority                                 */
 /*-------------------------------------------------------------------*/
                                                                /*RP01*/

                                                                /*AS02*/

                                                                /*VA01*/

 /*-------------------------------------------------------------------*/
 /*       TXC127A1 - Request Priority                                 */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*        DSS SIGNATURE PROCESSING MODE                              */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*        DSS SIGNATURE PROCESSING MODE                              */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   DOC TYPE                                                        */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  DBOX REPOSITORY DOC GROUP                                   AS03 */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  DBOX REPOSITORY DOC TYPE                                    DS02 */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  POV LIST DOC GROUP                                          ME04 */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  Constant for RET DBOX synchronization                       AR01 */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  Constant for language code                                 SDG01 */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*   Duplicate Document Processing Mode for SEC/BOX Import           */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*       TXC412A1 - Notify Type                                      */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*    PUSH Notification Event Type                                   */
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /* Process Keys for Doc Converter                                SA01*/
 /*-------------------------------------------------------------------*/
                                                                /*SA02*/
                                                                /*SA02*/
                                                                /*SA02*/
                                                                /*SA02*/
                                                                /*SM01*/
                                                                /*SM01*/
                                                                /*DS01*/
                                                                /*DS01*/
                                                                /*RP01*/
                                                                /*RP01*/
                                                                /*RP02*/

                                                                /*SA02*/
                                                                /*SA02*/
                                                                /*SA02*/
                                                                /*SA02*/

                                                                /*SM01*/
                                                                /*SM01*/

                                                                /*DS01*/
                                                                /*DS01*/

      /*RP01*/
      /*RP01*/

                                                                /*RP02*/

 /*-------------------------------------------------------------------*/
 /* Priorities   for Doc Converter                                SA01*/
 /*-------------------------------------------------------------------*/
                                                                /*SA02*/
                                                                /*SA02*/
                                                                /*SA02*/
                                                                /*SA02*/

                                                                /*SM01*/
                                                                /*SM01*/

                                                                /*DS01*/
                                                                /*DS01*/

                                                                /*RP01*/
                                                                /*RP01*/

                                                                /*RP03*/


                                                                /*SA02*/
                                                                /*SA02*/
                                                                /*SA02*/
                                                                /*SA02*/

                                                                /*SM01*/
                                                                /*SM01*/

                                                                /*DS01*/
                                                                /*DS01*/

                                                                /*RP01*/
                                                                /*RP01*/

                                                                /*RP03*/

 /*-------------------------------------------------------------------*/
 /*   Action Types for RM Ecosystem Notification XMLs             PB01*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*    Priority Groups Types                                      SA02*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*    Status Defination for Email Subscription Table TXC415A1    RM01*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*    Status Defination for UpdateEmail Subscription service     RM01*/
 /*-------------------------------------------------------------------*/

 /*-------------------------------------------------------------------*/
 /*  TXC102A1.XC102_RECIP_BUID - Default BUID Value               RM01*/
 /*-------------------------------------------------------------------*/
  /*   END %INCLUDE YXCPCOM */
 ;
  /* BEGIN %INCLUDE YXCCNFG */
 /********************************************************************/
 /*                                                                  */
 /*    LETZTE SOURCE-DNDERUNG:   11. MAI. 2011   10:01   G278011     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YXCCNFG - YXCCNFG Module Declaration            @*/
 /*@ Application   : RETMM Online                                    @*/
 /*@ Swan XP CR    : 155241                                          @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 20-Nov-2013                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@   -  Declaration of DBox Configuration Retriever                @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
 /*@ Revisor       : <Name>                      Tag  : <Tag>        @*/
 /*@ Swan XP CR    : <??????>                    Date : DD-MMM-YYYY  @*/
 /*@ Changes Description:                                            @*/
 /*@   -     enter your text here                                    @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
 dcl YXCCNFG            entry(char(01),ptr);
  /*   END %INCLUDE YXCCNFG */
 ;
 dcl  1 XCCNFG,
  /* BEGIN %INCLUDE XCCNFG */
 /********************************************************************/
 /*                                                                  */
 /*    LETZTE SOURCE-DNDERUNG:   20. NOV. 2013   13:23   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : XCCNFG - YXCCNFG Module Communication Structure @*/
 /*@ Application   : RETMM Online                                    @*/
 /*@ Swan XP CR    : 155241                                          @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 20-Nov-2013                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@   -  Communication Structure of DBox Configuration Retriever    @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
 /*@ Revisor       : <Name>                      Tag  : <Tag>        @*/
 /*@ Swan XP CR    : <??????>                    Date : DD-MMM-YYYY  @*/
 /*@ Changes Description:                                            @*/
 /*@   -     enter your text here                                    @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
  /* BEGIN %INCLUDE XC300A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:22   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR DB2 TABLE TXC300A1                            */
 /*********************************************************************/
      5 XC300_CHANNEL                CHAR(3),
      5 XC300_CONFIG_GROUP           CHAR(20),
      5 XC300_CONFIG_KEY             CHAR(20),
      5 XC300_CONFIG_SEQ             BIN FIXED(31),
      5 XC300_CONFIG_DATA            CHAR(100),
      5 XC300_UPDATE_ID              CHAR(8),
      5 XC300_UPDATE_TS              CHAR(26),
      5 XC300_REMARKS                CHAR(255)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 8          */
 /*********************************************************************/
  /*   END %INCLUDE XC300A1T */
                         ,               /* DB2 TXC300A1 structure    */
       5 TraceFlag   bit(01),            /* Trace Bit                 */
       5 RC          FIXED BIN(31),      /* Return Code               */
       5 Reason      CHAR(150)           /* Return Code Reason        */
  /*   END %INCLUDE XCCNFG */
 ;
 /*-------------------------------------------------------------------*/
  /* BEGIN %INCLUDE YXCWDOC */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   12. Nov. 2013   17:57   F243873     */
 /*                                                                  */
 /********************************************************************/
 /*@=================================================================@*/
 /*@ Program       : YXCWDOC - DBox Centralized Write Module Comm    @*/
 /*@                 Area Entry Declaration                          @*/
 /*@ Application   : DBox                                            @*/
 /*@ Swan XP CR    : 155241                                          @*/
 /*@ Author        : Dipayan Sardar                                  @*/
 /*@ Creation Date : 01-Nov-2013                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@   -  Header of Communication Structure of DBox Write Module     @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
 /*@ Revisor       : <Name>                      Tag  : <Tag>        @*/
 /*@ Swan XP CR    : <??????>                    Date : DD-MMM-YYYY  @*/
 /*@ Changes Description:                                            @*/
 /*@   -     enter your text here                                    @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
 dcl YXCWDOC entry(ptr) options(fetchable);      /* Entry declaration */
  /*   END %INCLUDE YXCWDOC */
                  ;                              /* DBox Write Module */
 Dcl 1 XCWDOC,
  /* BEGIN %INCLUDE XCWDOC */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   12. Nov. 2013   17:57   F243873     */
 /*                                                                  */
 /********************************************************************/
 /*@=================================================================@*/
 /*@ Program       : XCWDOC - DBox Centralized Write Module Comm Area@*/
 /*@ Application   : DBox                                            @*/
 /*@ Swan XP CR    : 155241                                          @*/
 /*@ Author        : Dipayan Sardar                                  @*/
 /*@ Creation Date : 01-Nov-2013                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@   -  Communication Structure of DBox Write Module               @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
 /*@ Revisor       : <Name>                      Tag  : <Tag>        @*/
 /*@ Swan XP CR    : <??????>                    Date : DD-MMM-YYYY  @*/
 /*@ Changes Description:                                            @*/
 /*@   -     enter your text here                                    @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
       3 HeaderParam,
         5 PgmName              char(08)       init(''),
         5 TraceFlag            bit(01)        init('0'b),
       3 InParam,
         5 OperationMode        char(01)       init(''),
         5 DocUUID              char(36)       init(''),
         5 DocFormat            char(03)       init(''),
         5 TableName            char(08)       init(''),
         5 PartNo               char(03)       init(''),
         5 ptrDocContent        ptr,
       3 ControlParam,
         5 DocContentLen        fixed bin(31)  init(0),
       3 OutParam,
         5 reasonCode           fixed bin(31)  init(0),
         5 reasonText           char(255)      init('')
  /*   END %INCLUDE XCWDOC */
 ;

 /*-------------------------------------------------------------------*/
  /* BEGIN %INCLUDE YXCEPHD */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   13. Nov. 2013   17:57   G119464     */
 /*                                                                  */
 /********************************************************************/
 /*@=================================================================@*/
 /*@ Program       : YXCEPHD - DBox Partitions Handler               @*/
 /*@ Application   : DBox                                            @*/
 /*@ Swan XP CR    : 155241                                          @*/
 /*@ Author        : Priyanka Ghosh                                  @*/
 /*@ Creation Date : 13-Nov-2013                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@   -  Communication Structure of DBox Partition Retrieval        @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
 /*@ Revisor       : <Name>                      Tag  : <Tag>        @*/
 /*@ Swan XP CR    : <??????>                    Date : DD-MMM-YYYY  @*/
 /*@ Changes Description:                                            @*/
 /*@   -     enter your text here                                    @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
 dcl YXCEPHD                 entry;    /* Entry declaration           */
  /*   END %INCLUDE YXCEPHD */
                                            /* DBox Partition Handler */
 Dcl 1 XCEPHD,
  /* BEGIN %INCLUDE XCEPHD */
  /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   27. Nov. 2013   19:48   F243873     */
 /*                                                                  */
 /********************************************************************/
 /*@=================================================================@*/
 /*@ Program       : XCEPHD - Partition Handler Comm Area            @*/
 /*@ Application   : DBox                                            @*/
 /*@ Swan XP CR    : 155241                                          @*/
 /*@ Author        : Priyanka Ghosh                                  @*/
 /*@ Creation Date : 01-Nov-2013                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@   -  Communication Structure of DBox Partition Handler          @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
 /*@ Revisor       : <Name>                      Tag  : <Tag>        @*/
 /*@ Swan XP CR    : <??????>                    Date : DD-MMM-YYYY  @*/
 /*@ Changes Description:                                            @*/
 /*@   -     enter your text here                                    @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
       3 HeaderParam,
         5 PgmName           char(08)       init(''),
         5 TraceFlag         bit(1)         init('0'b),
       3 InParam,
         5 OperationMode     char(01)       init(''),
         5 ModeRetrieve,
           7 DocFormat       char(03)       init(''),
         5 ModeUpdate,
           7 TableName       char(08)       init(''),
           7 PartNumber      char(03)       init(''),
           7 PartUsedSpace   fixed bin(31)  init(0),
       3 OutParam,
         5 ModeRetrieve,
           7 TableName       char(08)       init(''),
           7 PartNumber      char(03)       init(''),
         5 ReturnCode        fixed bin(31)  init(0),
         5 ReasonCode        char(50)       init('')
  /*   END %INCLUDE XCEPHD */
 ;

 /*-------------------------------------------------------------------*/
  /* BEGIN %INCLUDE YXCPARS */
 /*@=================================================================@*/
 /*@ Program       : YXCEPARS - Centralized MQ Message Parser and    @*/
 /*@                 Validator                                       @*/
 /*@ Application   : DBox                                            @*/
 /*@ Release       : RLSE000220293                                   @*/
 /*@ Author        : Aritri Saha                                     @*/
 /*@ Creation Date : 02-Aug-2019                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@   -  Header of Communication Structure of Centralized MQ        @*/
 /*@       Parser and Validator                                      @*/
 /*@=================================================================@*/
 /*@ Revisor       : <Name>                      Tag  : <Tag>        @*/
 /*@ Swan XP CR    : <??????>                    Date : DD-MMM-YYYY  @*/
 /*@ Changes Description:                                            @*/
 /*@   -     enter your text here                                    @*/
 /*@                                                                 @*/
 /*@=================================================================@*/
 dcl YXCPARS entry(ptr) options(fetchable);      /* Entry declaration */
  /*   END %INCLUDE YXCPARS */
                                         /* DBox Parser and Validator */
 Dcl 1 XCPARS,
  /* BEGIN %INCLUDE XCPARS */
 /*@=================================================================@*/
 /*@ Program       : XCPARS - Central Message Parser and Validator   @*/
 /*@ Application   : EOSR                                            @*/
 /*@ Release       : RLSE000220293                                   @*/
 /*@ Author        : Aritri Saha                                     @*/
 /*@ Creation Date : 02-Aug-2019                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@   -  Communication Structure of Centralized MQ Message Parser   @*/
 /*@      and Validator                                              @*/
 /*@=================================================================@*/
 /*@ Revisor       : <Name>                      Tag  : <Tag>        @*/
 /*@ Swan XP CR    : <??????>                    Date : DD-MMM-YYYY  @*/
 /*@ Changes Description:                                            @*/
 /*@   -     enter your text here                                    @*/
 /*@=================================================================@*/
       2 HeaderParam,
         3 PgmName              char(08)       init(''),
         3 TraceFlag            bit(01)        init('0'b),
       2 InParam,
         3 OperationMode        char(01)       init(''),
         3 ptrInputMQContent    ptr            init(null()),
         3 MQArrayCount         fixed bin(31)  init(0),
         3 MQMessageSize        fixed bin(31)  init(0),
       2 OutParam,
         3 ReturnCode           fixed bin(31)  init(0),
         3 ReturnText           char(255)      init(''),
         3 PrintDetails,
           4 ptrPrintMQDetails  ptr            init(null()),
           4 ListNum            char(04)       init(''),
           4 AFPContentCount    fixed bin(31)  init(0),
           4 PRTRecordCount     fixed bin(31)  init(0),
           4 PrintDocumentSize  fixed bin(31)  init(0),
         3 ELARDetails,
           4 ptrELARMQDetails   ptr            init(null()),
           4 ELARDocumentSize   fixed bin(31)  init(0),
         3 EnclosureData,
           4 TotalEnclCount     fixed bin(31)  init(0),
           4 ptrXC409A1Tdata1    ptr            init(null()),
           4 ptrXC409A1Tdata2    ptr            init(null()),
           4 ptrXC409A1Tdata3    ptr            init(null()),
           4 ptrXC409A1Tdata4    ptr            init(null()),
           4 ptrXC409A1Tdata5    ptr            init(null()),
           4 ptrXC409A1Tdata6    ptr            init(null()),
         3 StandaloneMetadata,
           4 ptrDboxStandaloneMetadata1    ptr            init(null()),
           4 ptrDboxStandaloneMetadata2    ptr            init(null()),
           4 ptrDboxStandaloneMetadata3    ptr            init(null()),
           4 ptrDboxStandaloneMetadata4    ptr            init(null()),
           4 ptrDboxStandaloneMetadata5    ptr            init(null()),
           4 ptrDboxStandaloneMetadata6    ptr            init(null()),
           4 ptrRETStandaloneMetadata1     ptr            init(null()),
           4 ptrRETStandaloneMetadata2     ptr            init(null()),
           4 ptrRETStandaloneMetadata3     ptr            init(null()),
           4 ptrRETStandaloneMetadata4     ptr            init(null()),
           4 ptrRETStandaloneMetadata5     ptr            init(null()),
           4 ptrRETStandaloneMetadata6     ptr            init(null()),
         3 DBoxDetails,
           4 ptrDBoxContent     ptr            init(null()),
           4 DBoxDocumentSize   fixed bin(31)  init(0),
           4 MaxIndexRecTagCnt  fixed bin(31)  init(0),
           4 IndexRecTagTbl(30),
             5 INDX_TAG               char(20)    var init(''),
             5 INDX_FIELD             char(32000) var init(''),
           4 ptrDboxMetadata    ptr            init(null()),
         3 RETDetails,
           4 ptrRETMetadata    ptr            init(null());
  /*   END %INCLUDE XCPARS */
 ;

  /* BEGIN %INCLUDE YXCACKL */
 /********************************************************************/
 /*@=================================================================@*/
 /*@ Program       : YXCACKL - Common copybook for Notification      @*/
 /*@ Application   : DBox                                            @*/
 /*@ Swan XP CR    : 218631                                          @*/
 /*@ Author        : Debalina Sarkar                                 @*/
 /*@ Creation Date : 19-Feb-2019                                     @*/
 /*@ IFMS-Link     : incrementalDocumentDeliveryNotification_1.0     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Functional Description:                                         @*/
 /*@   -  Common include copybook to send Notification to dedicated  @*/
 /*@      Queue,once document is available in DBOX.                  @*/
 /*@   -  eventually xml message must be converted to utf-8          @*/
 /*@=================================================================@*/
 /*@ Revisor            : Raymond Stofer      Tag  : RS01            @*/
 /*@ Realease Number    : RLSE000219591       Date : 18.06.2019      @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@  - Writing Topics must be done with the handle from the open,   @*/
 /*@    not with the Topic Name!                                     @*/
 /*@=================================================================@*/
 /*@ Revisor            : Raymond Stofer      Tag  : RS02            @*/
 /*@ Realease Number    : RLSE000220293       Date : 08.10.2019      @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@  - Deeplink is cut in test environments, increase size          @*/
 /*@=================================================================@*/
 /*@ Revisor            : Raymond Stofer      Tag  : RS03            @*/
 /*@ Realease Number    : RLSE000221304       Date : 05.03.2020      @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@  - add Is_original to XML structure                             @*/
 /*@=================================================================@*/
  /* BEGIN %INCLUDE YYENVX */
 /*'Get Single Environment Value, user entry'                         */
  /* BEGIN %INCLUDE YYENVXE */
 /*'get single environment specific value, entry'                     */
    dcl yyenvx   entry
 /* item              */(char (80)   var byaddr inonly  nonasgn
 /* returncode        */,bin fixed(31)   byaddr    asgn optional
 /* returnmessage     */,char(500)   var byaddr    asgn optional
 /* trace             */,char  (1)       byaddr nonasgn optional)
 /*>value             */ returns(char(500)var)
                 options (fetchable);
 /* long names                                                        */
    dcl YY_get_single_environment_value  generic(YYENVX other);
  /*   END %INCLUDE YYENVXE */
                                                  /* entry            */
  /*   END %INCLUDE YYENVX */
                                           /* Detect environment  Test*/
 /*-------------------------------------------------------------------*/
 /* MQ Includes                                                       */
 /*-------------------------------------------------------------------*/
 dcl 1 TopicQCommArea,
  /* BEGIN %INCLUDE IDMQCOMM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : IDMQCOMM - EOS Handler MQ Modules Comm Area     @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 05-May-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
    2   $Trace                bit(01),
    2   $QueueManager         char(48),
    2   $QueueName            char(48),
    2   $HandleConnection     bin fixed(31),
    2   $HandleObject         bin fixed(31),
    2   $CompCode             bin fixed(31),
    2   $Reason               bin fixed(31);
  /*   END %INCLUDE IDMQCOMM */
 ;

 dcl hex8 builtin;
 /*-------------------------------------------------------------------*/
 /* Structure for XML Tags                                            */
 /*-------------------------------------------------------------------*/
 dcl MQMsgTag(12)              char(30)   varying static;

 MQMsgTag(*)  = '';
 MQMsgTag(01) = 'ictoDeliverer';
 MQMsgTag(02) = 'ictoMsgIssuer';
 MQMsgTag(03) = 'documentUUID';
 MQMsgTag(04) = 'busEventUUID';
 MQMsgTag(05) = 'channel';
 MQMsgTag(06) = 'documentType';
 MQMsgTag(07) = 'msgTimestamp';
 MQMsgTag(08) = 'deliveryState';
 MQMsgTag(09) = 'topic';
 MQMsgTag(10) = 'deeplink';
 MQMsgTag(11) = '</notification>';
 MQMsgTag(12) = 'original';

 dcl MQMsgXMLHeaderText char value
      ('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'!!
       '<notification>');

 /*-------------------------------------------------------------------*/
 /* WorkArea Declaration                                              */
 /*-------------------------------------------------------------------*/
 dcl PreviousICTONumber            char(08)      init('--------');
 dcl DeliveryState                 char(02)      value('OK');
 dcl DeepLinkEnv                   char(20)      init('');
 dcl ConfigData                    char(48)      init('');
 dcl TopicNew                      char(48)      init('');
 dcl CommonTopicName               char(48)      init('');
 dcl MQMessage                     char(1000)    varying init('');
 dcl DocDeepLink                   char(100)     varying init('');
 dcl UUIDDeepLink                  char(100)     varying init('');
 dcl XMLDocDeepLink                char(200)     varying init('');
 dcl DocUuidIeeeFormat             char(36)      init('');
 dcl EventUuidIeeeFormat           char(36)      init('');
 dcl DB2CurrentTimestamp           char(27)      init('');
 dcl RZ                            char(03)      init('');
 dcl TopicCur                      bin fixed(31) init(0);
 dcl TotOpenTopicQCnt              bin fixed(31) init(0);
 dcl TotNotificationCnt            bin fixed(31) init(0);
 dcl 1 Topic_structure             (200),
     5 TopicName                   char(48) ,
     5 TopicHandle                 bin fixed(31);
 dcl 1 msgTimestamp                based(addr(DB2CurrentTimestamp)),
       5 YYYY                      char(04),
       5 Filler1                   char(01),
       5 MM                        char(02),
       5 Filler2                   char(01),
       5 DD                        char(02),
       5 Filler3                   char(01),
       5 HH                        char(02),
       5 Filler4                   char(01),
       5 MI                        char(02),
       5 Filler5                   char(01),
       5 SS                        char(02),
       5 Filler6                   char(01),
       5 SecondFraction            char(06),
       5 TimeZone                  char(01);


 /*===================================================================*/
 /*                 C O M M O N   P R O C E D U R E S                 */
 /*===================================================================*/
 SendNotificationToMQ:proc($ICTONumber);
   dcl $ICTONumber char(08);

   Call LogTrace(@Dflt,'Proc',ProcedureName());

   if  PreviousICTONumber^= $ICTONumber
   then do;
     Call LogTrace(@Dflt ,'ICTO','previous and current ICTO '       !!
                                 'number is diferent:'              !!
                                 'PreviousICTO:'!!PreviousICTONumber!!
                                 'currentICTO:' !!$ICTONumber);
     If RetrieveDBoxConfig('*','Notification',
                          $ICTONumber)^= ''
     then do;
       ConfigData = XCCNFG.XC300_CONFIG_DATA;
       TopicNew   = trim(CommonTopicName)!!'/'!!$ICTONumber;
     end;
     else do;
       ConfigData = $ICTONumber;
       TopicNew   = CommonTopicName;
     end;

     do TopicCur = 1 to TotOpenTopicQCnt
        while(TopicName(TopicCur) ^= TopicNew);
     end;
     if TopicCur <= TotOpenTopicQCnt
      & TopicName(TopicCur) = TopicNew
     then do;
       TopicQCommArea.$QueueName    = TopicName  (TopicCur);
       TopicQCommArea.$HandleObject = TopicHandle(TopicCur);
     end;
     else call PerformMQTopicOpen;
     PreviousICTONumber = $ICTONumber;
   end;
   else Call LogTrace(@Dflt,'###','previous and current ICTO is same');

   call PopulateAndSendMQData;

 End SendNotificationToMQ;

 /*===================================================================*/
 /* PerformMQTopicOpen                                                */
 /*===================================================================*/
 PerformMQTopicOpen: Proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   dcl  $OpenOptions             bin fixed(31);
   dcl 1 MQCommArea              based(addr(TopicQCommArea)),
  /* BEGIN %INCLUDE IDMQCOMM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : IDMQCOMM - EOS Handler MQ Modules Comm Area     @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 05-May-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
    2   $Trace                bit(01),
    2   $QueueManager         char(48),
    2   $QueueName            char(48),
    2   $HandleConnection     bin fixed(31),
    2   $HandleObject         bin fixed(31),
    2   $CompCode             bin fixed(31),
    2   $Reason               bin fixed(31);
  /*   END %INCLUDE IDMQCOMM */
 ;

  /* BEGIN %INCLUDE CMQP */
 /********************************************************************/
 /*                                                                  */
 /*                   WebSphere MQ for z/OS                          */
 /*                                                                  */
 /*  FILE NAME:      CMQP                                            */
 /*                                                                  */
 /*  DESCRIPTION:    Declarations for Main MQI                       */
 /*                                                                  */
 /********************************************************************/
 /*  @START_COPYRIGHT@                                               */
 /*  Statement:     Licensed Materials - Property of IBM             */
 /*                                                                  */
 /*                 5655-W97                                         */
 /*                                                                  */
 /*  (c) Copyright IBM Corp. 1993, 2013 All Rights Reserved.         */
 /*                                                                  */
 /*  US Government Users Restricted Rights - Use, duplication or     */
 /*  disclosure restricted by GSA ADP Schedule Contract with         */
 /*  IBM Corp.                                                       */
 /*  @END_COPYRIGHT@                                                 */
 /********************************************************************/
 /*                                                                  */
 /*  FUNCTION:       This file declares the functions, structures    */
 /*                  and named constants for the main MQI.           */
 /*                                                                  */
 /*  PROCESSOR:      PL/I                                            */
 /*                                                                  */
 /********************************************************************/

 /********************************************************************/
 /* Check if the compiler is 64-bit capable.                         */
 /********************************************************************/

 /********************************************************************/
 /* Values Related to MQAIR Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Authentication Information Type */

 /********************************************************************/
 /* Values Related to MQBMHO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Buffer To Message Handle Options */

 /********************************************************************/
 /* Values Related to MQBO Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Begin Options */

 /********************************************************************/
 /* Values Related to MQCBC Structure - Callback Context             */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /* Callback type */

 /* Consumer state */

 /* Reconnect delay */

 /********************************************************************/
 /* Values Related to MQCBD Structure - Callback Descriptor          */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Callback Options */

 /* This is the type of the Callback Function */

 /* Buffer size values */

 /********************************************************************/
 /* Values Related to MQCHARV Structure                              */
 /********************************************************************/

 /* Variable String Length */

 /********************************************************************/
 /* Values Related to MQCIH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /* Return Codes */

 /* Unit-of-Work Controls */

 /* Get Wait Interval */

 /* Link Types */

 /* Output Data Length */

 /* ADS Descriptors */

 /* Conversational Task Options */

 /* Task End Status */

 /* Facility */

 /* Functions */

 /* Start Codes */

 /********************************************************************/
 /* Values Related to MQCMHO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Create Message Handle Options */

 /********************************************************************/
 /* Values Related to MQCTLO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Consumer Control Options */

 /********************************************************************/
 /* Values Related to MQSCO Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* SuiteB Type */

 /* Key Reset Count */

 /* Certificate Validation Policy Type */

 /********************************************************************/
 /* Values Related to MQCSP Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Authentication Types */

 /********************************************************************/
 /* Values Related to MQCNO Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Connect Options */

 /* Queue Manager Connection Tag */

 /* Connection Identifier */

 /********************************************************************/
 /* Values Related to MQDH Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /********************************************************************/
 /* Values Related to MQDLH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQDMHO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Delete Message Handle Options */

 /********************************************************************/
 /* Values Related to MQDMPO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Delete Message Property Options */

 /********************************************************************/
 /* Values Related to MQGMO Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Get Message Options */

 /* Wait Interval */

 /* Signal Values */

 /* Match Options */

 /* Group Status */

 /* Segment Status */

 /* Segmentation */

 /* Message Token */

 /* Returned Length */

 /********************************************************************/
 /* Values Related to MQIIH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /* Authenticator */

 /* Transaction Instance Identifier */

 /* Transaction States */

 /* Commit Modes */

 /* Security Scopes */

 /********************************************************************/
 /* Values Related to MQIMPO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Inquire Message Property Options */

 /********************************************************************/
 /* Values Related to MQMD Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Report Options */

 /* Report Options Masks */

 /* Message Types */

 /* Expiry */

 /* Feedback Values */

 /* Encoding */

 /* Encoding Masks */

 /* Encodings for Binary Integers */

 /* Encodings for Packed Decimal Integers */

 /* Encodings for Floating Point Numbers */

 /* Encodings for Multicast */

 /* Coded Character Set Identifiers */

 /* Formats */

 /* Priority */

 /* Persistence Values */

 /* Put Response Values */

 /* Message Identifier */

 /* Correlation Identifier */

 /* Accounting Token */

 /* Put Application Types */

 /* Group Identifier */

 /* Message Flags */

 /* Message Flags Masks */

 /* Original Length */

 /********************************************************************/
 /* Values Related to MQMDE Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /********************************************************************/
 /* Values Related to MQMD1 Structure                                */
 /********************************************************************/

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQMD2 Structure                                */
 /********************************************************************/

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQMHBO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Message Handle To Buffer Options */

 /********************************************************************/
 /* Values Related to MQOD Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Obsolete DB2 Messages options on Inquire Group */

 /* Object Types */

 /* Extended Object Types */

 /********************************************************************/
 /* Values Related to MQPD Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Property Descriptor Options */

 /* Property Support Options */

 /* Property Context */

 /* Property Copy Options */

 /********************************************************************/
 /* Values Related to MQPMO Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Put Message Options */

 /* Put Message Options for publish mask */

 /* Put Message Record Fields */

 /* Action */

 /********************************************************************/
 /* Values Related to MQRFH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */
 /* MQRFH2 flags in the restricted mask are reserved for MQ use: */

 /* 0x80000000 - MQRFH_INTERNAL - This flag indicates the RFH2 header */
 /* was created by WebSphere MQ for internal use. */


 /* Names for Name/Value String */

 /********************************************************************/
 /* Values Related to MQRFH Structure                                */
 /********************************************************************/

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQRMH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /* Object Instance Identifier */

 /********************************************************************/
 /* Values Related to MQSD Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Security Identifier */

 /* Security Identifier Types */

 /********************************************************************/
 /* Values Related to MQSMPO Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Set Message Property Options */

 /********************************************************************/
 /* Values Related to MQSRO Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Subscription Request Options */

 /********************************************************************/
 /* Values Related to MQSTS Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQTM Structure                                 */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQTMC Structure                                */
 /********************************************************************/

 /* Structure Length */

 /********************************************************************/
 /* Values Related to MQTMC2 Structure                               */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Length */

 /* Structure Version Number */

 /********************************************************************/
 /* Values Related to MQWIH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /* Flags */

 /********************************************************************/
 /* Values Related to MQXQH Structure                                */
 /********************************************************************/

 /* Structure Identifier */

 /* Structure Version Number */

 /* Structure Length */

 /********************************************************************/
 /* Values Related to All Functions                                  */
 /********************************************************************/

 /* Connection Handles */

 /* String Lengths */

 /* Completion Codes */

 /* Reason Codes */

 /********************************************************************/
 /* Values Related to Queue Attributes                               */
 /********************************************************************/

 /* Queue Types */

 /* Cluster Queue Types */

 /* Extended Queue Types */

 /* Queue Definition Types */

 /* Inhibit Get Values */

 /* Inhibit Put Values */

 /* Queue Shareability */

 /* Back-Out Hardening */

 /* Message Delivery Sequence */

 /* Nonpersistent Message Class */

 /* Trigger Controls */

 /* Trigger Types */

 /* Trigger Restart */

 /* Queue Usages */

 /* Distribution Lists */

 /* Index Types */

 /* Default Bindings */

 /* Queue Sharing Group Dispositions */

 /* Reorganization Controls */

 /* Read Ahead Values */

 /* Queue and Channel Property Control Values */

 /********************************************************************/
 /* Values Related to Namelist Attributes                            */
 /********************************************************************/

 /* Name Count */

 /* Namelist Types */

 /********************************************************************/
 /* Values Related to CF-Structure Attributes                        */
 /********************************************************************/

 /* CF Recoverability */

 /* CF Automatic Recovery */

 /* CF Loss of Connectivity Action */

 /********************************************************************/
 /* Values Related to Service Attributes                             */
 /********************************************************************/

 /* Service Types */

 /********************************************************************/
 /* Values Related to QueueManager Attributes                        */
 /********************************************************************/

 /* Adopt New MCA Checks */

 /* Adopt New MCA Types */

 /* Autostart */

 /* Channel Auto Definition */

 /* Cluster Workload */

 /* Command Levels */

 /* Command Server Options */

 /* DNS WLM */

 /* Expiration Scan Interval */

 /* Intra-Group Queuing */

 /* Intra-Group Queuing Put Authority */

 /* IP Address Versions */

 /* Message Mark-Browse Interval */

 /* Monitoring Values */

 /* Application Function Types */

 /* Application Activity Trace Detail */

 /* Platforms */

 /* Maximum Properties Length */

 /* Pub/Sub Mode */

 /* Pub/Sub clusters */

 /* Control Options */

 /* Receive Timeout Types */

 /* Recording Options */

 /* Security Case */

 /* Shared Queue Queue Manager Name */

 /* SSL FIPS Requirements */

 /* Syncpoint Availability */

 /* Service Controls */

 /* Service Status */

 /* TCP Keepalive */

 /* TCP Stack Types */

 /* Channel Initiator Trace Autostart */

 /* Capability */
 /********************************************************************/
 /* Values Related to Topic Attributes                               */
 /********************************************************************/

 /* Persistent/Non-persistent Message Delivery */

 /* Master administration */

 /* Publish scope */

 /* Durable subscriptions */

 /* Wildcards */

 /* Subscriptions Allowed */

 /* Proxy Sub Propagation */

 /* Publications Allowed */

 /* Topic Type */

 /* Multicast */

 /* CommInfo Type */

 /********************************************************************/
 /* Values Related to Subscription Attributes                        */
 /********************************************************************/

 /* Destination Class */

 /* Pub/Sub Message Properties */

 /* Request Only */

 /* Durable Subscriptions */

 /* Subscription Scope */

 /* Variable User ID */

 /* Wildcard Schema */

 /********************************************************************/
 /* Values Related to Channel Authentication Configuration           */
 /* Attributes                                                       */
 /********************************************************************/

 /* User Source Options */

 /* Warn Options */

 /* DSBlock Options */

 /* DSExpand Options */

 /* OffldUse Options */

 /* Use Dead Letter Queue Options */

 /********************************************************************/
 /* Values Related to MQCLOSE Function                               */
 /********************************************************************/

 /* Object Handle */

 /* Close Options */

 /********************************************************************/
 /* Values Related to MQCTL and MQCB Functions                       */
 /********************************************************************/

 /* Operation codes for MQCTL */

 /* Operation codes for MQCB */

 /* Operation codes for MQCTL and MQCB */

 /********************************************************************/
 /* Values Related to MQDLTMH Function                               */
 /********************************************************************/

 /* Message handle */

 /********************************************************************/
 /* Values Related to MQINQ Function                                 */
 /********************************************************************/

 /* Byte Attribute Selectors */

 /* Character Attribute Selectors */

 /* Integer Attribute Selectors */

 /* Integer Attribute Values */

 /* CommInfo Bridge */

 /* Group Attribute Selectors */

 /********************************************************************/
 /* Values Related to MQOPEN Function                                */
 /********************************************************************/

 /* Open Options */

 /* Following used in C++ only */

 /********************************************************************/
 /* Values Related to MQSETMP Function                               */
 /********************************************************************/

 /* Property data types */

 /* Property value lengths */

 /********************************************************************/
 /* Values Related to MQSTAT Function                                */
 /********************************************************************/

 /* Stat Options */

 /********************************************************************/
 /* Values Related to MQSUB Function                                 */
 /********************************************************************/

 /* Subscribe Options */

 /********************************************************************/
 /* Values Related to MQSUBRQ Function                               */
 /********************************************************************/

 /* Action */

 /********************************************************************/
 /* Constants for MQ Extended Reach                                  */
 /********************************************************************/

 /* General Constants */

 /********************************************************************/
 /* MQAIR Structure -- Authentication Information Record             */
 /********************************************************************/

 dcl
  1 MQAIR based,
   3 StrucId char(4)
     init('AIR '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(1),            /* Structure version number */
   3 AuthInfoType fixed bin(31)
     init(1),             /* Type of authentication */
                                       /* information */
   3 AuthInfoConnName char(264)
     init(''),                         /* Connection name of CRL LDAP */
                                       /* server */
   3 LDAPUserNamePtr pointer
     init(sysnull()),                  /* Address of LDAP user name */
   3 LDAPUserNameOffset fixed bin(31)
     init(0),                          /* Offset of LDAP user name */
                                       /* from start of MQAIR */
                                       /* structure */
   3 LDAPUserNameLength fixed bin(31)
     init(0),                          /* Length of LDAP user name */
   3 LDAPPassword char(32)
     init(''),                         /* Password to access LDAP */
                                       /* server */
   /* Ver:1 */
   3 OCSPResponderURL char(256)
     init('');                         /* URL of the OCSP responder */
   /* Ver:2 */

 /********************************************************************/
 /* MQBMHO Structure -- Buffer To Message Handle Options             */
 /********************************************************************/

 dcl
  1 MQBMHO based,
   3 StrucId char(4)
     init('BMHO'),          /* Structure identifier */
   3 Version fixed bin(31)
     init(1),         /* Structure version number */
   3 Options fixed bin(31)
     init(1); /* Options that control the */
                                     /* action of MQBUFMH */

 /********************************************************************/
 /* MQCBC Structure -- Callback Context                              */
 /********************************************************************/

 dcl
  1 MQCBC based,
   3 StrucId char(4)
     init('CBC '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(1),        /* Structure version number */
   3 CallType fixed bin(31)
     init(0),                      /* Why Function was called */
   3 Hobj fixed bin(31)
     init(-1),     /* Object Handle */
   3 CallbackArea pointer
     init(sysnull()),              /* Callback data passed to the */
                                   /* function */
   3 ConnectionArea pointer
     init(sysnull()),              /* MQCTL Data area passed to the */
                                   /* function */
   3 CompCode fixed bin(31)
     init(0),                /* Completion Code */
   3 Reason fixed bin(31)
     init(0),              /* Reason Code */
   3 State fixed bin(31)
     init(0),              /* Consumer State */
   3 DataLength fixed bin(31)
     init(0),                      /* Message Data Length */
   3 BufferLength fixed bin(31)
     init(0),                      /* Buffer Length */
   3 Flags fixed bin(31)
     init(0),            /* Flags containing information */
                                   /* about this consumer */
   /* Ver:1 */
   3 ReconnectDelay fixed bin(31)
     init(0);                      /* Number of milliseconds before */
                                   /* reconnect attempt */
   /* Ver:2 */

 /********************************************************************/
 /* MQCBD Structure -- Callback Data Descriptor                      */
 /********************************************************************/

 dcl
  1 MQCBD based,
   3 StrucId char(4)
     init('CBD '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(1),        /* Structure version number */
   3 CallbackType fixed bin(31)
     init(1), /* Callback function type */
   3 Options fixed bin(31)
     init(0),            /* Options controlling message */
                                   /* consumption */
   3 CallbackArea pointer
     init(sysnull()),              /* User data passed to the */
                                   /* function */
   3 CallbackFunction pointer
     init(sysnull()),              /* Callback function pointer */
   3 CallbackName char(128)
     init('\0'),                   /* Callback name */
   3 MaxMsgLength fixed bin(31)
     init(-1);  /* Maximum message length */

 /********************************************************************/
 /* MQCHARV Structure -- Variable-length string                      */
 /********************************************************************/

 dcl
  1 MQCHARV based,
   3 VSPtr pointer
     init(sysnull()),         /* Address of variable length string */
   3 VSOffset fixed bin(31)
     init(0),                 /* Offset of variable length string */
   3 VSBufSize fixed bin(31)
     init(0),                 /* Size of buffer */
   3 VSLength fixed bin(31)
     init(0),                 /* Length of variable length string */
   3 VSCCSID fixed bin(31)
     init(-3);       /* CCSID of variable length string */

 /********************************************************************/
 /* MQCIH Structure -- CICS Information Header                       */
 /********************************************************************/

 dcl
  1 MQCIH based,
   3 StrucId char(4)
     init('CIH '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(2),            /* Structure version number */
   3 StrucLength fixed bin(31)
     init(180),             /* Length of MQCIH structure */
   3 Encoding fixed bin(31)
     init(0),                          /* Reserved */
   3 CodedCharSetId fixed bin(31)
     init(0),                          /* Reserved */
   3 Format char(8)
     init('        '),                 /* MQ format name of data that */
                                       /* follows MQCIH */
   3 Flags fixed bin(31)
     init(0),                 /* Flags */
   3 ReturnCode fixed bin(31)
     init(0),                   /* Return code from bridge */
   3 CompCode fixed bin(31)
     init(0),                    /* MQ completion code or CICS */
                                       /* EIBRESP */
   3 Reason fixed bin(31)
     init(0),                  /* MQ reason or feedback code, */
                                       /* or CICS EIBRESP2 */
   3 UOWControl fixed bin(31)
     init(273),               /* Unit-of-work control */
   3 GetWaitInterval fixed bin(31)
     init(-2),             /* Wait interval for MQGET */
                                       /* call issued by bridge task */
   3 LinkType fixed bin(31)
     init(1),              /* Link type */
   3 OutputDataLength fixed bin(31)
     init(-1),            /* Output COMMAREA data length */
   3 FacilityKeepTime fixed bin(31)
     init(0),                          /* Bridge facility release */
                                       /* time */
   3 ADSDescriptor fixed bin(31)
     init(0),               /* Send/receive ADS descriptor */
   3 ConversationalTask fixed bin(31)
     init(0),                   /* Whether task can be */
                                       /* conversational */
   3 TaskEndStatus fixed bin(31)
     init(0),              /* Status at end of task */
   3 Facility char(8)
     init('0000000000000000'X),                /* Bridge facility token
 */
   3 Function char(4)
     init('    '),               /* MQ call name or CICS EIBFN */
                                       /* function */
   3 AbendCode char(4)
     init(''),                         /* Abend code */
   3 Authenticator char(8)
     init(''),                         /* Password or passticket */
   3 Reserved1 char(8)
     init(''),                         /* Reserved */
   3 ReplyToFormat char(8)
     init('        '),                 /* MQ format name of reply */
                                       /* message */
   3 RemoteSysId char(4)
     init(''),                         /* Remote CICS system id to */
                                       /* use */
   3 RemoteTransId char(4)
     init(''),                         /* CICS RTRANSID to use */
   3 TransactionId char(4)
     init(''),                         /* Transaction to attach */
   3 FacilityLike char(4)
     init(''),                         /* Terminal emulated */
                                       /* attributes */
   3 AttentionId char(4)
     init(''),                         /* AID key */
   3 StartCode char(4)
     init('    '),                 /* Transaction start code */
   3 CancelCode char(4)
     init(''),                         /* Abend transaction code */
   3 NextTransactionId char(4)
     init(''),                         /* Next transaction to attach */
   3 Reserved2 char(8)
     init(''),                         /* Reserved */
   3 Reserved3 char(8)
     init(''),                         /* Reserved */
   /* Ver:1 */
   3 CursorPosition fixed bin(31)
     init(0),                          /* Cursor position */
   3 ErrorOffset fixed bin(31)
     init(0),                          /* Offset of error in message */
   3 InputItem fixed bin(31)
     init(0),                          /* Reserved */
   3 Reserved4 fixed bin(31)
     init(0);                          /* Reserved */
   /* Ver:2 */

 /********************************************************************/
 /* MQCMHO Structure -- Create Message Handle Options                */
 /********************************************************************/

 dcl
  1 MQCMHO based,
   3 StrucId char(4)
     init('CMHO'),           /* Structure identifier */
   3 Version fixed bin(31)
     init(1),          /* Structure version number */
   3 Options fixed bin(31)
     init(0); /* Options that control the */
                                      /* action of MQCRTMH */

 /********************************************************************/
 /* MQCTLO Structure -- MQCTL function options                       */
 /********************************************************************/

 dcl
  1 MQCTLO based,
   3 StrucId char(4)
     init('CTLO'),  /* Structure identifier */
   3 Version fixed bin(31)
     init(1), /* Structure version number */
   3 Options fixed bin(31)
     init(0),      /* Options that control the action of */
                             /* MQCTL */
   3 Reserved fixed bin(31)
     init(-1),   /* Reserved */
   3 ConnectionArea pointer
     init(sysnull());        /* MQCTL Data area passed to the */
                             /* function */

 /********************************************************************/
 /* MQSCO Structure -- SSL Configuration Options                     */
 /********************************************************************/

 dcl
  1 MQSCO based,
   3 StrucId char(4)
     init('SCO '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(1),             /* Structure version number */
   3 KeyRepository char(256)
     init(''),                          /* Location of SSL key */
                                        /* repository */
   3 CryptoHardware char(256)
     init(''),                          /* Cryptographic hardware */
                                        /* configuration string */
   3 AuthInfoRecCount fixed bin(31)
     init(0),                           /* Number of MQAIR records */
                                        /* present */
   3 AuthInfoRecOffset fixed bin(31)
     init(0),                           /* Offset of first MQAIR */
                                        /* record from start of MQSCO */
                                        /* structure */
   3 AuthInfoRecPtr pointer
     init(sysnull()),                   /* Address of first MQAIR */
                                        /* record */
   /* Ver:1 */
   3 KeyResetCount fixed bin(31)
     init(0),   /* Number of unencrypted */
                                        /* bytes sent/received before */
                                        /* secret key is reset */
   3 FipsRequired fixed bin(31)
     init(0),               /* Using FIPS-certified */
                                        /* algorithms */
   /* Ver:2 */
   3 EncryptionPolicySuiteB (4) fixed bin(31)
     init(1,0,0,0),                     /* Use only Suite B */
                                        /* cryptographic algorithms */
   /* Ver:3 */
   3 CertificateValPolicy fixed bin(31)
     init(0),  /* Certificate validation */
                                        /* policy */
   /* Ver:4 */
   3 CertificateLabel char(64)
     init('');                          /* SSL/TLS certificate label */
   /* Ver:5 */

 /********************************************************************/
 /* MQCSP Structure -- Security Parameters                           */
 /********************************************************************/

 dcl
  1 MQCSP based,
   3 StrucId char(4)
     init('CSP '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(1),            /* Structure version number */
   3 AuthenticationType fixed bin(31)
     init(0),            /* Type of authentication */
   3 Reserved1 char(4)
     init('00000000'X),                /* Reserved */
   3 CSPUserIdPtr pointer
     init(sysnull()),                  /* Address of user ID */
   3 CSPUserIdOffset fixed bin(31)
     init(0),                          /* Offset of user ID */
   3 CSPUserIdLength fixed bin(31)
     init(0),                          /* Length of user ID */
   3 Reserved2 char(8)
     init('0000000000000000'X),        /* Reserved */
   3 CSPPasswordPtr pointer
     init(sysnull()),                  /* Address of password */
   3 CSPPasswordOffset fixed bin(31)
     init(0),                          /* Offset of password */
   3 CSPPasswordLength fixed bin(31)
     init(0);                          /* Length of password */

 /********************************************************************/
 /* MQCNO Structure -- Connect Options                               */
 /********************************************************************/

 dcl
  1 MQCNO based,
   3 StrucId char(4)
     init('CNO '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(1),             /* Structure version number */
   3 Options fixed bin(31)
     init(0),                  /* Options that control the */
                                        /* action of MQCONNX */
   /* Ver:1 */
   3 ClientConnOffset fixed bin(31)
     init(0),                           /* Offset of MQCD structure */
                                        /* for client connection */
   3 ClientConnPtr pointer
     init(sysnull()),                   /* Address of MQCD structure */
                                        /* for client connection */
   /* Ver:2 */
   3 ConnTag char(128)
     init('0000000000000000000000000000000000000000000000000000000000000
 00000000000000000000000000000000000000000000000000000000000000000000000
 00000000000000000000000000000000000000000000000000000000000000000000000
 00000000000000000000000000000000000000000000000000000'X),
      /* Queue-manager connection */
                                        /* tag */
   /* Ver:3 */
   3 SSLConfigPtr pointer
     init(sysnull()),                   /* Address of MQSCO structure */
                                        /* for client connection */
   3 SSLConfigOffset fixed bin(31)
     init(0),                           /* Offset of MQSCO structure */
                                        /* for client connection */
   /* Ver:4 */
   3 ConnectionId char(24)
     init('000000000000000000000000000000000000000000000000'X),
       /* Unique Connection */
                                        /* Identifier */
   3 SecurityParmsOffset fixed bin(31)
     init(0),                           /* Offset of MQCSP structure */
   3 SecurityParmsPtr pointer
     init(sysnull());                   /* Address of MQCSP structure */
   /* Ver:5 */

 /********************************************************************/
 /* MQDH Structure -- Distribution Header                            */
 /********************************************************************/

 dcl
  1 MQDH based,
   3 StrucId char(4)
     init('DH  '),           /* Structure identifier */
   3 Version fixed bin(31)
     init(1),          /* Structure version number */
   3 StrucLength fixed bin(31)
     init(0),                       /* Length of MQDH structure plus */
                                    /* following MQOR and MQPMR */
                                    /* records */
   3 Encoding fixed bin(31)
     init(0),                       /* Numeric encoding of data that */
                                    /* follows the MQOR and MQPMR */
                                    /* records */
   3 CodedCharSetId fixed bin(31)
     init(0),        /* Character set identifier of */
                                    /* data that follows the MQOR and */
                                    /* MQPMR records */
   3 Format char(8)
     init('        '),              /* Format name of data that */
                                    /* follows the MQOR and MQPMR */
                                    /* records */
   3 Flags fixed bin(31)
     init(0),              /* General flags */
   3 PutMsgRecFields fixed bin(31)
     init(0),             /* Flags indicating which MQPMR */
                                    /* fields are present */
   3 RecsPresent fixed bin(31)
     init(0),                       /* Number of MQOR records present */
   3 ObjectRecOffset fixed bin(31)
     init(0),                       /* Offset of first MQOR record */
                                    /* from start of MQDH */
   3 PutMsgRecOffset fixed bin(31)
     init(0);                       /* Offset of first MQPMR record */
                                    /* from start of MQDH */

 /********************************************************************/
 /* MQDLH Structure -- Dead Letter Header                            */
 /********************************************************************/

 dcl
  1 MQDLH based,
   3 StrucId char(4)
     init('DLH '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(1),        /* Structure version number */
   3 Reason fixed bin(31)
     init(0),              /* Reason message arrived on */
                                   /* dead-letter */
                                   /* (undelivered-message) queue */
   3 DestQName char(48)
     init(''),                     /* Name of original destination */
                                   /* queue */
   3 DestQMgrName char(48)
     init(''),                     /* Name of original destination */
                                   /* queue manager */
   3 Encoding fixed bin(31)
     init(0),                      /* Numeric encoding of data that */
                                   /* follows MQDLH */
   3 CodedCharSetId fixed bin(31)
     init(0),       /* Character set identifier of */
                                   /* data that follows MQDLH */
   3 Format char(8)
     init('        '),             /* Format name of data that */
                                   /* follows MQDLH */
   3 PutApplType fixed bin(31)
     init(0),                      /* Type of application that put */
                                   /* message on dead-letter */
                                   /* (undelivered-message) queue */
   3 PutApplName char(28)
     init(''),                     /* Name of application that put */
                                   /* message on dead-letter */
                                   /* (undelivered-message) queue */
   3 PutDate char(8)
     init(''),                     /* Date when message was put on */
                                   /* dead-letter */
                                   /* (undelivered-message) queue */
   3 PutTime char(8)
     init('');                     /* Time when message was put on */
                                   /* dead-letter */
                                   /* (undelivered-message) queue */

 /********************************************************************/
 /* MQDMHO Structure -- Delete Message Handle Options                */
 /********************************************************************/

 dcl
  1 MQDMHO based,
   3 StrucId char(4)
     init('DMHO'),  /* Structure identifier */
   3 Version fixed bin(31)
     init(1), /* Structure version number */
   3 Options fixed bin(31)
     init(0);      /* Options that control the action of */
                             /* MQDLTMH */

 /********************************************************************/
 /* MQDMPO Structure -- Delete Message Property Options              */
 /********************************************************************/

 dcl
  1 MQDMPO based,
   3 StrucId char(4)
     init('DMPO'),  /* Structure identifier */
   3 Version fixed bin(31)
     init(1), /* Structure version number */
   3 Options fixed bin(31)
     init(0); /* Options that control the action of */
                             /* MQDLTMP */

 /********************************************************************/
 /* MQGMO Structure -- Get Message Options                           */
 /********************************************************************/

 dcl
  1 MQGMO based,

   3 StrucId char(4)
     init('GMO '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(1),             /* Structure version number */
   3 Options fixed bin(31)
     init((0+0)),
                                        /* Options that control the */
                                        /* action of MQGET */
   3 WaitInterval fixed bin(31)
     init(0),                           /* Wait interval */
   3 Signal1 pointer
     init(sysnull()),                   /* Signal */
   3 Signal2 fixed bin(31)
     init(0),                           /* Signal identifier */
   3 ResolvedQName char(48)
     init(''),                          /* Resolved name of */
                                        /* destination queue */
   /* Ver:1 */
   3 MatchOptions fixed bin(31)
     init((1+2)),
                                        /* Options controlling */
                                        /* selection criteria used */
                                        /* for MQGET */
   3 GroupStatus char(1)
     init(' '),           /* Flag indicating whether */
                                        /* message retrieved is in a */
                                        /* group */
   3 SegmentStatus char(1)
     init(' '),          /* Flag indicating whether */
                                        /* message retrieved is a */
                                        /* segment of a logical */
                                        /* message */
   3 Segmentation char(1)
     init(' '),             /* Flag indicating whether */
                                        /* further segmentation is */
                                        /* allowed for the message */
                                        /* retrieved */
   3 Reserved1 char(1)
     init(''),                          /* Reserved */
   /* Ver:2 */
   3 MsgToken char(16)
     init('00000000000000000000000000000000'X),                 /* Messa
 ge token */
   3 ReturnedLength fixed bin(31)
     init(-1),              /* Length of message data */
                                        /* returned (bytes) */
   /* Ver:3 */
   3 Reserved2 fixed bin(31)
     init(0),                           /* Reserved */
   3 MsgHandle FIXED BIN(63)

     init(0);                   /* Message handle */
   /* Ver:4 */

 /********************************************************************/
 /* MQIIH Structure -- IMS Information Header                        */
 /********************************************************************/

 dcl
  1 MQIIH based,
   3 StrucId char(4)
     init('IIH '),            /* Structure identifier */
   3 Version fixed bin(31)
     init(1),           /* Structure version number */
   3 StrucLength fixed bin(31)
     init(84),            /* Length of MQIIH structure */
   3 Encoding fixed bin(31)
     init(0),                         /* Reserved */
   3 CodedCharSetId fixed bin(31)
     init(0),                         /* Reserved */
   3 Format char(8)
     init('        '),                /* MQ format name of data that */
                                      /* follows MQIIH */
   3 Flags fixed bin(31)
     init(0),                /* Flags */
   3 LTermOverride char(8)
     init(''),                        /* Logical terminal override */
   3 MFSMapName char(8)
     init(''),                        /* Message format services map */
                                      /* name */
   3 ReplyToFormat char(8)
     init('        '),                /* MQ format name of reply */
                                      /* message */
   3 Authenticator char(8)
     init('        '),               /* RACF password or passticket */
   3 TranInstanceId char(16)
     init('00000000000000000000000000000000'X),               /* Transac
 tion instance */
                                      /* identifier */
   3 TranState char(1)
     init(' '), /* Transaction state */
   3 CommitMode char(1)
     init('0'),    /* Commit mode */
   3 SecurityScope char(1)
     init('C'),               /* Security scope */
   3 Reserved char(1)
     init('');                        /* Reserved */

 /********************************************************************/
 /* MQIMPO Structure -- Inquire Message Property Options             */
 /********************************************************************/

 dcl
  1 MQIMPO based,
   3 StrucId char(4)
     init('IMPO'),           /* Structure identifier */
   3 Version fixed bin(31)
     init(1),          /* Structure version number */
   3 Options fixed bin(31)
     init(0),          /* Options that control the */
                                      /* action of MQINQMP */
   3 RequestedEncoding fixed bin(31)
     init(785),              /* Requested encoding of Value */
   3 RequestedCCSID fixed bin(31)
     init(-3),               /* Requested character set */
                                      /* identifier of Value */
   3 ReturnedEncoding fixed bin(31)
     init(785),              /* Returned encoding of Value */
   3 ReturnedCCSID fixed bin(31)
     init(0),                         /* Returned character set */
                                      /* identifier of Value */
   3 Reserved1 fixed bin(31)
     init(0),                         /* Reserved */
   3 ReturnedName,                    /* Returned property name */
     5 VSPtr pointer
       init(sysnull()),               /* Address of variable length */
                                      /* string */
     5 VSOffset fixed bin(31)
       init(0),                       /* Offset of variable length */
                                      /* string */
     5 VSBufSize fixed bin(31)
       init(0),                       /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                       /* Length of variable length */
                                      /* string */
     5 VSCCSID fixed bin(31)
       init(-3),             /* CCSID of variable length */
                                      /* string */
   3 TypeString char(8)
     init('');                        /* Property data type as a */
                                      /* string */

 /********************************************************************/
 /* MQMD Structure -- Message Descriptor                             */
 /********************************************************************/

 dcl
  1 MQMD based,
   3 StrucId char(4)
     init('MD  '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(1),             /* Structure version number */
   3 Report fixed bin(31)
     init(0),                  /* Options for report messages */
   3 MsgType fixed bin(31)
     init(8),              /* Message type */
   3 Expiry fixed bin(31)
     init(-1),             /* Message lifetime */
   3 Feedback fixed bin(31)
     init(0),                  /* Feedback or reason code */
   3 Encoding fixed bin(31)
     init(785),               /* Numeric encoding of message */
                                       /* data */
   3 CodedCharSetId fixed bin(31)
     init(0),               /* Character set identifier of */
                                       /* message data */
   3 Format char(8)
     init('        '),                 /* Format name of message data */
   3 Priority fixed bin(31)
     init(-1),    /* Message priority */
   3 Persistence fixed bin(31)
     init(2), /* Message persistence */
   3 MsgId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Message identifier */
   3 CorrelId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Correlation identifier */
   3 BackoutCount fixed bin(31)
     init(0),                          /* Backout counter */
   3 ReplyToQ char(48)
     init(''),                         /* Name of reply queue */
   3 ReplyToQMgr char(48)
     init(''),                         /* Name of reply queue manager */
   3 UserIdentifier char(12)
     init(''),                         /* User identifier */
   3 AccountingToken char(32)
     init('0000000000000000000000000000000000000000000000000000000000000
 000'X),                 /* Accounting token */
   3 ApplIdentityData char(32)
     init(''),                         /* Application data relating */
                                       /* to identity */
   3 PutApplType fixed bin(31)
     init(0),            /* Type of application that */
                                       /* put the message */
   3 PutApplName char(28)
     init(''),                         /* Name of application that */
                                       /* put the message */
   3 PutDate char(8)
     init(''),                         /* Date when message was put */
   3 PutTime char(8)
     init(''),                         /* Time when message was put */
   3 ApplOriginData char(4)
     init('');                         /* Application data relating */
                                       /* to origin */
   /* Ver:1 */

 /********************************************************************/
 /* MQMDE Structure -- Message Descriptor Extension                  */
 /********************************************************************/

 dcl
  1 MQMDE based,
   3 StrucId char(4)
     init('MDE '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(2),        /* Structure version number */
   3 StrucLength fixed bin(31)
     init(72),         /* Length of MQMDE structure */
   3 Encoding fixed bin(31)
     init(785),           /* Numeric encoding of data that */
                                   /* follows MQMDE */
   3 CodedCharSetId fixed bin(31)
     init(0),       /* Character-set identifier of */
                                   /* data that follows MQMDE */
   3 Format char(8)
     init('        '),             /* Format name of data that */
                                   /* follows MQMDE */
   3 Flags fixed bin(31)
     init(0),            /* General flags */
   3 GroupId char(24)
     init('000000000000000000000000000000000000000000000000'X),
      /* Group identifier */
   3 MsgSeqNumber fixed bin(31)
     init(1),                      /* Sequence number of logical */
                                   /* message within group */
   3 Offset fixed bin(31)
     init(0),                      /* Offset of data in physical */
                                   /* message from start of logical */
                                   /* message */
   3 MsgFlags fixed bin(31)
     init(0),              /* Message flags */
   3 OriginalLength fixed bin(31)
     init(-1);         /* Length of original message */

 /********************************************************************/
 /* MQMD1 Structure -- Version-1 Message Descriptor                  */
 /********************************************************************/

 dcl
  1 MQMD1 based,
   3 StrucId char(4)
     init('MD  '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(1),             /* Structure version number */
   3 Report fixed bin(31)
     init(0),                  /* Options for report messages */
   3 MsgType fixed bin(31)
     init(8),              /* Message type */
   3 Expiry fixed bin(31)
     init(-1),             /* Message lifetime */
   3 Feedback fixed bin(31)
     init(0),                  /* Feedback or reason code */
   3 Encoding fixed bin(31)
     init(785),               /* Numeric encoding of message */
                                       /* data */
   3 CodedCharSetId fixed bin(31)
     init(0),               /* Character set identifier of */
                                       /* message data */
   3 Format char(8)
     init('        '),                 /* Format name of message data */
   3 Priority fixed bin(31)
     init(-1),    /* Message priority */
   3 Persistence fixed bin(31)
     init(2), /* Message persistence */
   3 MsgId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Message identifier */
   3 CorrelId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Correlation identifier */
   3 BackoutCount fixed bin(31)
     init(0),                          /* Backout counter */
   3 ReplyToQ char(48)
     init(''),                         /* Name of reply queue */
   3 ReplyToQMgr char(48)
     init(''),                         /* Name of reply queue manager */
   3 UserIdentifier char(12)
     init(''),                         /* User identifier */
   3 AccountingToken char(32)
     init('0000000000000000000000000000000000000000000000000000000000000
 000'X),                 /* Accounting token */
   3 ApplIdentityData char(32)
     init(''),                         /* Application data relating */
                                       /* to identity */
   3 PutApplType fixed bin(31)
     init(0),            /* Type of application that */
                                       /* put the message */
   3 PutApplName char(28)
     init(''),                         /* Name of application that */
                                       /* put the message */
   3 PutDate char(8)
     init(''),                         /* Date when message was put */
   3 PutTime char(8)
     init(''),                         /* Time when message was put */
   3 ApplOriginData char(4)
     init('');                         /* Application data relating */
                                       /* to origin */

 /********************************************************************/
 /* MQMD2 Structure -- Version-2 Message Descriptor                  */
 /********************************************************************/

 dcl
  1 MQMD2 based,
   3 StrucId char(4)
     init('MD  '),              /* Structure identifier */
   3 Version fixed bin(31)
     init(2),             /* Structure version number */
   3 Report fixed bin(31)
     init(0),                  /* Options for report messages */
   3 MsgType fixed bin(31)
     init(8),              /* Message type */
   3 Expiry fixed bin(31)
     init(-1),             /* Message lifetime */
   3 Feedback fixed bin(31)
     init(0),                  /* Feedback or reason code */
   3 Encoding fixed bin(31)
     init(785),               /* Numeric encoding of message */
                                       /* data */
   3 CodedCharSetId fixed bin(31)
     init(0),               /* Character set identifier of */
                                       /* message data */
   3 Format char(8)
     init('        '),                 /* Format name of message data */
   3 Priority fixed bin(31)
     init(-1),    /* Message priority */
   3 Persistence fixed bin(31)
     init(2), /* Message persistence */
   3 MsgId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Message identifier */
   3 CorrelId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Correlation identifier */
   3 BackoutCount fixed bin(31)
     init(0),                          /* Backout counter */
   3 ReplyToQ char(48)
     init(''),                         /* Name of reply queue */
   3 ReplyToQMgr char(48)
     init(''),                         /* Name of reply queue manager */
   3 UserIdentifier char(12)
     init(''),                         /* User identifier */
   3 AccountingToken char(32)
     init('0000000000000000000000000000000000000000000000000000000000000
 000'X),                 /* Accounting token */
   3 ApplIdentityData char(32)
     init(''),                         /* Application data relating */
                                       /* to identity */
   3 PutApplType fixed bin(31)
     init(0),            /* Type of application that */
                                       /* put the message */
   3 PutApplName char(28)
     init(''),                         /* Name of application that */
                                       /* put the message */
   3 PutDate char(8)
     init(''),                         /* Date when message was put */
   3 PutTime char(8)
     init(''),                         /* Time when message was put */
   3 ApplOriginData char(4)
     init(''),                         /* Application data relating */
                                       /* to origin */
   /* Ver:1 */
   3 GroupId char(24)
     init('000000000000000000000000000000000000000000000000'X),
          /* Group identifier */
   3 MsgSeqNumber fixed bin(31)
     init(1),                          /* Sequence number of logical */
                                       /* message within group */
   3 Offset fixed bin(31)
     init(0),                          /* Offset of data in physical */
                                       /* message from start of */
                                       /* logical message */
   3 MsgFlags fixed bin(31)
     init(0),                  /* Message flags */
   3 OriginalLength fixed bin(31)
     init(-1);             /* Length of original message */
   /* Ver:2 */

 /********************************************************************/
 /* MQMHBO Structure -- Message Handle To Buffer Options             */
 /********************************************************************/

 dcl
  1 MQMHBO based,
   3 StrucId char(4)
     init('MHBO'),             /* Structure identifier */
   3 Version fixed bin(31)
     init(1),            /* Structure version number */
   3 Options fixed bin(31)
     init(1); /* Options that control the */
                                        /* action of MQMHBUF */

 /********************************************************************/
 /* MQOD Structure -- Object descriptor                              */
 /********************************************************************/

 dcl
  1 MQOD based,
   3 StrucId char(4)
     init('OD  '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(1),            /* Structure version number */
   3 ObjectType fixed bin(31)
     init(1),                    /* Object type */
   3 ObjectName char(48)
     init(''),                        /* Object name */
   3 ObjectQMgrName char(48)
     init(''),                        /* Object queue manager name */
   3 DynamicQName char(48)
     init('CSQ.*'),                   /* Dynamic queue name */
   3 AlternateUserId char(12)
     init(''),                        /* Alternate user identifier */
   /* Ver:1 */
   3 RecsPresent fixed bin(31)
     init(0),                         /* Number of object records */
                                      /* present */
   3 KnownDestCount fixed bin(31)
     init(0),                         /* Number of local queues */
                                      /* opened successfully */
   3 UnknownDestCount fixed bin(31)
     init(0),                         /* Number of remote queues */
                                      /* opened */
   3 InvalidDestCount fixed bin(31)
     init(0),                         /* Number of queues that failed */
                                      /* to open */
   3 ObjectRecOffset fixed bin(31)
     init(0),                         /* Offset of first object */
                                      /* record from start of MQOD */
   3 ResponseRecOffset fixed bin(31)
     init(0),                         /* Offset of first response */
                                      /* record from start of MQOD */
   3 ObjectRecPtr pointer
     init(sysnull()),                 /* Address of first object */
                                      /* record */
   3 ResponseRecPtr pointer
     init(sysnull()),                 /* Address of first response */
                                      /* record */
   /* Ver:2 */
   3 AlternateSecurityId char(40)
     init('0000000000000000000000000000000000000000000000000000000000000
 0000000000000000000'X),                /* Alternate security */

                                      /* identifier */
   3 ResolvedQName char(48)
     init(''),                        /* Resolved queue name */
   3 ResolvedQMgrName char(48)
     init(''),                        /* Resolved queue manager name */
   /* Ver:3 */
   3 ObjectString,                    /* Object long name */
     5 VSPtr pointer
       init(sysnull()),               /* Address of variable length */
                                      /* string */
     5 VSOffset fixed bin(31)
       init(0),                       /* Offset of variable length */
                                      /* string */
     5 VSBufSize fixed bin(31)
       init(0),                       /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                       /* Length of variable length */
                                      /* string */
     5 VSCCSID fixed bin(31)
       init(-3),             /* CCSID of variable length */
                                      /* string */
   3 SelectionString,                 /* Message Selector */
     5 VSPtr pointer
       init(sysnull()),               /* Address of variable length */
                                      /* string */
     5 VSOffset fixed bin(31)
       init(0),                       /* Offset of variable length */
                                      /* string */
     5 VSBufSize fixed bin(31)
       init(0),                       /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                       /* Length of variable length */
                                      /* string */
     5 VSCCSID fixed bin(31)
       init(-3),             /* CCSID of variable length */
                                      /* string */
   3 ResObjectString,                 /* Resolved long object name */
     5 VSPtr pointer
       init(sysnull()),               /* Address of variable length */
                                      /* string */
     5 VSOffset fixed bin(31)
       init(0),                       /* Offset of variable length */
                                      /* string */
     5 VSBufSize fixed bin(31)
       init(0),                       /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                       /* Length of variable length */
                                      /* string */
     5 VSCCSID fixed bin(31)
       init(-3),             /* CCSID of variable length */
                                      /* string */
   3 ResolvedType fixed bin(31)
     init(0);                 /* Alias queue resolved object */
                                      /* type */
   /* Ver:4 */

 /********************************************************************/
 /* MQOR Structure -- Object Record                                  */
 /********************************************************************/

 dcl
  1 MQOR based,
   3 ObjectName char(48)
     init(''),                /* Object name */
   3 ObjectQMgrName char(48)
     init('');                /* Object queue manager name */

 /********************************************************************/
 /* MQPD Structure -- Property descriptor                            */
 /********************************************************************/

 dcl
  1 MQPD based,
   3 StrucId char(4)
     init('PD  '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(1),        /* Structure version number */
   3 Options fixed bin(31)
     init(0),             /* Options that control the action */
                                  /* of MQSETMP and MQINQMP */
   3 Support fixed bin(31)
     init(1), /* Property support option */
   3 Context fixed bin(31)
     init(0),       /* Property context */
   3 CopyOptions fixed bin(31)
     init(22);        /* Property copy options */

 /********************************************************************/
 /* MQPMO Structure -- Put Message Options                           */
 /********************************************************************/

 dcl
  1 MQPMO based,
   3 StrucId char(4)
     init('PMO '),            /* Structure identifier */
   3 Version fixed bin(31)
     init(1),           /* Structure version number */
   3 Options fixed bin(31)
     init(0),                /* Options that control the */
                                      /* action of MQPUT and MQPUT1 */
   3 Timeout fixed bin(31)
     init(-1),                        /* Reserved */
   3 Context fixed bin(31)
     init(0),                         /* Object handle of input queue */
   3 KnownDestCount fixed bin(31)
     init(0),                         /* Number of messages sent */
                                      /* successfully to local queues */
   3 UnknownDestCount fixed bin(31)
     init(0),                         /* Number of messages sent */
                                      /* successfully to remote */
                                      /* queues */
   3 InvalidDestCount fixed bin(31)
     init(0),                         /* Number of messages that */
                                      /* could not be sent */
   3 ResolvedQName char(48)
     init(''),                        /* Resolved name of destination */
                                      /* queue */
   3 ResolvedQMgrName char(48)
     init(''),                        /* Resolved name of destination */
                                      /* queue manager */
   /* Ver:1 */
   3 RecsPresent fixed bin(31)
     init(0),                         /* Number of put message */
                                      /* records or response records */
                                      /* present */
   3 PutMsgRecFields fixed bin(31)
     init(0),               /* Flags indicating which MQPMR */
                                      /* fields are present */
   3 PutMsgRecOffset fixed bin(31)
     init(0),                         /* Offset of first put message */
                                      /* record from start of MQPMO */
   3 ResponseRecOffset fixed bin(31)
     init(0),                         /* Offset of first response */
                                      /* record from start of MQPMO */
   3 PutMsgRecPtr pointer
     init(sysnull()),                 /* Address of first put message */
                                      /* record */
   3 ResponseRecPtr pointer
     init(sysnull()),                 /* Address of first response */
                                      /* record */
   /* Ver:2 */
   3 OriginalMsgHandle FIXED BIN(63)

     init(0),                 /* Original message handle */
   3 NewMsgHandle FIXED BIN(63)

     init(0),                 /* New message handle */
   3 Action fixed bin(31)
     init(0),                /* The action being performed */
   3 PubLevel fixed bin(31)
     init(9);                         /* Publication level */
   /* Ver:3 */

 /********************************************************************/
 /* MQRFH Structure -- Rules and Formatting Header                   */
 /********************************************************************/

 dcl
  1 MQRFH based,
   3 StrucId char(4)
     init('RFH '),           /* Structure identifier */
   3 Version fixed bin(31)
     init(1),          /* Structure version number */
   3 StrucLength fixed bin(31)
     init(32), /* Total length of MQRFH */
                                     /* including NameValueString */
   3 Encoding fixed bin(31)
     init(785),             /* Numeric encoding of data that */
                                     /* follows NameValueString */
   3 CodedCharSetId fixed bin(31)
     init(0),         /* Character set identifier of */
                                     /* data that follows */
                                     /* NameValueString */
   3 Format char(8)
     init('        '),               /* Format name of data that */
                                     /* follows NameValueString */
   3 Flags fixed bin(31)
     init(0);               /* Flags */

 /********************************************************************/
 /* MQRFH2 Structure -- Rules and Formatting Header 2                */
 /********************************************************************/

 dcl
  1 MQRFH2 based,
   3 StrucId char(4)
     init('RFH '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(2),            /* Structure version number */
   3 StrucLength fixed bin(31)
     init(36), /* Total length of MQRFH2 */
                                       /* including all */
                                       /* NameValueLength and */
                                       /* NameValueData fields */
   3 Encoding fixed bin(31)
     init(785),               /* Numeric encoding of data */
                                       /* that follows last */
                                       /* NameValueData field */
   3 CodedCharSetId fixed bin(31)
     init(-2),             /* Character set identifier of */
                                       /* data that follows last */
                                       /* NameValueData field */
   3 Format char(8)
     init('        '),                 /* Format name of data that */
                                       /* follows last NameValueData */
                                       /* field */
   3 Flags fixed bin(31)
     init(0),                 /* Flags */
   3 NameValueCCSID fixed bin(31)
     init(1208);                       /* Character set identifier of */
                                       /* NameValueData */

 /********************************************************************/
 /* MQRMH Structure -- Reference Message Header                      */
 /********************************************************************/

 dcl
  1 MQRMH based,
   3 StrucId char(4)
     init('RMH '),             /* Structure identifier */
   3 Version fixed bin(31)
     init(1),            /* Structure version number */
   3 StrucLength fixed bin(31)
     init(0),                          /* Total length of MQRMH, */
                                       /* including strings at end of */
                                       /* fixed fields, but not the */
                                       /* bulk data */
   3 Encoding fixed bin(31)
     init(785),               /* Numeric encoding of bulk */
                                       /* data */
   3 CodedCharSetId fixed bin(31)
     init(0),           /* Character set identifier of */
                                       /* bulk data */
   3 Format char(8)
     init('        '),                 /* Format name of bulk data */
   3 Flags fixed bin(31)
     init(0),            /* Reference message flags */
   3 ObjectType char(8)
     init(''),                         /* Object type */
   3 ObjectInstanceId char(24)
     init('000000000000000000000000000000000000000000000000'X),
         /* Object instance identifier */
   3 SrcEnvLength fixed bin(31)
     init(0),                          /* Length of source */
                                       /* environment data */
   3 SrcEnvOffset fixed bin(31)
     init(0),                          /* Offset of source */
                                       /* environment data */
   3 SrcNameLength fixed bin(31)
     init(0),                          /* Length of source object */
                                       /* name */
   3 SrcNameOffset fixed bin(31)
     init(0),                          /* Offset of source object */
                                       /* name */
   3 DestEnvLength fixed bin(31)
     init(0),                          /* Length of destination */
                                       /* environment data */
   3 DestEnvOffset fixed bin(31)
     init(0),                          /* Offset of destination */
                                       /* environment */
   3 DestNameLength fixed bin(31)
     init(0),                          /* Length of destination */
                                       /* object name */
   3 DestNameOffset fixed bin(31)
     init(0),                          /* Offset of destination */
                                       /* object name */
   3 DataLogicalLength fixed bin(31)
     init(0),                          /* Length of bulk data */
   3 DataLogicalOffset fixed bin(31)
     init(0),                          /* Low offset of bulk data */
   3 DataLogicalOffset2 fixed bin(31)
     init(0);                          /* High offset of bulk data */

 /********************************************************************/
 /* MQSD Structure -- Subscription Descriptor                        */
 /********************************************************************/

 dcl
  1 MQSD based,
   3 StrucId char(4)
     init('SD  '),               /* Structure identifier */
   3 Version fixed bin(31)
     init(1),              /* Structure version number */
   3 Options fixed bin(31)
     init(0),                           /* Options associated with */
                                        /* subscribing */
   3 ObjectName char(48)
     init(''),                          /* Object name */
   3 AlternateUserId char(12)
     init(''),                          /* Alternate user identifier */
   3 AlternateSecurityId char(40)
     init('0000000000000000000000000000000000000000000000000000000000000
 0000000000000000000'X),                  /* Alternate security */

                                        /* identifier */
   3 SubExpiry fixed bin(31)
     init(-1),              /* Expiry of Subscription */
   3 ObjectString,                      /* Object long name */
     5 VSPtr pointer
       init(sysnull()),                 /* Address of variable length */
                                        /* string */
     5 VSOffset fixed bin(31)
       init(0),                         /* Offset of variable length */
                                        /* string */
     5 VSBufSize fixed bin(31)
       init(0),                         /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                         /* Length of variable length */
                                        /* string */
     5 VSCCSID fixed bin(31)
       init(-3),               /* CCSID of variable length */
                                        /* string */
   3 SubName,                           /* Subscription name */
     5 VSPtr pointer
       init(sysnull()),                 /* Address of variable length */
                                        /* string */
     5 VSOffset fixed bin(31)
       init(0),                         /* Offset of variable length */
                                        /* string */
     5 VSBufSize fixed bin(31)
       init(0),                         /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                         /* Length of variable length */
                                        /* string */
     5 VSCCSID fixed bin(31)
       init(-3),               /* CCSID of variable length */
                                        /* string */
   3 SubUserData,                       /* Subscription user data */
     5 VSPtr pointer
       init(sysnull()),                 /* Address of variable length */
                                        /* string */
     5 VSOffset fixed bin(31)
       init(0),                         /* Offset of variable length */
                                        /* string */
     5 VSBufSize fixed bin(31)
       init(0),                         /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                         /* Length of variable length */
                                        /* string */
     5 VSCCSID fixed bin(31)
       init(-3),               /* CCSID of variable length */
                                        /* string */
   3 SubCorrelId char(24)
     init('000000000000000000000000000000000000000000000000'X),
           /* Correlation Id related to */
                                        /* this subscription */
   3 PubPriority fixed bin(31)
     init(-3), /* Priority set in */
                                        /* publications */
   3 PubAccountingToken char(32)
     init('0000000000000000000000000000000000000000000000000000000000000
 000'X),                  /* Accounting Token set in */
                                        /* publications */
   3 PubApplIdentityData char(32)
     init(''),                          /* Appl Identity Data set in */
                                        /* publications */
   3 SelectionString,                   /* Message selector structure */
     5 VSPtr pointer
       init(sysnull()),                 /* Address of variable length */
                                        /* string */
     5 VSOffset fixed bin(31)
       init(0),                         /* Offset of variable length */
                                        /* string */
     5 VSBufSize fixed bin(31)
       init(0),                         /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                         /* Length of variable length */
                                        /* string */
     5 VSCCSID fixed bin(31)
       init(-3),               /* CCSID of variable length */
                                        /* string */
   3 SubLevel fixed bin(31)
     init(1),                           /* Subscription level */
   3 ResObjectString,                   /* Resolved long object name */
     5 VSPtr pointer
       init(sysnull()),                 /* Address of variable length */
                                        /* string */
     5 VSOffset fixed bin(31)
       init(0),                         /* Offset of variable length */
                                        /* string */
     5 VSBufSize fixed bin(31)
       init(0),                         /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                         /* Length of variable length */
                                        /* string */
     5 VSCCSID fixed bin(31)
       init(-3);               /* CCSID of variable length */
                                        /* string */

 /********************************************************************/
 /* MQSMPO Structure -- Set Message Property Options                 */
 /********************************************************************/

 dcl
  1 MQSMPO based,
   3 StrucId char(4)
     init('SMPO'),       /* Structure identifier */
   3 Version fixed bin(31)
     init(1),      /* Structure version number */
   3 Options fixed bin(31)
     init(0),      /* Options that control the action */
                                  /* of MQSETMP */
   3 ValueEncoding fixed bin(31)
     init(785),          /* Encoding of Value */
   3 ValueCCSID fixed bin(31)
     init(-3);           /* Character set identifier of */
                                  /* Value */

 /********************************************************************/
 /* MQSRO Structure -- Subscription Request Options                  */
 /********************************************************************/

 dcl
  1 MQSRO based,
   3 StrucId char(4)
     init('SRO '),  /* Structure identifier */
   3 Version fixed bin(31)
     init(1), /* Structure version number */
   3 Options fixed bin(31)
     init(0),               /* Options that control the action of */
                            /* MQSUBRQ */
   3 NumPubs fixed bin(31)
     init(0);               /* Number of publications sent */

 /********************************************************************/
 /* MQSTS Structure -- Status Information Record                     */
 /********************************************************************/

 dcl
  1 MQSTS based,
   3 StrucId char(4)
     init('STAT'),          /* Structure identifier */
   3 Version fixed bin(31)
     init(1),         /* Structure version number */
   3 CompCode fixed bin(31)
     init(0),                       /* Completion Code of first error */
   3 Reason fixed bin(31)
     init(0),                       /* Reason Code of first error */
   3 PutSuccessCount fixed bin(31)
     init(0),                       /* Number of Async put calls */
                                    /* succeeded */
   3 PutWarningCount fixed bin(31)
     init(0),                 /* Number of Async put calls had */
                                    /* warnings */
   3 PutFailureCount fixed bin(31)
     init(0),               /* Number of Async put calls had */
                                    /* failures */
   3 ObjectType fixed bin(31)
     init(1),                  /* Failing object type */
   3 ObjectName char(48)
     init(''),                      /* Failing object name */
   3 ObjectQMgrName char(48)
     init(''),                      /* Failing object queue manager */
   3 ResolvedObjectName char(48)
     init(''),                      /* Resolved name of destination */
                                    /* queue */
   3 ResolvedQMgrName char(48)
     init(''),                      /* Resolved name of destination */
                                    /* qmgr */
   /* Ver:1 */
   3 ObjectString,                  /* Failing object long name */
     5 VSPtr pointer
       init(sysnull()),             /* Address of variable length */
                                    /* string */
     5 VSOffset fixed bin(31)
       init(0),                     /* Offset of variable length */
                                    /* string */
     5 VSBufSize fixed bin(31)
       init(0),                     /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                     /* Length of variable length */
                                    /* string */
     5 VSCCSID fixed bin(31)
       init(-3),           /* CCSID of variable length */
                                    /* string */
   3 SubName,                       /* Failing subscription name */
     5 VSPtr pointer
       init(sysnull()),             /* Address of variable length */
                                    /* string */
     5 VSOffset fixed bin(31)
       init(0),                     /* Offset of variable length */
                                    /* string */
     5 VSBufSize fixed bin(31)
       init(0),                     /* Size of buffer */
     5 VSLength fixed bin(31)
       init(0),                     /* Length of variable length */
                                    /* string */
     5 VSCCSID fixed bin(31)
       init(-3),           /* CCSID of variable length */
                                    /* string */
   3 OpenOptions fixed bin(31)
     init(0),                       /* Failing open options */
   3 SubOptions fixed bin(31)
     init(0);                       /* Failing subscription options */
   /* Ver:2 */

 /********************************************************************/
 /* MQTM Structure -- Trigger Message                                */
 /********************************************************************/

 dcl
  1 MQTM based,
   3 StrucId char(4)
     init('TM  '),    /* Structure identifier */
   3 Version fixed bin(31)
     init(1),   /* Structure version number */
   3 QName char(48)
     init(''),               /* Name of triggered queue */
   3 ProcessName char(48)
     init(''),               /* Name of process object */
   3 TriggerData char(64)
     init(''),               /* Trigger data */
   3 ApplType fixed bin(31)
     init(0),                /* Application type */
   3 ApplId char(256)
     init(''),               /* Application identifier */
   3 EnvData char(128)
     init(''),               /* Environment data */
   3 UserData char(128)
     init('');               /* User data */

 /********************************************************************/
 /* MQTMC2 Structure -- Trigger Message 2 (Character)                */
 /********************************************************************/

 dcl
  1 MQTMC2 based,
   3 StrucId char(4)
     init('TMC '),  /* Structure identifier */
   3 Version char(4)
     init('   2'), /* Structure version number */
   3 QName char(48)
     init(''),              /* Name of triggered queue */
   3 ProcessName char(48)
     init(''),              /* Name of process object */
   3 TriggerData char(64)
     init(''),              /* Trigger data */
   3 ApplType char(4)
     init(''),              /* Application type */
   3 ApplId char(256)
     init(''),              /* Application identifier */
   3 EnvData char(128)
     init(''),              /* Environment data */
   3 UserData char(128)
     init(''),              /* User data */
   /* Ver:1 */
   3 QMgrName char(48)
     init('');              /* Queue manager name */
   /* Ver:2 */

 /********************************************************************/
 /* MQWIH Structure -- Work Information Header                       */
 /********************************************************************/

 dcl
  1 MQWIH based,
   3 StrucId char(4)
     init('WIH '),         /* Structure identifier */
   3 Version fixed bin(31)
     init(1),        /* Structure version number */
   3 StrucLength fixed bin(31)
     init(120),         /* Length of MQWIH structure */
   3 Encoding fixed bin(31)
     init(0),                      /* Numeric encoding of data that */
                                   /* follows MQWIH */
   3 CodedCharSetId fixed bin(31)
     init(0),       /* Character-set identifier of */
                                   /* data that follows MQWIH */
   3 Format char(8)
     init('        '),             /* Format name of data that */
                                   /* follows MQWIH */
   3 Flags fixed bin(31)
     init(0),             /* Flags */
   3 ServiceName char(32)
     init(''),                     /* Service name */
   3 ServiceStep char(8)
     init(''),                     /* Service step name */
   3 MsgToken char(16)
     init('00000000000000000000000000000000'X),            /* Message to
 ken */
   3 Reserved char(32)
     init('');                     /* Reserved */

 /********************************************************************/
 /* MQXQH Structure -- Transmission Queue Header                     */
 /********************************************************************/

 dcl
  1 MQXQH based,
   3 StrucId char(4)
     init('XQH '),    /* Structure identifier */
   3 Version fixed bin(31)
     init(1),   /* Structure version number */
   3 RemoteQName char(48)
     init(''),                /* Name of destination queue */
   3 RemoteQMgrName char(48)
     init(''),                /* Name of destination queue manager */
   3 MsgDesc,                 /* Original message descriptor */
     5 StrucId char(4)
       init('MD  '),   /* Structure identifier */
     5 Version fixed bin(31)
       init(1),  /* Structure version number */
     5 Report fixed bin(31)
       init(0),       /* Options for report messages */
     5 MsgType fixed bin(31)
       init(8),   /* Message type */
     5 Expiry fixed bin(31)
       init(-1),  /* Message lifetime */
     5 Feedback fixed bin(31)
       init(0),       /* Feedback or reason code */
     5 Encoding fixed bin(31)
       init(785),    /* Numeric encoding of message data */
     5 CodedCharSetId fixed bin(31)
       init(0),    /* Character set identifier of message */
                              /* data */
     5 Format char(8)
       init('        '),      /* Format name of message data */
     5 Priority fixed bin(31)
       init(-1),
                              /* Message priority */
     5 Persistence fixed bin(31)
       init(2),
                              /* Message persistence */
     5 MsgId char(24)
       init('000000000000000000000000000000000000000000000000'X),
 /* Message identifier */
     5 CorrelId char(24)
       init('000000000000000000000000000000000000000000000000'X),
 /* Correlation identifier */
     5 BackoutCount fixed bin(31)
       init(0),               /* Backout counter */
     5 ReplyToQ char(48)
       init(''),              /* Name of reply queue */
     5 ReplyToQMgr char(48)
       init(''),              /* Name of reply queue manager */
     5 UserIdentifier char(12)
       init(''),              /* User identifier */
     5 AccountingToken char(32)
       init('00000000000000000000000000000000000000000000000000000000000
 00000'X),      /* Accounting token */
     5 ApplIdentityData char(32)
       init(''),              /* Application data relating to */
                              /* identity */
     5 PutApplType fixed bin(31)
       init(0), /* Type of application that put the */
                              /* message */
     5 PutApplName char(28)
       init(''),              /* Name of application that put the */
                              /* message */
     5 PutDate char(8)
       init(''),              /* Date when message was put */
     5 PutTime char(8)
       init(''),              /* Time when message was put */
     5 ApplOriginData char(4)
       init('');              /* Application data relating to origin */


 /********************************************************************/
 /*  End of CMQP                                                     */
 /********************************************************************/
  /*   END %INCLUDE CMQP */
  /* BEGIN %INCLUDE CMQEPP */
 /********************************************************************/
 /*                                                                  */
 /*                   WebSphere MQ for z/OS                          */
 /*                                                                  */
 /*  FILE NAME:      CMQEPP                                          */
 /*                                                                  */
 /*  DESCRIPTION:    Declarations for Main MQI                       */
 /*                                                                  */
 /********************************************************************/
 /*  @START_COPYRIGHT@                                               */
 /*  Statement:     Licensed Materials - Property of IBM             */
 /*                                                                  */
 /*                 5655-W97                                         */
 /*                                                                  */
 /*  (c) Copyright IBM Corp. 1993, 2013 All Rights Reserved.         */
 /*                                                                  */
 /*  US Government Users Restricted Rights - Use, duplication or     */
 /*  disclosure restricted by GSA ADP Schedule Contract with         */
 /*  IBM Corp.                                                       */
 /*  @END_COPYRIGHT@                                                 */
 /********************************************************************/
 /*                                                                  */
 /*  FUNCTION:       This file declares the functions, structures    */
 /*                  and named constants for the main MQI.           */
 /*                                                                  */
 /*  PROCESSOR:      PL/I                                            */
 /*                                                                  */
 /********************************************************************/

 /********************************************************************/
 /* Check if the compiler is 64-bit capable.                         */
 /********************************************************************/

 /********************************************************************/
 /*  Parameter usage in functions                                    */
 /*    I:    input                                                   */
 /*    IB:   input, data buffer                                      */
 /*    IL:   input, length of data buffer                            */
 /*    IO:   input and output                                        */
 /*    IOB:  input and output, data buffer                           */
 /*    IOL:  input and output, length of data buffer                 */
 /*    O:    output                                                  */
 /*    OB:   output, data buffer                                     */
 /*    OC:   output, completion code                                 */
 /*    OR:   output, reason code                                     */
 /*    FP:   function pointer                                        */
 /********************************************************************/

 /****************************************************************/
 /* MQBACK Function -- Back Out Changes                          */
 /****************************************************************/

 dcl MQBACK entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQBUFMH Function -- Buffer To Message Handle                 */
 /****************************************************************/

 dcl MQBUFMH entry (
   fixed bin(31),   /* I: Connection handle */
   FIXED BIN(63),        /* I: Message handle */

   *,               /* I: Options that control the action of MQBUFMH */
   *,               /* IO: Message descriptor */
   fixed bin(31),   /* IL: Length in bytes of the Buffer area */
   *,               /* IOB: Area to contain the message buffer */
   fixed bin(31),   /* O: Length of the output buffer */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQCB Function -- Register Message consumer                   */
 /****************************************************************/

 dcl MQCB entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* I: Operation */
   *,               /* I: Callback descriptor */
   fixed bin(31),   /* I: Object handle */
   *,               /* I: Message Descriptor */
   *,               /* I: Get options */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQCLOSE Function -- Close Object                             */
 /****************************************************************/

 dcl MQCLOSE entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* IO: Object handle */
   fixed bin(31),   /* I: Options that control the action of MQCLOSE */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQCMIT Function -- Commit Changes                            */
 /****************************************************************/

 dcl MQCMIT entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQCONN Function -- Connect Queue Manager                     */
 /****************************************************************/

 dcl MQCONN entry (
   char(48),        /* I: Name of queue manager */
   fixed bin(31),   /* O: Connection handle */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQCONNX Function -- Connect Queue Manager (Extended)         */
 /****************************************************************/

 dcl MQCONNX entry (
   char(48),        /* I: Name of queue manager */
   *,               /* IO: Options that control the action of MQCONNX */
   fixed bin(31),   /* O: Connection handle */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQCRTMH Function -- Create Message Handle                    */
 /****************************************************************/

 dcl MQCRTMH entry (
   fixed bin(31),   /* I: Connection handle */
   *,               /* I: Options that control the action of MQCRTMH */
   FIXED BIN(63),        /* O: Message handle */

   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQCTL Function -- Control Consumer                           */
 /****************************************************************/

 dcl MQCTL entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* I: Operation */
   *,               /* I: Control options */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQDISC Function -- Disconnect Queue Manager                  */
 /****************************************************************/

 dcl MQDISC entry (
   fixed bin(31),   /* IO: Connection handle */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQDLTMH Function -- Delete Message Handle                    */
 /****************************************************************/

 dcl MQDLTMH entry (
   fixed bin(31),   /* I: Connection handle */
   FIXED BIN(63),        /* IO: Message handle */

   *,               /* I: Options that control the action of MQDLTMH */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQDLTMP Function -- Delete Message Property                  */
 /****************************************************************/

 dcl MQDLTMP entry (
   fixed bin(31),   /* I: Connection handle */
   FIXED BIN(63),        /* I: Message handle */

   *,               /* I: Options that control the action of MQDLTMP */
   *,               /* I: Property name */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQGET Function -- Get Message                                */
 /****************************************************************/

 dcl MQGET entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* I: Object handle */
   *,               /* IO: Message descriptor */
   *,               /* IO: Options that control the action of MQGET */
   fixed bin(31),   /* IL: Length in bytes of the Buffer area */
   *,               /* OB: Area to contain the message data */
   fixed bin(31),   /* O: Length of the message */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQINQ Function -- Inquire Object Attributes                  */
 /****************************************************************/

 dcl MQINQ entry (
   fixed bin(31),       /* I: Connection handle */
   fixed bin(31),       /* I: Object handle */
   fixed bin(31),       /* I: Count of selectors */
   (*) fixed bin(31),   /* I: Array of attribute selectors */
   fixed bin(31),       /* I: Count of integer attributes */
   (*) fixed bin(31),   /* O: Array of integer attributes */
   fixed bin(31),       /* IL: Length of character attributes buffer */
   char(*),             /* OB: Character attributes */
   fixed bin(31),       /* OC: Completion code */
   fixed bin(31)        /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQINQMP Function -- Inquire Message Property                 */
 /****************************************************************/

 dcl MQINQMP entry (
   fixed bin(31),   /* I: Connection handle */
   FIXED BIN(63),        /* I: Message handle */

   *,               /* I: Options that control the action of MQINQMP */
   *,               /* I: Property name */
   *,               /* O: Property descriptor */
   fixed bin(31),   /* IO: Property data type */
   fixed bin(31),   /* IL: Length in bytes of the Value area */
   *,               /* OB: Property value */
   fixed bin(31),   /* O: Length of the property value */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQMHBUF Function -- Message Handle To Buffer                 */
 /****************************************************************/

 dcl MQMHBUF entry (
   fixed bin(31),   /* I: Connection handle */
   FIXED BIN(63),        /* I: Message handle */

   *,               /* I: Options that control the action of MQMHBUF */
   *,               /* I: Property name */
   *,               /* IO: Message descriptor */
   fixed bin(31),   /* IL: Length in bytes of the Buffer area */
   *,               /* OB: Area to contain the properties */
   fixed bin(31),   /* O: Length of the properties */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQOPEN Function -- Open Object                               */
 /****************************************************************/

 dcl MQOPEN entry (
   fixed bin(31),   /* I: Connection handle */
   *,               /* IO: Object descriptor */
   fixed bin(31),   /* I: Options that control the action of MQOPEN */
   fixed bin(31),   /* O: Object handle */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQPUT Function -- Put Message                                */
 /****************************************************************/

 dcl MQPUT entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* I: Object handle */
   *,               /* IO: Message descriptor */
   *,               /* IO: Options that control the action of MQPUT */
   fixed bin(31),   /* IL: Length of the message in Buffer */
   *,               /* IB: Message data */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQPUT1 Function -- Put One Message                           */
 /****************************************************************/

 dcl MQPUT1 entry (
   fixed bin(31),   /* I: Connection handle */
   *,               /* IO: Object descriptor */
   *,               /* IO: Message descriptor */
   *,               /* IO: Options that control the action of MQPUT1 */
   fixed bin(31),   /* IL: Length of the message in Buffer */
   *,               /* IB: Message data */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQSET Function -- Set Object Attributes                      */
 /****************************************************************/

 dcl MQSET entry (
   fixed bin(31),       /* I: Connection handle */
   fixed bin(31),       /* I: Object handle */
   fixed bin(31),       /* I: Count of selectors */
   (*) fixed bin(31),   /* I: Array of attribute selectors */
   fixed bin(31),       /* I: Count of integer attributes */
   (*) fixed bin(31),   /* I: Array of integer attributes */
   fixed bin(31),       /* IL: Length of character attributes buffer */
   char(*),             /* IB: Character attributes */
   fixed bin(31),       /* OC: Completion code */
   fixed bin(31)        /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQSETMP Function -- Set Message Property                     */
 /****************************************************************/

 dcl MQSETMP entry (
   fixed bin(31),   /* I: Connection handle */
   FIXED BIN(63),        /* I: Message handle */

   *,               /* I: Options that control the action of MQSETMP */
   *,               /* I: Property name */
   *,               /* IO: Property descriptor */
   fixed bin(31),   /* I: Property data type */
   fixed bin(31),   /* IL: Length of the Value area */
   *,               /* IB: Property value */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQSTAT Function -- Get Status Information                    */
 /****************************************************************/

 dcl MQSTAT entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* I: Status information type */
   *,               /* IO: Status information */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQSUB Function -- Subscribe to topic                         */
 /****************************************************************/

 dcl MQSUB entry (
   fixed bin(31),   /* I: Connection handle */
   *,               /* IO: Subscription descriptor */
   fixed bin(31),   /* IO: Object handle for queue */
   fixed bin(31),   /* O: Subscription object handle */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* MQSUBRQ Function -- Subscription Request                     */
 /****************************************************************/

 dcl MQSUBRQ entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* I: Subscription handle */
   fixed bin(31),   /* I: Action requested on the subscription */
   *,               /* IO: Subscription Request Options */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* CSQBCMT Function -- Commit                                   */
 /****************************************************************/

 dcl CSQBCMT entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);

 /****************************************************************/
 /* CSQBBAK Function -- Back Out                                 */
 /****************************************************************/

 dcl CSQBBAK entry (
   fixed bin(31),   /* I: Connection handle */
   fixed bin(31),   /* OC: Completion code */
   fixed bin(31)    /* OR: Reason code qualifying CompCode */
 ) external options(assembler inter);


 /********************************************************************/
 /*  End of CMQEPP                                                   */
 /********************************************************************/
  /*   END %INCLUDE CMQEPP */

   dcl 1 MQObjDesc               like MQOD;

   MQCommarea.$CompCode   = 0;
   MQCommarea.$Reason     = 0;
   MQCommarea.$QueueName  = TopicNew;
   MQObjDesc.ObjectName   = TopicNew;
   MQObjDesc.ObjectType   = 8;
   MQObjDesc.DynamicQname = 'ECM.*';
   MQObjDesc.Version      = 4;
   $OpenOptions           = 16 + 8192;

   Call MQOPEN(MQCommArea.$HandleConnection,
               MQObjDesc,
               $OpenOptions,
               MQCommarea.$HandleObject,
               MQCommarea.$CompCode,
               MQCommarea.$Reason);

   if MQCommarea.$CompCode ^= 0
   then do;
     Call LogTrace(@Force,'MQer',(90)'*');
     Call LogTrace(@Force,'MQer','Queue Name         :'
                                !!MQCommArea.$QueueName);
     Call LogTrace(@Force,'MQer','Handle Connection  :'
                                !!MQCommArea.$HandleConnection);
     Call LogTrace(@Force,'MQer','Handle Object      :'
                                !!MQCommArea.$HandleObject);
     Call LogTrace(@Force,'MQer','RC                 :'
                                !!MQCommArea.$CompCode);
     Call LogTrace(@Force,'MQer','Reason             :'
                                !!MQCommArea.$Reason);
     Call LogTrace(@Force,'MQer','Option             :'
                                !!$OpenOptions);
     Call LogTrace(@Force,'MQer','Queue Object Desc  :');
 ; /*put skip lines removed (by topaz plugin) */
     Call LogTrace(@Force,'Info',(90)'*');
     Call HandleException('E#22','MQOPEN',
                          'MQ Open Failed with reason '!!
                           MQCommArea.$Reason);
   end;
   else do;
     Call LogTrace(@Force,'T#20','MQop: '!!trim(MQObjDesc.ObjectName) !!
                                 ' Opened Successfully');
     TotOpenTopicQCnt = TotOpenTopicQCnt + 1;
     TopicName  (TotOpenTopicQCnt) = MQObjDesc.ObjectName    ;
     TopicHandle(TotOpenTopicQCnt) = MQCommarea.$HandleObject;
     if TotOpenTopicQCnt >= 200
     then do;
 ; /*put skip lines removed (by topaz plugin) */
       Call HandleException('E#24','TPCNT','Too many Topics');
     end;
   end;
 End PerformMQTopicOpen;

 /*===================================================================*/
 /* PopulateAndSendMQData                                             */
 /*===================================================================*/
 PopulateAndSendMQData: proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   MQMessage = '';
   XMLDocDeepLink = '';

   Call PopulateXMLForMQ;
   Call SendMessageToMQ;

 End PopulateAndSendMQData;

 /*===================================================================*/
 /* PopulateXMLForMQ                                                  */
 /*===================================================================*/
 PopulateXMLForMQ: proc;
   Call Logtrace(@Dflt,'Proc',ProcedureName());

   Call AppendToMsg(MQMsgXMLHeaderText);

   Call AppendToMsg(AppendXMLTag(MQMsgTag(01),ConfigData));
   Call AppendToMsg(AppendXMLTag(MQMsgTag(02),'ICTO-409'));

   DocUuidIeeeFormat  = substr(xc401a1t.xc401_doc_uuid,1,13)!!'-'!!
                        substr(xc401a1t.xc401_doc_uuid,14,4)!!'-'!!
                        substr(xc401a1t.xc401_doc_uuid,19,4)!!'-'!!
                        substr(xc401a1t.xc401_doc_uuid,23,4)!!
                        substr(xc401a1t.xc401_doc_uuid,28,8);
   Call AppendToMsg(AppendXMLTag(MQMsgTag(03),DocUuidIeeeFormat));

   EventUuidIeeeFormat  = substr(xc401a1t.xc401_event_uuid,1,13)!!'-'!!
                          substr(xc401a1t.xc401_event_uuid,14,4)!!'-'!!
                          substr(xc401a1t.xc401_event_uuid,19,4)!!'-'!!
                          substr(xc401a1t.xc401_event_uuid,23,4)!!
                          substr(xc401a1t.xc401_event_uuid,28,8);
   Call AppendToMsg(AppendXMLTag(MQMsgTag(04),EventUuidIeeeFormat));
   Call AppendToMsg(AppendXMLTag(MQMsgTag(05),xc401a1t.xc401_channel));
   Call AppendToMsg(AppendXMLTag(MQMsgTag(06),xc401a1t.xc401_doc_type));
   Call AppendToMsg(AppendXMLTag(MQMsgTag(07),string(msgTimestamp)));
   Call AppendToMsg(AppendXMLTag(MQMsgTag(08),deliveryState));
   Call AppendToMsg(AppendXMLTag(MQMsgTag(09),TopicNew));
   Call AppendToMsg(AppendXMLTag(MQMsgTag(12),xc401a1t.XC401_IS_ORIGINAL
                                              )); /*RS03*/

   if xc401a1t.xc401_doc_src_format = 'XLS'
   then UUIDDeepLink   = xc401a1t.xc401_doc_uuid !!'&format=XLS';
   else UUIDDeepLink   = xc401a1t.xc401_doc_uuid;
   Call Logtrace(@Force,'Deep','DeepUUID: ' !!UUIDDeepLink);

   XMLDocDeepLink = trim(DocDeepLink)!!UUIDDeepLink;
   Call AppendToMsg(AppendXMLTag(MQMsgTag(10),XMLDocDeepLink));
   Call AppendToMsg(MQMsgTag(11));

 End PopulateXMLForMQ;

 /*===================================================================*/
 /* AppendToMsg                                                       */
 /*===================================================================*/
 AppendToMsg: Proc($Text);
   dcl $Text char(200)   varying;

   Call LogTrace(@Dflt,'Proc',ProcedureName()!!'('!!$Text!!','
                                             !!length($Text)!!')');
   MQMessage  = MQMessage!!trim($Text);
   Call LogTrace(@Dflt,'T#24','Total Len:'!! length(MQMessage));

 End AppendToMsg;

 /*===================================================================*/
 /* AppendXMLTag                                                         */
 /*===================================================================*/
 AppendXMLTag:Proc($Tag,$TagValue) Returns(char(200) var);  /*RS02*/

   dcl $Tag                            char(30)  varying;   /*RS02*/
   dcl $TagValue                       char(140) varying;   /*RS02*/
   dcl Result                          char(200) varying;   /*RS02*/

   Call LogTrace(@Dflt,'Proc',ProcedureName()!!'('!!
                              $Tag!!','!!$TagValue!!')');

   Result = '<'!!$Tag!!'>'!!trim($TagValue)!!'</'!!$Tag!!'>';

   Return (Result);

 End AppendXMLTag;

 /*===================================================================*/
 /* SendMessageToMQ                                                   */
 /*===================================================================*/
  SendMessageToMQ: Proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   dcl AttCorrelID                     char (24)      init('');
   dcl DocumentMQPrty                  bin fixed(31)  init(9);

   Call YIDMQPT(addr(TopicQCommArea),
                     AttCorrelID,
                    (2 + 8192),
                     DocumentMQPrty,
                     length(MQMessage),
                     (addr(MQMessage)+2));

   Select(TopicQCommArea.$Reason);
     when(0) do;
       Call LogTrace(@Dflt,'T#21','Message Sent to MQ Successfully');
       Call LogTrace(@Dflt,'T#21',MQMessage);
       Call Logtrace(@Dflt,'Deep','Deeplink: ' !!XMLDocDeepLink);
       TotNotificationCnt = TotNotificationCnt + 1;
     end;
     other do;
       Call LogTrace(@Dflt,'T#22','Message Failed'!!
                                   TopicQCommArea.$Reason);
       Call LogTrace(@Dflt,'T#22',MQMessage);
       Call HandleException('E#26','YIDMQPT ','Unable to PUT Message');
     end;
   End;

 End SendMessageToMQ;

 /*===================================================================*/
 /* RetrieveMqRelatedData                                             */
 /*===================================================================*/
 RetrieveAndInitializeData: Proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   DB2CurrentTimestamp   = DB2_Current_Timestamp;
   msgTimestamp.Filler3  = 'T';
   msgTimestamp.Filler4  = ':';
   msgTimestamp.Filler5  = ':';
   msgTimestamp.TimeZone = 'Z';

   RZ = YYENVX('NODE');
   Call LogTrace(@Dflt,'EnvT',RZ);

   DeepLinkEnv = 'DeepLink_'!!RZ;
   DocDeepLink = RetrieveDBoxConfig('*','Notification',
                                    DeepLinkEnv);
   If  DocDeepLink = ''
   then Call HandleException('E#46','########',
                             'Unable to Retrieve DeepLink for RZ:'!!RZ);
   Call Logtrace(@Force,'Deep','Deep-URL: ' !!DocDeepLink);

   CommonTopicName = RetrieveDBoxConfig('*',
                                        'Notification','');
   If CommonTopicName = ''
   then Call HandleException('E#47','########',
                             'Unable to Retrieve Common queue name');

   TotOpenTopicQCnt   = 0;
   TotNotificationCnt = 0;
 End RetrieveAndInitializeData;

  /*   END %INCLUDE YXCACKL */
 ;          /* Copybook for MQ notification         */

 /*-------------------------------------------------------------------*/
 /* Communication structure for calling YCDSGET                       */
 /*-------------------------------------------------------------------*/
  /* BEGIN %INCLUDE YCDSGET */
 /****************************************** Stand per 12.11.10 *******/
 /* Deklarationen und Inits f|r            ***********************    */
 /* YCDSGET                                * Membername YCDSGET  *    */
 /*                                        ***********************    */
 /*                                        * KCAB 321            *    */
 /*                                        ***********************    */
 /*                                                                   */
 /*********************************************************************/
  /* BEGIN %INCLUDE YCDSGET# */
 /* YCDSGET 'lesen des TCD100'                                        */
 /*** Verantwortlich:                                               ***/
 /*** - SIEHE  HTTP://SIT.CSINTRA.NET/SEARCH.ASP?OBJECT=YCDSGET     ***/
 dcl   YCDSGET    entry
                  (ptr                     /* I - addr(YCDSGETK)      */
                  )
                  options (fetchable);


  /*   END %INCLUDE YCDSGET# */

 dcl 1  ycdSGetK,
  /* BEGIN %INCLUDE YCDSGETK */
 /*********************************************************************/
 /* Kommunikationsstruktur f|r             ***********************    */
 /* YCDSGET                                * Membername YCDSGETK *    */
 /*                                        ***********************    */
 /*                                        * KSXI 4              *    */
 /*                                        ***********************    */
 /*                                                                   */
 /*********************************************************************/
 /*    Letzte Source-Dnderung:   17. Aug. 2010   16:18   A224707      */
 /*********************************************************************/
      /*--------------------------------------------------------------*/
      /* Input                                                        */
      /*--------------------------------------------------------------*/
      2 cdSGet_Cif      char(12),     /* CIF-Nummer                   */
      2 cdSGet_UWI      char(20),     /* UWI des Kunden/Partners      */
      2 cdSGet_SQLCA    ptr,          /* Pointer SQLCA                */
      2 cdSGet_PPool    ptr,          /* Pointer auf Pool-Record      */
                                      /*  IOSET ' ': TCD100           */
                                      /*  IOSET '1': TCD100P1         */
                                      /*  IOSET '2': TCD100P2         */
      2 cdSGet_Puts     char(01),     /* Testputs                     */
                                      /* 'Y' aktivieren               */
      2 cdSGet_PutPID   char(08),     /* CDSGet_Puts = 'Y' - Setzer   */
      2 cdSGet_IOSet    char(01),     /* Level 1, 2 oder '' wdhlen    */
                                      /* ' '  liefert alle Daten      */
                                      /* '1'  liefert haeufig verwen- */
                                      /*      dete Daten Set 1        */
                                      /* '2'  liefert hauefig verwen- */
                                      /*      dete Daten Set 2        */
      2 cdSGet_Typ      char(01),     /* 'A' Aktiv-POOL               */
                                      /* 'I' Aktiv-POOL/inaktiv-POOL  */
                                      /* 'F' Aktiv-POOL/fiktiv-POOL   */
                                      /*  -> Resultat in cdsGet_Status*/
      2 *               char(01)      /* PADDING                      */
                        init (''),
      2 cdSGet_PTable   ptr,          /* (nicht mehr verwenden)       */
                                      /* daf|r YYITIG im PCB f|r      */
                                      /* absolute 7*24-Fdhigkeit      */
                                      /* siehe Dokumentation          */
      2 cdSGet_SYSPRINT file variable,/* (nicht mehr verwenden)       */
      2 cdSGet_ResIn    char(20)      /* (nicht mehr verwenden)       */
                        init (''),
      /*--------------------------------------------------------------*/
      /* Output                                                       */
      /*--------------------------------------------------------------*/
      2 cdSGet_RC       bin fixed(31),/* Returncode                   */
                                      /*  0 ok                        */
                                      /*------------------------------*/
                                      /* Aufrufparameter              */
                                      /*------------------------------*/
                                      /*  3 CDSGet_Cif oder CDSGet_UWI*/
                                      /*    obligatorisch             */
                                      /*  5 CDSGet_SQLCA obligatorisch*/
                                      /*  6 CDSGet_PPool obligatorisch*/
                                      /*  7 CDSGET_IOSet muss 1, 2    */
                                      /*                 oder '' sein */
                                      /*  8 CDSGet_Puts falsch        */
                                      /* 10 CDSGet_PutPID obligator.  */
                                      /*    oder formal falsch        */
                                      /*------------------------------*/
                                      /* allgemeine Fehler            */
                                      /*------------------------------*/
                                      /* 11 CIF nicht gefunden        */
                                      /* 12 Pool nicht zur Verf|gung  */
                                      /*------------------------------*/
                                      /* SQL-Fehler                   */
                                      /*------------------------------*/
                                      /* 21 SQL-Fehler                */
      2 cdSGet_RCMeld   char(08),     /* erweiterte Meldung zu RC     */
      2 cdSGet_SQLCode  bin fixed(31),/* (nicht mehr verwenden)       */
      2 cdSGet_SQLState char(05),     /* (nicht mehr verwenden)       */
      2 cdSGet_Status   char(01),     /* A: aktive CIF                */
                                      /* I: inaktives CIF             */
                                      /* F: fiktives  CIF             */
      2 cdSGet_ResOut   char(13);     /* Reserve Output               */
  /*   END %INCLUDE YCDSGETK */

 dcl PycdSGet       ptr;
 PycdSGet = addr(ycdSGetK);

  /* BEGIN %INCLUDE YCDSGETI */
 /********************************************************************/
 /* Init der Kommunikationsstruktur        ***********************    */
 /* YCDSGET                                * Membername YCDSGETI *    */
 /*                                        ***********************    */
 /*                                        * KSXI 4              *    */
 /*                                        ***********************    */
 /*                                                                   */
 /*********************************************************************/

 cdSGet_Cif       = ' ';              /* Suchargument Cif-Nummer      */
 cdSGet_UWI       = ' ';              /* UWI des Kunden/Partners      */
 cdSGet_SQLCA     = null();           /* Pointer SQLCA                */
 cdSGet_PPool     = null();           /* Pointer auf Record TCD100    */
 cdSGet_Puts      = 'N';              /* Testputs                     */
 cdSGet_PutPID    = ' ';              /* CDSGet_Puts = 'Y' - Setzer   */
 cdSGet_IOSet     = ' ';              /* Level 1, 2 oder '' wdhlen    */
 cdSGet_PTable    = null();
 cdSGet_Typ       = 'A';              /* Art von CIF                  */

  /*   END %INCLUDE YCDSGETI */
  /*   END %INCLUDE YCDSGET */
  /* BEGIN %INCLUDE YCDGETK */
 /********************************************************************/
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   15. Aug. 2003   13:00   A430378     */
 /*                                                                  */
 /********************************************************************/
 /* Deklarationen und Inits f|r            ***********************    */
 /* ycdgetk                                * Membername ycdgetk  *    */
 /* KUHAT eines CIFs lesen und liefern     ***********************    */
 /*                                        * S.Gerber     KASK 21*    */
 /*                                        ***********************    */
 /*                                        * LM 08.11.2002 / SG  *    */
 /* ycdgetk ist CICS-fdhig !               ***********************    */
 /*********************************************************************/
 dcl 1  ycdgetkK,
  /* BEGIN %INCLUDE YCDGETKK */
 /********************************************************************/
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   15. Aug. 2003   14:20   A430378     */
 /*                                                                  */
 /********************************************************************/
 /* Kommunikationsstruktur f|r             ***********************    */
 /* YcdGetK                                * Membername YcdGetKK *    */
 /*                                        ***********************    */
 /*                                        * S.Gerber     KASK 21*    */
 /*                                        ***********************    */
 /*                                        * LM 09.05.2003 / GS  *    */
 /*                                        ***********************    */
 /*********************************************************************/
      /*--------------------------------------------------------------*/
      /* Eye Catcher                                                  */
      /*--------------------------------------------------------------*/
      2 cdGetK_Eye      char(12),     /* Eye Catcher                  */
      /*--------------------------------------------------------------*/
      /* Input                                                        */
      /*--------------------------------------------------------------*/
      2 cdGetK_in_Proc entry(ptr),    /* Verarbeitungsprozedur im auf-*/
                                      /* rufenden Applikationspgm. F|r*/
                                      /* jeden gefundenen Eintrag wird*/
                                      /* die Verarbeitungsprozedur    */
                                      /* einmal aufgerufen.           */
      2 cdGetK_in_SQLCA ptr,          /* Pointer auf SQLCA            */
      2 cdGetK_in_PWORK ptr,          /* Ptr. f|r Transfer von Daten  */
                                      /* zwischen aufrufendem Programm*/
                                      /* und Verarbeitungsprozedur    */
      2 cdGetK_in_UWI       char(20), /* UWI des HAT-Types            */
                                      /* falls vorhanden, werden die  */
                                      /* in_TYP nicht beruecksichtigt */
      2 cdGetK_in_UWI_CIF   char(20), /* UWI des Partners (Kunde/CIF) */
                                      /* Hat Prioritdt: das heisst    */
                                      /* wenn vorhanden, dann damit   */
                                      /* zugreifen.                   */
      2 cdGetK_in_TYP_CIF   char(04), /* Typ der UWI_CIF              */
                                      /* '0001' f|r CIF               */
                                      /* weitere bei Projektteam      */
                                      /* in Arbeit                    */
      2 cdGetK_in_CIF       char(12), /* Als betriebliche Nummer ist  */
                                      /* ein CIF g|ltig. Anstatt der  */
                                      /* UWI des Partners kann auch   */
                                      /* mit der betrieblichen Nummer */
                                      /* zugegriffen werden.          */
      2 cdGetK_in_TS        char(26), /* Timestamp. Es werden die zu  */
                                      /* diesem Zeitpunkt g|ltigen    */
                                      /* Daten aufbereitet. Format    */
                                      /* 'YYYY-MM-DD-HH.MM.SS.nnnnnn' */
                                      /* Beispiel: '2002-04-24-17.23. */
                                      /* 12.000000' Wenn CDGETK_TS    */
                                      /* nicht |bergeben wird, werden */
                                      /* die aktuell g|ltigen Daten   */
                                      /* aufbereitet.                 */
      2 cdGetK_in_TS_END    char(26), /* Timestamp f|r obere Grenze   */
                                      /* bei Zugriff. Wird nichts ab- */
                                      /* gef|llt, wird unendlich ge-  */
                                      /* nommen.                      */
                                      /* Anforderung aus FRONTNET     */
                                      /* 12.11.2004                   */
      2 cdGetK_in_TYP(10)   char(06), /* Hier kann ein gew|nschter    */
                                      /* HAT-Typ mitgegeben werden.   */
                                      /* Ist er leer und in_UWI auch  */
                                      /* werden alle Daten geliefert  */
      2 cdGetK_in_SORT      char(01), /* Sortierung nach TYP aufstei- */
                                      /* gend und Datum absteigend.   */
                                      /* (fuer Online gedacht)        */
      2 cdGetK_in_EXTENSION char(01), /* Hier kann mit 'Y' gesteuert  */
                                      /* werden, ob allfdllig zu-     */
                                      /* sdtzlich Daten gew|nscht     */
                                      /* werden                       */
      2 cdGetK_in_PUTS      char(01), /* Testputs aktivieren:         */
                                      /* 'Y' = Testputs in YCDGETK    */
                                      /* aktivieren. Die Testputs     */
                                      /* erleichtern die Fehlersuche  */
                                      /* bei der Programmentwicklung. */
                                      /* nicht 'Y' = Testputs in      */
                                      /* YCDGETK nicht aktivieren     */
      2 cdGetK_in_PUTPID    char(08), /* PID des "Put-Veranl." abf|lle*/
                                      /*                              */
      2 cdGetK_in_APPROVED  char(01), /* Default ' '                  */
                                      /* wird nur in Approval fuer    */
                                      /* Erfassung via CI32/CORBA ge- */
                                      /* braucht                      */
      2 cdGetK_in_RESERVE   char(20), /* Reserve                      */
      /*--------------------------------------------------------------*/
      /* Output                                                       */
      /*--------------------------------------------------------------*/
      2 cdGetK_out_RC   bin fixed(31),/* Returncode                   */
                                      /*------------------------------*/
                                      /* 00-09 VERARBEITUNG FEHLERFREI*/
                                      /*------------------------------*/
                                      /*  00 Verarbeitung fehlerfrei  */
                                      /*  05 EXISTS OK (JA)           */
                                      /*  09 Keine Daten gefunden     */
                                      /*     (dieser Fehler wird auch */
                                      /*     dann geliefert wenn      */
                                      /*     aufgrund des Inputs gar  */
                                      /*     keine oder nicht alle    */
                                      /*     Daten gefunden werden    */
                                      /*     kvnnen).                 */
                                      /*------------------------------*/
                                      /* 10-19 FEHLER BEI DEN AUF-    */
                                      /*       RUFPARAMETERN          */
                                      /*------------------------------*/
                                      /* 10 cdGetK_Puts/PutPID falsch */
                                      /* 14 Timestamp falsch          */
                                      /* 15 Verarbeitungs-Proc fehlt  */
                                      /* 16 PID nicht abgef|llt       */
                                      /*------------------------------*/
                                      /* 20-29 ALLGEMEINE FEHLER      */
                                      /*------------------------------*/
                                      /* 20 Table nicht verf|gbar     */
                                      /* 21 SQL-Fehler von Tab TCD180 */
                                      /* 22 YYITIG RC = 100           */
                                      /* 23 YYITIG RC not ok(^0, ^100)*/
                                      /* 29 SQL-Fehler                */
                                      /*------------------------------*/
      2 cdGetK_out_UWI_CIF CHAR(20);  /* UWI des gefunden CIF         */
                                      /* kann f|r neuen Zugriff f|r   */
                                      /* dieses CIF benutzt werden    */
                                      /* erspart DB2-Zugriff f|r      */
                                      /* CIF-> CIF-UWI                */
  /*   END %INCLUDE YCDGETKK */
 dcl ycdgetk        entry(ptr);
 dcl Pycdgetk       ptr;
 Pycdgetk = addr(ycdgetkK);

 cdGetK_Eye               = '#@YCDGETK@#';
 cdGetK_in_Proc           = ycdgetk_dummy;
 cdGetK_in_SQLCA          = null();
 cdGetK_in_UWI            = '';
 cdGetK_in_UWI_CIF        = '';
 cdGetK_in_TYP_CIF        = '0001';
 cdGetK_in_CIF            = '';
 cdGetK_in_TS             = '';
 cdGetK_in_TS_END         = '';
 cdGetK_in_TYP            = '';
 cdGetK_in_SORT           = '';
 cdGetK_in_EXTENSION      = '';
 cdGetK_in_PUTS           = '';
 cdGetK_in_PUTPID         = '';
 cdGetK_in_APPROVED       = '';
 cdGetK_in_RESERVE        = '';
 cdGetK_out_RC            = 0;

 ycdgetk_dummy: proc(p_dummy);
 dcl p_dummy ptr;
   cdGetK_out_RC = 15;                 /* Verarb-Proc nicht gefuellt */
 end;
  /*   END %INCLUDE YCDGETK */

 dcl tcd100_area                  char(1500);
 dcl 1 tcd100 based(cdSGet_Ppool),
  /* BEGIN %INCLUDE TCD100 */
 /********************************************* Stand per: 10.05.2013 */
 /* CIF-Get-Pool (universelle Schnittstelle "alle" Stamm- und         */
 /*               Adress-Daten).                                      */
 /*                                                                   */
 /* Unterprogramme/Module, die dieses Copylib verwenden, m|ssen       */
 /* im SIT erfasst sein.                                              */
 /* Grund: automatische Information bei Strukturdnderungen.           */
 /*                                                                   */
 /*********************************************************************/
 2 CD100001 CHAR(12)            ,    /* CD3902 CIF-Nummer             */
 2 CD100002 CHAR(20)            ,    /* CD3903 UWI Partner            */
 2 CD100008 CHAR(26)            ,    /* Techn. Mutationsdatum/Zeit    */
 2 CD100020 CHAR(10)            ,    /* CD0310 Datum erste Bez.Aufn.  */
 2 CD100021 CHAR(10)            ,    /* CD0311 Datum letzte Bez.Aufg. */
 2 CD100022 CHAR(10)            ,    /* CD0312 Datum CIF-Ervffnung    */
 2 CD100023 CHAR(3)             ,    /* CD0317 Kundenart              */
 2 CD100024 CHAR(3)             ,    /* CD0318 - Reserve              */
 2 CD100025 CHAR(3)             ,    /* CD0319 Zentr.Bearbeitungscode */
 2 CD100026 CHAR(3)             ,    /* CD0320 Kundensegmentcode      */
 2 CD100027 CHAR(3)             ,    /* CD0321 Bearbeitungsc. Filiale */
 2 CD100028 CHAR(10)            ,    /* CD0322 Bearbeitungsdatum      */
 2 CD100029 DEC FIXED(7,0)      ,    /* CD0323 Betriebsgrvsse         */
 2 CD100030 CHAR(4)             ,    /* CD0326 Bilanzdatum            */
 2 CD100031 CHAR(6)             ,    /* CD0327 Bilanzeinreichedatum   */
 2 CD100032 CHAR(1)             ,    /* CD0328 Bilanzeinreichepflicht */
 2 CD100033 CHAR(7)             ,    /* CD0329 - Reserve              */
 2 CD100034 CHAR(7)             ,    /* CD0330 - Reserve              */
 2 CD100035 CHAR(7)             ,    /* CD0331 - Reserve              */
 2 CD100036 CHAR(5)             ,    /* CD0332 - Reserve              */
 2 CD100060 CHAR(3)             ,    /* CD0417 Domizil                */
 2 CD100080 CHAR(35)            ,    /* CD06111 Kurzadresse Zeile 1   */
 2 CD100081 CHAR(35)            ,    /* CD06112 Kurzadresse Zeile 2   */
 2 CD100082 CHAR(24)            ,    /* CD0614 - Reserve              */
 2 CD100083 CHAR(24)            ,    /* CD0615 - Reserve              */
 2 CD100084 CHAR(24)            ,    /* CD0616 - Reserve              */
 2 CD100100 CHAR(35)            ,    /* CD09101 Adresse des Inhabers1 */
 2 CD100101 CHAR(35)            ,    /* CD09102 Adresse des Inhabers2 */
 2 CD100102 CHAR(35)            ,    /* CD09103 Adresse des Inhabers3 */
 2 CD100103 CHAR(35)            ,    /* CD09104 Adresse des Inhabers4 */
 2 CD100104 CHAR(35)            ,    /* CD09105 Adresse des Inhabers5 */
 2 CD100105 BIN FIXED(15)       ,    /* CD0911 Start Anrede           */
 2 CD100106 BIN FIXED(15)       ,    /* CD0912 Ldnge Anrede           */
 2 CD100107 BIN FIXED(15)       ,    /* CD0913 Start Titel            */
 2 CD100108 BIN FIXED(15)       ,    /* CD0914 Ldnge Titel            */
 2 CD100109 BIN FIXED(15)       ,    /* CD0915 Start Vorname          */
 2 CD100110 BIN FIXED(15)       ,    /* CD0916 Ldnge Vorname          */
 2 CD100111 BIN FIXED(15)       ,    /* CD0917 Start 1. Name          */
 2 CD100112 BIN FIXED(15)       ,    /* CD0918 Ldnge 1. Name          */
 2 CD100113 BIN FIXED(15)       ,    /* CD0919 Start 2. Name          */
 2 CD100114 BIN FIXED(15)       ,    /* CD0920 Ldnge 2. Name          */
 2 CD100115 BIN FIXED(15)       ,    /* CD0921 Start Berufsbezeichnung*/
 2 CD100116 BIN FIXED(15)       ,    /* CD0922 Ldnge Berufsbezeichnung*/
 2 CD100117 BIN FIXED(15)       ,    /* CD0923 Start Hausbezeichnung  */
 2 CD100118 BIN FIXED(15)       ,    /* CD0924 Ldnge Hausbezeichnung  */
 2 CD100119 BIN FIXED(15)       ,    /* CD0925 Start Strasse          */
 2 CD100120 BIN FIXED(15)       ,    /* CD0926 Ldnge Strasse          */
 2 CD100121 BIN FIXED(15)       ,    /* CD0927 Start Nummer           */
 2 CD100122 BIN FIXED(15)       ,    /* CD0928 Ldnge Nummer           */
 2 CD100123 BIN FIXED(15)       ,    /* CD0929 Start Appartement      */
 2 CD100124 BIN FIXED(15)       ,    /* CD0930 Ldnge Appartement      */
 2 CD100125 BIN FIXED(15)       ,    /* CD0931 Start Postfach         */
 2 CD100126 BIN FIXED(15)       ,    /* CD0932 Ldnge Postfach         */
 2 CD100127 BIN FIXED(15)       ,    /* CD0933 Start Landeskurzzeichen*/
 2 CD100128 BIN FIXED(15)       ,    /* CD0934 Ldnge Landeskurzzeichen*/
 2 CD100129 BIN FIXED(15)       ,    /* CD0935 Start Land             */
 2 CD100130 BIN FIXED(15)       ,    /* CD0936 Ldnge Land             */
 2 CD100131 BIN FIXED(15)       ,    /* CD0937 Start PLZ              */
 2 CD100132 BIN FIXED(15)       ,    /* CD0938 Ldnge PLZ              */
 2 CD100133 BIN FIXED(15)       ,    /* CD0939 Start Ort              */
 2 CD100134 BIN FIXED(15)       ,    /* CD0940 Ldnge Ort              */
 2 CD100135 BIN FIXED(15)       ,    /* CD0941 Start Provinz          */
 2 CD100136 BIN FIXED(15)       ,    /* CD0942 Ldnge Provinz          */
 2 CD100137 BIN FIXED(15)       ,    /* CD0943 Start Branch-Office    */
 2 CD100138 BIN FIXED(15)       ,    /* CD0944 Ldnge Branch-Office    */
 2 CD100139 BIN FIXED(15)       ,    /* CD0945 Start c/o-Vermerk      */
 2 CD100140 BIN FIXED(15)       ,    /* CD0946 Ldnge c/o-Vermerk      */
 2 CD100141 BIN FIXED(15)       ,    /* CD0947 Start Zu-Handen        */
 2 CD100142 BIN FIXED(15)       ,    /* CD0948 Ldnge Zu-Handen        */
 2 CD100143 BIN FIXED(15)       ,    /* CD0949 Start Anredezusatz     */
 2 CD100144 BIN FIXED(15)       ,    /* CD0950 Ldnge Anredezusatz     */
 2 CD100160 BIN FIXED(15)       ,    /* CD1114 Anzahl Exemplare       */
 2 CD100161 CHAR(7)             ,    /* CD1115 Leitweg                */
 2 CD100162 CHAR(1)             ,    /* CD1117 PTT-Tax                */
                                     /*-------------------------------*/
                                     /* ADRESSFLAGS               Y/N */
 2 CD100170 CHAR(1)             ,    /* 1 -Reserve-                   */
 2 CD100171 CHAR(1)             ,    /* 2 -Reserve-                   */
 2 CD100172 CHAR(1)             ,    /* 3 -Reserve-                   */
 2 CD100173 CHAR(1)             ,    /* 4 Einschreiben                */
 2 CD100174 CHAR(1)             ,    /* 5 -Reserve                    */
 2 CD100175 CHAR(1)             ,    /* 6 Handgeschriebene Adresse    */
 2 CD100176 CHAR(1)             ,    /* 7 -Reserve                    */
 2 CD100177 CHAR(1)             ,    /* 8 Tagfertiger Versand         */
 2 CD100178 CHAR(1)             ,    /* 9 -Reserve-                   */
 2 CD100179 CHAR(1)             ,    /* 10 Im Hause                   */
 2 CD100180 CHAR(1)             ,    /* 11 Interner Versand via PVS   */
 2 CD100181 CHAR(1)             ,    /* 12 Per Einschluss             */
 2 CD100182 CHAR(1)             ,    /* 13 -Reserve-                  */
 2 CD100183 CHAR(1)             ,    /* 14 Unterdr|ckung WS-Output    */
 2 CD100184 CHAR(1)             ,    /* 15 Grossschrift-Format        */
 2 CD100185 CHAR(1)             ,    /* 16 Braille-Schrift            */
                                     /*-------------------------------*/
 2 CD100190 CHAR(7)             ,    /* CD2310 PIAS Mitarbeiter       */
                                     /*-------------------------------*/
                                     /* CIF-Flags                 Y/N */
 2 CD100200 CHAR(1)             ,    /* 1 -Reserve-                   */
 2 CD100201 CHAR(1)             ,    /* 2 Ist WINCO Kunde             */
 2 CD100202 CHAR(1)             ,    /* 3 -Reserve-                   */
 2 CD100203 CHAR(1)             ,    /* 4 -nicht verwenden!-          */
 2 CD100204 CHAR(1)             ,    /* 5 -nicht verwenden!-          */
 2 CD100205 CHAR(1)             ,    /* 6 Werbe-Output unterdr|cken   */
 2 CD100206 CHAR(1)             ,    /* 7 -Reserve-                   */
 2 CD100207 CHAR(1)             ,    /* 8 -Reserve-                   */
 2 CD100208 CHAR(1)             ,    /* 9 Edelmetalldepotstelle       */
 2 CD100209 CHAR(1)             ,    /* 10 Edelmetall-DST f. MSD-Deck */
 2 CD100210 CHAR(1)             ,    /* 11 -nicht verwenden!-         */
 2 CD100211 CHAR(1)             ,    /* 12 WR10-Ausschluss            */
 2 CD100212 CHAR(1)             ,    /* 13 -Reserve-                  */
 2 CD100213 CHAR(1)             ,    /* 14 -Reserve-                  */
 2 CD100214 CHAR(1)             ,    /* 15 Mitglied Konvention IX     */
 2 CD100215 CHAR(1)             ,    /* 16 Nummernkundengeb|hr        */
 2 CD100216 CHAR(1)             ,    /* 17 -Reserve-                  */
 2 CD100217 CHAR(1)             ,    /* 18 -nicht verwenden!-         */
 2 CD100218 CHAR(1)             ,    /* 19 -nicht verwenden!-         */
 2 CD100219 CHAR(1)             ,    /* 20 -nicht verwenden!-         */
 2 CD100220 CHAR(1)             ,    /* 21 -nicht verwenden!-         */
 2 CD100221 CHAR(1)             ,    /* 22 -nicht verwenden!-         */
 2 CD100222 CHAR(1)             ,    /* 23 -nicht verwenden!-         */
 2 CD100223 CHAR(1)             ,    /* 24 -nicht verwenden!-         */
 2 CD100224 CHAR(1)             ,    /* 25 EM-Kontrakt Ueberwachung   */
 2 CD100225 CHAR(1)             ,    /* 26 StV: Segregated Accounts   */
 2 CD100226 CHAR(1)             ,    /* 27 -Reserve-                  */
 2 CD100227 CHAR(1)             ,    /* 28 -Reserve-                  */
 2 CD100228 CHAR(1)             ,    /* 29 Sensal                     */
 2 CD100229 CHAR(1)             ,    /* 30 -nicht verwenden!-         */
 2 CD100230 CHAR(1)             ,    /* 31 -nicht verwenden!-         */
 2 CD100231 CHAR(1)             ,    /* 32 Sitzgesellschaft           */
 2 CD100232 CHAR(1)             ,    /* 33 Metall-Pos. Spezialkunde   */
 2 CD100233 CHAR(1)             ,    /* 34 -Reserve-                  */
 2 CD100234 CHAR(1)             ,    /* 35 -nicht verwenden!-         */
 2 CD100235 CHAR(1)             ,    /* 36 -Reserve-                  */
 2 CD100236 CHAR(1)             ,    /* 37 -nicht verwenden!-         */
 2 CD100237 CHAR(1)             ,    /* 38 -Reserve-                  */
 2 CD100238 CHAR(1)             ,    /* 39 -Reserve-                  */
 2 CD100239 CHAR(1)             ,    /* 40 Kontraktkontr. Geldmarkt   */
 2 CD100240 CHAR(1)             ,    /* 41 -Reserve-                  */
 2 CD100241 CHAR(1)             ,    /* 42 Telebanking-Vertrag        */
 2 CD100242 CHAR(1)             ,    /* 43 Handel Edelmetalle erlaubt */
 2 CD100243 CHAR(1)             ,    /* 44 -Reserve-                  */
 2 CD100244 CHAR(1)             ,    /* 45 -Reserve-                  */
 2 CD100245 CHAR(1)             ,    /* 46 Handel mit Dev.Opt.erlaubt */
 2 CD100246 CHAR(1)             ,    /* 47 -Reserve-                  */
 2 CD100247 CHAR(1)             ,    /* 48 -Reserve-                  */
 2 CD100248 CHAR(1)             ,    /* 49 ZV-Spesenbefreiung         */
 2 CD100249 CHAR(1)             ,    /* 50 -Reserve-                  */
 2 CD100250 CHAR(1)             ,    /* 51 -nicht verwenden!-         */
 2 CD100251 CHAR(1)             ,    /* 52 CIF SignBase gef|hrt       */
 2 CD100252 CHAR(1)             ,    /* 53 -nicht verwenden!-         */
 2 CD100253 CHAR(1)             ,    /* 54 MWSt-Pflichtbefreiung      */
 2 CD100254 CHAR(1)             ,    /* 55 DBA-Verzicht               */
 2 CD100255 CHAR(1)             ,    /* 56 MWSt Organschaft           */
 2 CD100256 CHAR(1)             ,    /* 57 MWSt Innenumsatz           */
 2 CD100257 CHAR(1)             ,    /* 58 -Reserve-                  */
 2 CD100258 CHAR(1)             ,    /* 59 -nicht verwenden!-         */
 2 CD100259 CHAR(1)             ,    /* 60 -Reserve-                  */
 2 CD100260 CHAR(1)             ,    /* 61 -nicht verwenden!-         */
 2 CD100261 CHAR(1)             ,    /* 62 CIF Image Link gef|hrt     */
 2 CD100262 CHAR(1)             ,    /* 63 CIF ist EAM                */
 2 CD100263 CHAR(1)             ,    /* 64 Kunde wird von EAM betreut */
 2 CD100264 CHAR(1)             ,    /* 65 Verm. Winterthurvers.->CS  */
 2 CD100265 CHAR(1)             ,    /* 66 Verm. CS->Winterthurvers.  */
 2 CD100266 CHAR(1)             ,    /* 67 -Reserve-                  */
 2 CD100267 CHAR(1)             ,    /* 68 Investment-Kunde           */
 2 CD100268 CHAR(1)             ,    /* 69 -Reserve-                  */
 2 CD100269 CHAR(1)             ,    /* 70 -Reserve-                  */
 2 CD100270 CHAR(1)             ,    /* 71 -Reserve-                  */
 2 CD100271 CHAR(1)             ,    /* 72 -Reserve-                  */
 2 CD100272 CHAR(1)             ,    /* 73 PK Quellensteuerbefreit    */
 2 CD100273 CHAR(1)             ,    /* 74 Kontraktkontr. Devisen     */
 2 CD100274 CHAR(1)             ,    /* 75 Aggregation CIF-Warnungen  */
 2 CD100275 CHAR(1)             ,    /* 76 Aggregation Konto-Warnungen*/
 2 CD100276 CHAR(1)             ,    /* 77 Aggregation Depot-Warnungen*/
 2 CD100277 CHAR(1)             ,    /* 78 US Persons-Withholding Tax */
 2 CD100278 CHAR(1)             ,    /* 79 -Reserve-                  */
 2 CD100279 CHAR(1)             ,    /* 80 -Reserve-                  */
 2 CD100280 CHAR(1)             ,    /* 81 -Reserve-                  */
 2 CD100281 CHAR(1)             ,    /* 82 -Reserve-                  */
 2 CD100282 CHAR(1)             ,    /* 83 -Reserve-                  */
 2 CD100283 CHAR(1)             ,    /* 84 -Reserve-                  */
 2 CD100284 CHAR(1)             ,    /* 85 Fonds-Beneficiary ist CSAM */
 2 CD100285 CHAR(1)             ,    /* 86 -Reserve-                  */
 2 CD100286 CHAR(1)             ,    /* 87 -Reserve-                  */
 2 CD100287 CHAR(1)             ,    /* 88 -Reserve-                  */
 2 CD100288 CHAR(1)             ,    /* 89 -Reserve-                  */
                                     /*-------------------------------*/
 2 CD100300 BIN FIXED(15)       ,    /* CD4503 24 Applikationssprache */
 2 CD100301 BIN FIXED(15)       ,    /* CD4503 25 Vertragssprache     */
 2 CD100310 CHAR(4)             ,    /* CD4602 0004 Brokernummer      */
 2 CD100311 CHAR(7)             ,    /* CD4602 0005 Effektenhdndlernr */
 2 CD100312 CHAR(4)             ,    /* CD4602 0006 Depotstellennr    */
 2 CD100313 CHAR(11)            ,    /* CD4602 0007 Clearingnummer    */
 2 CD100320 CHAR(10)            ,    /* CD7711 - Reserve              */
 2 CD100321 CHAR(10)            ,    /* CD7712 - Reserve              */
 2 CD100322 CHAR(8)             ,    /* CD7714 Geburtsdatum           */
 2 CD100323 CHAR(8)             ,    /* CD7715 Todesdatum             */
 2 CD100324 CHAR(8)             ,    /* CD7716 Gr|ndungsdatum         */
 2 CD100325 CHAR(3)             ,    /* CD7717 Nationalitdt           */
 2 CD100326 CHAR(3)             ,    /* CD7718 2.Nationalitdt         */
 2 CD100327 CHAR(1)             ,    /* CD7719 Zivilstand             */
 2 CD100328 CHAR(2)             ,    /* CD7721 - Reserve              */
 2 CD100329 CHAR(20)            ,    /* -Reserve-                     */
 2 CD100330 CHAR(1)             ,    /* CD7724 Ausldnderkategorie     */
 2 CD100331 CHAR(4)             ,    /* CD7725 - Reserve              */
 2 CD100332 CHAR(4)             ,    /* CD7732 - Reserve              */
 2 CD100333 CHAR(1)             ,    /* CD7720 - Reserve              */
 2 CD100334 CHAR(4)             ,    /* CD7710 - Reserve              */
 2 CD100003 CHAR(2)             ,    /* CD3910 - Reserve              */
 2 CD100350 CHAR(4)             ,    /* CD0420 - Reserve              */
 2 CD100351 CHAR(3)             ,    /* CD0421 - Reserve              */
 2 CD100360 CHAR(1)             ,    /* CD1310 Anredecode             */
 2 CD100410 CHAR(10)            ,    /* CD2410 Letztes Mut.Dat Adr    */
 2 CD100411 CHAR(8)             ,    /* CD2411 Mutations-PID Adresse  */
 2 CD100412 CHAR(10)            ,    /* CD2410 Letztes Mut.Dat Stamm  */
 2 CD100413 CHAR(8)             ,    /* CD2411 Mutations-PID Stamm    */
 2 CD100414 CHAR(10)            ,    /* CD2410 Letztes Mut.Dat Derivat*/
 2 CD100415 CHAR(8)             ,    /* CD2411 Mutations-PID Derivat  */
 2 CD100335 CHAR(1)             ,    /* CD7731 - Reserve              */
 2 CD100336 CHAR(4)             ,    /* CD7733 - Reserve              */
 2 CD100337 CHAR(2)             ,    /* CD7734 - Reserve              */
 2 CD100338 CHAR(3)             ,    /* CD7735 Dom Errichter          */
 2 CD100339 CHAR(3)             ,    /* CD7736 Nat Errichter          */
 2 CD100340 CHAR(2)             ,    /* CD7737 Offshore-Code          */
 2 CD100341 CHAR(2)             ,    /* CD7738 Produkteart            */
 2 CD100004 CHAR(4)             ,    /* CD3911 Businessunit numerisch */
 2 CD100005 CHAR(4)             ,    /* CD3912 LOGO-Code reserviert   */
 2 CD100430 CHAR(20)            ,    /* CD301x G Tel H.Nr. aufbereitet*/
 2 CD100431 CHAR(20)            ,    /* CD301x P Tel H.Nr. aufbereitet*/
 2 CD100352 CHAR(2)             ,    /* CD0424 Plz-Kanton             */
 2 CD100353 CHAR(2)             ,    /* CD0425 Plz-Kanton abweichend  */
                                     /* Betreuungstellen: z.B.        */
                                     /*            A599263            */
                                     /*    0011CIASCIAS22             */
                                     /* (ext.Form via OE-Modul)       */
 2 CD100450 CHAR(16)            ,    /* int.OE-Form PID-KV            */
 2 CD100451 CHAR(16)            ,    /* int.OE-Form Delkr.verantw.St. */
 2 CD100452 CHAR(16)            ,    /* int.OE-Form Kundenb|ro        */
 2 CD100453 CHAR(16)            ,    /* int.OE-Form CIFO              */
 2 CD100163 CHAR(16)            ,    /* CD11?? int.OE-Form Leitweg RES*/
 2 CD100342 CHAR(8)             ,    /* CD7739 Berufscode             */
 2 CD100343 CHAR(6)                  /* CD7740 Branchencode           */
  /*   END %INCLUDE TCD100 */
 ;

 dcl 1 CIFDetails,
  /* BEGIN %INCLUDE TCD100 */
 /********************************************* Stand per: 10.05.2013 */
 /* CIF-Get-Pool (universelle Schnittstelle "alle" Stamm- und         */
 /*               Adress-Daten).                                      */
 /*                                                                   */
 /* Unterprogramme/Module, die dieses Copylib verwenden, m|ssen       */
 /* im SIT erfasst sein.                                              */
 /* Grund: automatische Information bei Strukturdnderungen.           */
 /*                                                                   */
 /*********************************************************************/
 2 CD100001 CHAR(12)            ,    /* CD3902 CIF-Nummer             */
 2 CD100002 CHAR(20)            ,    /* CD3903 UWI Partner            */
 2 CD100008 CHAR(26)            ,    /* Techn. Mutationsdatum/Zeit    */
 2 CD100020 CHAR(10)            ,    /* CD0310 Datum erste Bez.Aufn.  */
 2 CD100021 CHAR(10)            ,    /* CD0311 Datum letzte Bez.Aufg. */
 2 CD100022 CHAR(10)            ,    /* CD0312 Datum CIF-Ervffnung    */
 2 CD100023 CHAR(3)             ,    /* CD0317 Kundenart              */
 2 CD100024 CHAR(3)             ,    /* CD0318 - Reserve              */
 2 CD100025 CHAR(3)             ,    /* CD0319 Zentr.Bearbeitungscode */
 2 CD100026 CHAR(3)             ,    /* CD0320 Kundensegmentcode      */
 2 CD100027 CHAR(3)             ,    /* CD0321 Bearbeitungsc. Filiale */
 2 CD100028 CHAR(10)            ,    /* CD0322 Bearbeitungsdatum      */
 2 CD100029 DEC FIXED(7,0)      ,    /* CD0323 Betriebsgrvsse         */
 2 CD100030 CHAR(4)             ,    /* CD0326 Bilanzdatum            */
 2 CD100031 CHAR(6)             ,    /* CD0327 Bilanzeinreichedatum   */
 2 CD100032 CHAR(1)             ,    /* CD0328 Bilanzeinreichepflicht */
 2 CD100033 CHAR(7)             ,    /* CD0329 - Reserve              */
 2 CD100034 CHAR(7)             ,    /* CD0330 - Reserve              */
 2 CD100035 CHAR(7)             ,    /* CD0331 - Reserve              */
 2 CD100036 CHAR(5)             ,    /* CD0332 - Reserve              */
 2 CD100060 CHAR(3)             ,    /* CD0417 Domizil                */
 2 CD100080 CHAR(35)            ,    /* CD06111 Kurzadresse Zeile 1   */
 2 CD100081 CHAR(35)            ,    /* CD06112 Kurzadresse Zeile 2   */
 2 CD100082 CHAR(24)            ,    /* CD0614 - Reserve              */
 2 CD100083 CHAR(24)            ,    /* CD0615 - Reserve              */
 2 CD100084 CHAR(24)            ,    /* CD0616 - Reserve              */
 2 CD100100 CHAR(35)            ,    /* CD09101 Adresse des Inhabers1 */
 2 CD100101 CHAR(35)            ,    /* CD09102 Adresse des Inhabers2 */
 2 CD100102 CHAR(35)            ,    /* CD09103 Adresse des Inhabers3 */
 2 CD100103 CHAR(35)            ,    /* CD09104 Adresse des Inhabers4 */
 2 CD100104 CHAR(35)            ,    /* CD09105 Adresse des Inhabers5 */
 2 CD100105 BIN FIXED(15)       ,    /* CD0911 Start Anrede           */
 2 CD100106 BIN FIXED(15)       ,    /* CD0912 Ldnge Anrede           */
 2 CD100107 BIN FIXED(15)       ,    /* CD0913 Start Titel            */
 2 CD100108 BIN FIXED(15)       ,    /* CD0914 Ldnge Titel            */
 2 CD100109 BIN FIXED(15)       ,    /* CD0915 Start Vorname          */
 2 CD100110 BIN FIXED(15)       ,    /* CD0916 Ldnge Vorname          */
 2 CD100111 BIN FIXED(15)       ,    /* CD0917 Start 1. Name          */
 2 CD100112 BIN FIXED(15)       ,    /* CD0918 Ldnge 1. Name          */
 2 CD100113 BIN FIXED(15)       ,    /* CD0919 Start 2. Name          */
 2 CD100114 BIN FIXED(15)       ,    /* CD0920 Ldnge 2. Name          */
 2 CD100115 BIN FIXED(15)       ,    /* CD0921 Start Berufsbezeichnung*/
 2 CD100116 BIN FIXED(15)       ,    /* CD0922 Ldnge Berufsbezeichnung*/
 2 CD100117 BIN FIXED(15)       ,    /* CD0923 Start Hausbezeichnung  */
 2 CD100118 BIN FIXED(15)       ,    /* CD0924 Ldnge Hausbezeichnung  */
 2 CD100119 BIN FIXED(15)       ,    /* CD0925 Start Strasse          */
 2 CD100120 BIN FIXED(15)       ,    /* CD0926 Ldnge Strasse          */
 2 CD100121 BIN FIXED(15)       ,    /* CD0927 Start Nummer           */
 2 CD100122 BIN FIXED(15)       ,    /* CD0928 Ldnge Nummer           */
 2 CD100123 BIN FIXED(15)       ,    /* CD0929 Start Appartement      */
 2 CD100124 BIN FIXED(15)       ,    /* CD0930 Ldnge Appartement      */
 2 CD100125 BIN FIXED(15)       ,    /* CD0931 Start Postfach         */
 2 CD100126 BIN FIXED(15)       ,    /* CD0932 Ldnge Postfach         */
 2 CD100127 BIN FIXED(15)       ,    /* CD0933 Start Landeskurzzeichen*/
 2 CD100128 BIN FIXED(15)       ,    /* CD0934 Ldnge Landeskurzzeichen*/
 2 CD100129 BIN FIXED(15)       ,    /* CD0935 Start Land             */
 2 CD100130 BIN FIXED(15)       ,    /* CD0936 Ldnge Land             */
 2 CD100131 BIN FIXED(15)       ,    /* CD0937 Start PLZ              */
 2 CD100132 BIN FIXED(15)       ,    /* CD0938 Ldnge PLZ              */
 2 CD100133 BIN FIXED(15)       ,    /* CD0939 Start Ort              */
 2 CD100134 BIN FIXED(15)       ,    /* CD0940 Ldnge Ort              */
 2 CD100135 BIN FIXED(15)       ,    /* CD0941 Start Provinz          */
 2 CD100136 BIN FIXED(15)       ,    /* CD0942 Ldnge Provinz          */
 2 CD100137 BIN FIXED(15)       ,    /* CD0943 Start Branch-Office    */
 2 CD100138 BIN FIXED(15)       ,    /* CD0944 Ldnge Branch-Office    */
 2 CD100139 BIN FIXED(15)       ,    /* CD0945 Start c/o-Vermerk      */
 2 CD100140 BIN FIXED(15)       ,    /* CD0946 Ldnge c/o-Vermerk      */
 2 CD100141 BIN FIXED(15)       ,    /* CD0947 Start Zu-Handen        */
 2 CD100142 BIN FIXED(15)       ,    /* CD0948 Ldnge Zu-Handen        */
 2 CD100143 BIN FIXED(15)       ,    /* CD0949 Start Anredezusatz     */
 2 CD100144 BIN FIXED(15)       ,    /* CD0950 Ldnge Anredezusatz     */
 2 CD100160 BIN FIXED(15)       ,    /* CD1114 Anzahl Exemplare       */
 2 CD100161 CHAR(7)             ,    /* CD1115 Leitweg                */
 2 CD100162 CHAR(1)             ,    /* CD1117 PTT-Tax                */
                                     /*-------------------------------*/
                                     /* ADRESSFLAGS               Y/N */
 2 CD100170 CHAR(1)             ,    /* 1 -Reserve-                   */
 2 CD100171 CHAR(1)             ,    /* 2 -Reserve-                   */
 2 CD100172 CHAR(1)             ,    /* 3 -Reserve-                   */
 2 CD100173 CHAR(1)             ,    /* 4 Einschreiben                */
 2 CD100174 CHAR(1)             ,    /* 5 -Reserve                    */
 2 CD100175 CHAR(1)             ,    /* 6 Handgeschriebene Adresse    */
 2 CD100176 CHAR(1)             ,    /* 7 -Reserve                    */
 2 CD100177 CHAR(1)             ,    /* 8 Tagfertiger Versand         */
 2 CD100178 CHAR(1)             ,    /* 9 -Reserve-                   */
 2 CD100179 CHAR(1)             ,    /* 10 Im Hause                   */
 2 CD100180 CHAR(1)             ,    /* 11 Interner Versand via PVS   */
 2 CD100181 CHAR(1)             ,    /* 12 Per Einschluss             */
 2 CD100182 CHAR(1)             ,    /* 13 -Reserve-                  */
 2 CD100183 CHAR(1)             ,    /* 14 Unterdr|ckung WS-Output    */
 2 CD100184 CHAR(1)             ,    /* 15 Grossschrift-Format        */
 2 CD100185 CHAR(1)             ,    /* 16 Braille-Schrift            */
                                     /*-------------------------------*/
 2 CD100190 CHAR(7)             ,    /* CD2310 PIAS Mitarbeiter       */
                                     /*-------------------------------*/
                                     /* CIF-Flags                 Y/N */
 2 CD100200 CHAR(1)             ,    /* 1 -Reserve-                   */
 2 CD100201 CHAR(1)             ,    /* 2 Ist WINCO Kunde             */
 2 CD100202 CHAR(1)             ,    /* 3 -Reserve-                   */
 2 CD100203 CHAR(1)             ,    /* 4 -nicht verwenden!-          */
 2 CD100204 CHAR(1)             ,    /* 5 -nicht verwenden!-          */
 2 CD100205 CHAR(1)             ,    /* 6 Werbe-Output unterdr|cken   */
 2 CD100206 CHAR(1)             ,    /* 7 -Reserve-                   */
 2 CD100207 CHAR(1)             ,    /* 8 -Reserve-                   */
 2 CD100208 CHAR(1)             ,    /* 9 Edelmetalldepotstelle       */
 2 CD100209 CHAR(1)             ,    /* 10 Edelmetall-DST f. MSD-Deck */
 2 CD100210 CHAR(1)             ,    /* 11 -nicht verwenden!-         */
 2 CD100211 CHAR(1)             ,    /* 12 WR10-Ausschluss            */
 2 CD100212 CHAR(1)             ,    /* 13 -Reserve-                  */
 2 CD100213 CHAR(1)             ,    /* 14 -Reserve-                  */
 2 CD100214 CHAR(1)             ,    /* 15 Mitglied Konvention IX     */
 2 CD100215 CHAR(1)             ,    /* 16 Nummernkundengeb|hr        */
 2 CD100216 CHAR(1)             ,    /* 17 -Reserve-                  */
 2 CD100217 CHAR(1)             ,    /* 18 -nicht verwenden!-         */
 2 CD100218 CHAR(1)             ,    /* 19 -nicht verwenden!-         */
 2 CD100219 CHAR(1)             ,    /* 20 -nicht verwenden!-         */
 2 CD100220 CHAR(1)             ,    /* 21 -nicht verwenden!-         */
 2 CD100221 CHAR(1)             ,    /* 22 -nicht verwenden!-         */
 2 CD100222 CHAR(1)             ,    /* 23 -nicht verwenden!-         */
 2 CD100223 CHAR(1)             ,    /* 24 -nicht verwenden!-         */
 2 CD100224 CHAR(1)             ,    /* 25 EM-Kontrakt Ueberwachung   */
 2 CD100225 CHAR(1)             ,    /* 26 StV: Segregated Accounts   */
 2 CD100226 CHAR(1)             ,    /* 27 -Reserve-                  */
 2 CD100227 CHAR(1)             ,    /* 28 -Reserve-                  */
 2 CD100228 CHAR(1)             ,    /* 29 Sensal                     */
 2 CD100229 CHAR(1)             ,    /* 30 -nicht verwenden!-         */
 2 CD100230 CHAR(1)             ,    /* 31 -nicht verwenden!-         */
 2 CD100231 CHAR(1)             ,    /* 32 Sitzgesellschaft           */
 2 CD100232 CHAR(1)             ,    /* 33 Metall-Pos. Spezialkunde   */
 2 CD100233 CHAR(1)             ,    /* 34 -Reserve-                  */
 2 CD100234 CHAR(1)             ,    /* 35 -nicht verwenden!-         */
 2 CD100235 CHAR(1)             ,    /* 36 -Reserve-                  */
 2 CD100236 CHAR(1)             ,    /* 37 -nicht verwenden!-         */
 2 CD100237 CHAR(1)             ,    /* 38 -Reserve-                  */
 2 CD100238 CHAR(1)             ,    /* 39 -Reserve-                  */
 2 CD100239 CHAR(1)             ,    /* 40 Kontraktkontr. Geldmarkt   */
 2 CD100240 CHAR(1)             ,    /* 41 -Reserve-                  */
 2 CD100241 CHAR(1)             ,    /* 42 Telebanking-Vertrag        */
 2 CD100242 CHAR(1)             ,    /* 43 Handel Edelmetalle erlaubt */
 2 CD100243 CHAR(1)             ,    /* 44 -Reserve-                  */
 2 CD100244 CHAR(1)             ,    /* 45 -Reserve-                  */
 2 CD100245 CHAR(1)             ,    /* 46 Handel mit Dev.Opt.erlaubt */
 2 CD100246 CHAR(1)             ,    /* 47 -Reserve-                  */
 2 CD100247 CHAR(1)             ,    /* 48 -Reserve-                  */
 2 CD100248 CHAR(1)             ,    /* 49 ZV-Spesenbefreiung         */
 2 CD100249 CHAR(1)             ,    /* 50 -Reserve-                  */
 2 CD100250 CHAR(1)             ,    /* 51 -nicht verwenden!-         */
 2 CD100251 CHAR(1)             ,    /* 52 CIF SignBase gef|hrt       */
 2 CD100252 CHAR(1)             ,    /* 53 -nicht verwenden!-         */
 2 CD100253 CHAR(1)             ,    /* 54 MWSt-Pflichtbefreiung      */
 2 CD100254 CHAR(1)             ,    /* 55 DBA-Verzicht               */
 2 CD100255 CHAR(1)             ,    /* 56 MWSt Organschaft           */
 2 CD100256 CHAR(1)             ,    /* 57 MWSt Innenumsatz           */
 2 CD100257 CHAR(1)             ,    /* 58 -Reserve-                  */
 2 CD100258 CHAR(1)             ,    /* 59 -nicht verwenden!-         */
 2 CD100259 CHAR(1)             ,    /* 60 -Reserve-                  */
 2 CD100260 CHAR(1)             ,    /* 61 -nicht verwenden!-         */
 2 CD100261 CHAR(1)             ,    /* 62 CIF Image Link gef|hrt     */
 2 CD100262 CHAR(1)             ,    /* 63 CIF ist EAM                */
 2 CD100263 CHAR(1)             ,    /* 64 Kunde wird von EAM betreut */
 2 CD100264 CHAR(1)             ,    /* 65 Verm. Winterthurvers.->CS  */
 2 CD100265 CHAR(1)             ,    /* 66 Verm. CS->Winterthurvers.  */
 2 CD100266 CHAR(1)             ,    /* 67 -Reserve-                  */
 2 CD100267 CHAR(1)             ,    /* 68 Investment-Kunde           */
 2 CD100268 CHAR(1)             ,    /* 69 -Reserve-                  */
 2 CD100269 CHAR(1)             ,    /* 70 -Reserve-                  */
 2 CD100270 CHAR(1)             ,    /* 71 -Reserve-                  */
 2 CD100271 CHAR(1)             ,    /* 72 -Reserve-                  */
 2 CD100272 CHAR(1)             ,    /* 73 PK Quellensteuerbefreit    */
 2 CD100273 CHAR(1)             ,    /* 74 Kontraktkontr. Devisen     */
 2 CD100274 CHAR(1)             ,    /* 75 Aggregation CIF-Warnungen  */
 2 CD100275 CHAR(1)             ,    /* 76 Aggregation Konto-Warnungen*/
 2 CD100276 CHAR(1)             ,    /* 77 Aggregation Depot-Warnungen*/
 2 CD100277 CHAR(1)             ,    /* 78 US Persons-Withholding Tax */
 2 CD100278 CHAR(1)             ,    /* 79 -Reserve-                  */
 2 CD100279 CHAR(1)             ,    /* 80 -Reserve-                  */
 2 CD100280 CHAR(1)             ,    /* 81 -Reserve-                  */
 2 CD100281 CHAR(1)             ,    /* 82 -Reserve-                  */
 2 CD100282 CHAR(1)             ,    /* 83 -Reserve-                  */
 2 CD100283 CHAR(1)             ,    /* 84 -Reserve-                  */
 2 CD100284 CHAR(1)             ,    /* 85 Fonds-Beneficiary ist CSAM */
 2 CD100285 CHAR(1)             ,    /* 86 -Reserve-                  */
 2 CD100286 CHAR(1)             ,    /* 87 -Reserve-                  */
 2 CD100287 CHAR(1)             ,    /* 88 -Reserve-                  */
 2 CD100288 CHAR(1)             ,    /* 89 -Reserve-                  */
                                     /*-------------------------------*/
 2 CD100300 BIN FIXED(15)       ,    /* CD4503 24 Applikationssprache */
 2 CD100301 BIN FIXED(15)       ,    /* CD4503 25 Vertragssprache     */
 2 CD100310 CHAR(4)             ,    /* CD4602 0004 Brokernummer      */
 2 CD100311 CHAR(7)             ,    /* CD4602 0005 Effektenhdndlernr */
 2 CD100312 CHAR(4)             ,    /* CD4602 0006 Depotstellennr    */
 2 CD100313 CHAR(11)            ,    /* CD4602 0007 Clearingnummer    */
 2 CD100320 CHAR(10)            ,    /* CD7711 - Reserve              */
 2 CD100321 CHAR(10)            ,    /* CD7712 - Reserve              */
 2 CD100322 CHAR(8)             ,    /* CD7714 Geburtsdatum           */
 2 CD100323 CHAR(8)             ,    /* CD7715 Todesdatum             */
 2 CD100324 CHAR(8)             ,    /* CD7716 Gr|ndungsdatum         */
 2 CD100325 CHAR(3)             ,    /* CD7717 Nationalitdt           */
 2 CD100326 CHAR(3)             ,    /* CD7718 2.Nationalitdt         */
 2 CD100327 CHAR(1)             ,    /* CD7719 Zivilstand             */
 2 CD100328 CHAR(2)             ,    /* CD7721 - Reserve              */
 2 CD100329 CHAR(20)            ,    /* -Reserve-                     */
 2 CD100330 CHAR(1)             ,    /* CD7724 Ausldnderkategorie     */
 2 CD100331 CHAR(4)             ,    /* CD7725 - Reserve              */
 2 CD100332 CHAR(4)             ,    /* CD7732 - Reserve              */
 2 CD100333 CHAR(1)             ,    /* CD7720 - Reserve              */
 2 CD100334 CHAR(4)             ,    /* CD7710 - Reserve              */
 2 CD100003 CHAR(2)             ,    /* CD3910 - Reserve              */
 2 CD100350 CHAR(4)             ,    /* CD0420 - Reserve              */
 2 CD100351 CHAR(3)             ,    /* CD0421 - Reserve              */
 2 CD100360 CHAR(1)             ,    /* CD1310 Anredecode             */
 2 CD100410 CHAR(10)            ,    /* CD2410 Letztes Mut.Dat Adr    */
 2 CD100411 CHAR(8)             ,    /* CD2411 Mutations-PID Adresse  */
 2 CD100412 CHAR(10)            ,    /* CD2410 Letztes Mut.Dat Stamm  */
 2 CD100413 CHAR(8)             ,    /* CD2411 Mutations-PID Stamm    */
 2 CD100414 CHAR(10)            ,    /* CD2410 Letztes Mut.Dat Derivat*/
 2 CD100415 CHAR(8)             ,    /* CD2411 Mutations-PID Derivat  */
 2 CD100335 CHAR(1)             ,    /* CD7731 - Reserve              */
 2 CD100336 CHAR(4)             ,    /* CD7733 - Reserve              */
 2 CD100337 CHAR(2)             ,    /* CD7734 - Reserve              */
 2 CD100338 CHAR(3)             ,    /* CD7735 Dom Errichter          */
 2 CD100339 CHAR(3)             ,    /* CD7736 Nat Errichter          */
 2 CD100340 CHAR(2)             ,    /* CD7737 Offshore-Code          */
 2 CD100341 CHAR(2)             ,    /* CD7738 Produkteart            */
 2 CD100004 CHAR(4)             ,    /* CD3911 Businessunit numerisch */
 2 CD100005 CHAR(4)             ,    /* CD3912 LOGO-Code reserviert   */
 2 CD100430 CHAR(20)            ,    /* CD301x G Tel H.Nr. aufbereitet*/
 2 CD100431 CHAR(20)            ,    /* CD301x P Tel H.Nr. aufbereitet*/
 2 CD100352 CHAR(2)             ,    /* CD0424 Plz-Kanton             */
 2 CD100353 CHAR(2)             ,    /* CD0425 Plz-Kanton abweichend  */
                                     /* Betreuungstellen: z.B.        */
                                     /*            A599263            */
                                     /*    0011CIASCIAS22             */
                                     /* (ext.Form via OE-Modul)       */
 2 CD100450 CHAR(16)            ,    /* int.OE-Form PID-KV            */
 2 CD100451 CHAR(16)            ,    /* int.OE-Form Delkr.verantw.St. */
 2 CD100452 CHAR(16)            ,    /* int.OE-Form Kundenb|ro        */
 2 CD100453 CHAR(16)            ,    /* int.OE-Form CIFO              */
 2 CD100163 CHAR(16)            ,    /* CD11?? int.OE-Form Leitweg RES*/
 2 CD100342 CHAR(8)             ,    /* CD7739 Berufscode             */
 2 CD100343 CHAR(6)                  /* CD7740 Branchencode           */
  /*   END %INCLUDE TCD100 */
 ;

  /* BEGIN %INCLUDE YCDOGET */
 /*********************************************************************/
 /*                                        * Membername YCDOGET  *    */
 /* Deklarationen f|r                      ***********************    */
 /* YCDOGET                                * KCAB 321            *    */
 /*                                        ***********************    */
 /*                                        * LM 12.02.2010 / thb *    */
 /*                                        ***********************    */
 /*                                                                   */
 /*********************************************************************/
 dcl 1  ycdOGetK,
  /* BEGIN %INCLUDE YCDOGETK */
 /*********************************************************************/
 /*                                        * Membername YCDOGETK *    */
 /* Kommunikationsstruktur f|r             ***********************    */
 /* YCDOGET                                * KCAB 321            *    */
 /*                                        ***********************    */
 /*                                        * LM 12.02.2010 / thb *    */
 /*********************************************************************/
      /*--------------------------------------------------------------*/
      /* Eye Catcher / Release                                        */
      /*--------------------------------------------------------------*/
      2 cdOGet_Eye      char(12),     /* Eye Catcher                  */
      2 cdOGet_Release  char( 8),     /* Release                      */
      /*--------------------------------------------------------------*/
      /* Input                                                        */
      /*--------------------------------------------------------------*/
      2 cdOGet_Cif      char(12),     /* CIF-Nummer                   */
      2 cdOGet_UWI      char(20),     /* UWI des Kunden/Partners      */
      2 cdOGet_SQLCA    ptr,          /* Pointer SQLCA                */
      2 cdOGet_PPool    ptr,          /* --> NICHT mehr verwenden <-- */
      2 cdOGet_PTCD115  ptr,          /* Pointer auf TCD115o          */
      2 cdOGet_FuID     char( 4),     /* --> NICHT mehr verwenden <-- */
      2 cdOGet_Status   char( 1),     /* Status der zu lesenden Daten */
                                      /* 'A' =nur aktive CIF (Default)*/
                                      /* 'I' =aktive und inaktive CIF */
                                      /*  -> Resultat in cd115_007    */
      2 cdOGet_Puts     char( 1),     /* Testputs            ('Y','N')*/
      2 cdOGet_PutPID   char( 8),     /* CDOGet_Puts = 'Y' - Setzer   */
      2 cdOGet_ResIn    char(22),     /* Reserve Input                */
      /*--------------------------------------------------------------*/
      /* Output                                                       */
      /*--------------------------------------------------------------*/
      2 cdOGet_RC       bin fixed(31),/* Returncode                   */
                                      /*  0 ok                        */
                                      /*------------------------------*/
                                      /* Aufrufparameter              */
                                      /*------------------------------*/
                                      /*  2 CDOGet_Release falsch     */
                                      /*  3 CDOGet_Cif oder CDOGet_UWI*/
                                      /*    obligatorisch             */
                                      /*  4 CDOGet_FuID formal falsch */
                                      /*  5 CDOGet_SQLCA obligatorisch*/
                                      /*  6 CDOGet_PTCD115 obligator. */
                                      /*    (oder alt CDOGet_PPool)   */
                                      /*  7 CDOGet_Status falsch      */
                                      /*  8 CDOGet_Puts falsch        */
                                      /* 10 CDOGet_PutPID obligator.  */
                                      /*------------------------------*/
                                      /* allgemeine Fehler / Meldung  */
                                      /*------------------------------*/
                                      /*-12 Dynamischer Load YCDOGE*  */
                                      /*    nicht mvglich             */
                                      /* 11 CIF nicht gefunden        */
                                      /* 12 Pool nicht zur Verf|gung  */
                                      /* 13 gew|nschte Funktion nicht */
                                      /*    gefunden (nur bei Aufruf  */
                                      /*    mit cdOGet_FuID)          */
                                      /*------------------------------*/
                                      /* SQL-Fehler                   */
                                      /*------------------------------*/
                                      /* 21 SQL-Fehler (siehe SQLCA)  */
                                      /*------------------------------*/
      2 cdOGet_ResOut   char(20);     /* Reserve Output               */
  /*   END %INCLUDE YCDOGETK */
 dcl YCDOGET  entry(ptr);
 dcl PycdOGet ptr;
 PycdOGet = addr(ycdOGetK);

  /* BEGIN %INCLUDE YCDOGETI */
 /*********************************************************************/
 /*                                        * Membername YCDOGETI *    */
 /* Deklarationen f|r YCDOGET              ***********************    */
 /*  Initialisierungs-Member               * KSFA 521            *    */
 /*                                        ***********************    */
 /*                                        * LM 10.08.2007 / thb *    */
 /*                                        ***********************    */
 /*                                                                   */
 /*********************************************************************/
 cdOGet_Eye       = '#@YCDOGET@#';
 cdOGet_Release   = 'Rel.0002';
 cdOGet_Cif       = '';               /* CIF-Nummer                   */
 cdOGet_UWI       = '';               /* UWI des Kunden/Partners      */
 cdOGet_SQLCA     = null();           /* Pointer SQLCA                */
 cdOGet_PPool     = null();           /* NICHT mehr verwenden         */
 cdOGet_PTCD115   = null();           /* Pointer auf TCD115o          */
 cdOGet_FuID      = '';               /* NICHT mehr verwenden         */
 cdOGet_Status    = 'A';              /* Status der zu lesenden Daten */
 cdOGet_Puts      = 'N';              /* Testputs                     */
 cdOGet_PutPID    = '';               /* CDOGet_Puts = 'Y' - Setzer   */
 cdOGet_ResIn     = '';               /* Reserve Input                */
  /*   END %INCLUDE YCDOGETI */
  /*   END %INCLUDE YCDOGET */
 dcl 1 tcd115o,
  /* BEGIN %INCLUDE TCD115O */
 /*********************************************************************/
 /* Betreuungs-Getpool  (CIF-OE-Getpool)   * Membername TCD115O  *    */
 /*                                        ***********************    */
 /* Datenstruktur f|r                      * KCAB 321            *    */
 /* Zugriffsmodul YCDOGET                  ***********************    */
 /*                                        * LM 12.02.2010 / thb *    */
 /*********************************************************************/
      2 CD115_001           CHAR(12), /* CIF Nummer                   */
      2 CD115_002           CHAR(20), /* UWI Partner                  */
      2 CD115_003           CHAR( 1), /* Row-Nr.                    =1*/
      2 CD115_007           CHAR( 1), /* Status  A=aktiv / I=inaktiv  */
      2 CD115_008           CHAR(26), /* Techn. Mutationsdatum/Zeit   */
                                      /*------------------------------*/
      2 CD115_BetrFunk_Tab(134),      /* BetreuungsFunktionen-Tabelle */
                                      /*  (nicht l|ckenlos gef|llt)   */
      3 CD115_Funktion_ID   CHAR( 4), /* Funktions-ID    siehe RT1125 */
      3 CD115_FI_Intern     CHAR(16), /* Betrieblicher Key   z.B.     */
                                      /*   MA  '        A123456 '     */
                                      /*   OE  '0009KASKKASK111 '     */
                                      /* (externe Form via OE-Modul)  */
      3 CD115_FI_Idfr       CHAR(20), /* UWI des Funktionsinhabers    */
      3 CD115_Partner_T_ID  CHAR( 4), /* Partner-Typ-ID               */
                                      /*  '0001' = MA (Mitarbeiter)   */
                                      /*  '0003' = OE (Org.Einheit)   */
      3 CD115_FT_Idfr       CHAR(16); /* UUID des Funktionstrdgers    */
        /*------------------------------------------------------------*/
        /* CD115_BetrFunk_Tab ( 1)  =  0001  Delkredereverantwortung  */
        /*                    ( 2)  =  0004  Kundenb|ro               */
        /*                    ( 3)  =  0026  RM/KV                    */
        /*                    ( 4)  =  0041  CIFO                     */
        /*                    ( 5)  =  0014  Schlusskontrollstelle    */
        /*                    ( 6)  =  0024  Zentrale Dispo           */
        /*                    ( 7)  =  0025  Dispoverantwortung NZV   */
        /*                    ( 8)  =  0031  Inv. Check/Wechsel       */
        /*                    ( 9)  =  0035  Devisen Selling Team     */
        /*                    (10)  =  0042  Zustdndige Krediteinheit */
        /*                    (11)  =  0044  Investigation ZV         */
        /*                    (12)  =  0045  Abwicklung ZV            */
        /*                    (13)  =  0052  Credit & Sales Advisory  */
        /*                    (14)  =  0062  Modul-Leiter             */
        /*                    (15)  =  0056  CIF Stammdatenf|hrung    */
        /*                    (16)  =  0057  Financial Planner        */
        /*                    (17)  =  0058  Investment Consultant    */
        /*                    (18)  =  0063  Steuerb|ro               */
        /*                    (19)  =  0070  CIS-Operation            */
        /*                    (20)  =  0071  Reserve                  */
        /*                    (21)  =  0072  Formalities Controls     */
        /*                    (22)  =  0073  Firmenkunden Servicecente*/
        /*                    (23)  =  0074  Client Service Officer F2*/
        /*                    (24)  =  0075  Eskall.stelle. Kto.Ueberz*/
        /*                    (25)  =  0076  Compliance Office        */
        /*                    (26)  =  0077  RET Ausgabeort           */
        /*                    (27)  =  0078  Erbschaftsb|ro           */
        /*                    (28)  =  0079  Testamentsverantwortung  */
        /*                    (29)  =  0080  EAM-Advisor              */
        /*                    (30)  =  0081  EAM-Firma                */
        /*                    (31)  =  0082  KUV Assistenz Firmenkunde*/
        /*                    (32)  =  0083  Kautionen-Beratung       */
        /*                    (33)  =  0084  RET-Office               */
        /*                    (34)  =  0085  DelkV Lombard            */
        /*                    (35)  =  0086  STFI-Berater             */
        /*                    (36)  =  0087  SIP-Berater              */
        /*                    (37)  =  0088  Tax Advisory             */
        /*                    (38)  =  0089  Customer-Center          */
        /*                    (39)  =  0090  Leasing Kundenbetreuer   */
        /*                    (40)  =  0091  Leasing Administrator    */
        /*                    (41)  =  0092  KAM-GIR                  */
        /*                    (42)  =  0093  Akkreditiv-Beratung      */
        /*                    (43)  =  0094  Direct Access Client Spec*/
        /*                    (44)  =  0095  Sales Asset Management   */
        /*                    (45)  =  0096  RM-International         */
        /*                    (46)  =  0097  Team Hypotheken Neu/Erhv.*/
        /*                    (47)  =  0098  Kreditspezialist Lombard */
        /*                    (48)  =  0099  Kreditspezialist Team    */
        /*                    (49)  =  0100  BvG Fertigungsstelle     */
        /*                    (50)  =  0101  DLZ Scanning             */
        /*                    (51)  =  0102  DLZ Check/Wechsel        */
        /*                    (52)  =  0051  CIS-Kontrolle            */
        /*                    (53)  =  0064  Produktionsverantw. StA  */
        /*                    (54)  =  0065  Produktionsverantw. StR  */
        /*                    (55)  =  0109  ZV Prozessing CHF        */
        /*                    (56)  =  0110  ZV Prozessing FW         */
        /*                    (57)  =  0111  ZV Inv. Unterschriftenpr.*/
        /*                    (58)  =  0112  ZV Inv. Betragsdifferenz */
        /*                    (59)  =  0113  Customer Supervisor CSG  */
        /*                    (60)  =  0114  Investment Advisor PF    */
        /*                    (61)  =  0115  Supp.Relationship Manager*/
        /*                    (62)  =  0116  Solution Partner         */
        /*                    (63)  =  0117  Sales Asset Management 2 */
        /*                    (64)  =  0118  Sales Asset Management 3 */
        /*                    (65)  =  0119  Sales Asset Management 4 */
        /*                    (66)  =  0120  Sales Asset Management 5 */
        /*                    (67)  =  0121  IC Corp. & Inst. Sales   */
        /*                    (68)  =  0122  IC Corp. & Inst. Sales 2 */
        /*                    (69)  =  0123  IC Corp. & Inst. Sales 3 */
        /*                    (70)  =  0124  IC Corp. & Inst. Sales 4 */
        /*                    (71)  =  0125  IC Corp. & Inst. Sales 5 */
        /*                    (72)  =  0126  ZV Processing SEPA       */
        /*                    (73)  =  0127  Factoring Specialist     */
        /*                    (74)  =  0128  Factoring Kundenbetreuer */
        /*                    (75)  =  0129  ZV PACS Eingang f|r FI   */
        /*                    (76)  =  0130  ZV SWIFT FIN ProcessingFI*/
        /*                    (77)  =  0131  ZV Processing CoE        */
        /*                    (78)  =  0132  Waiver                   */
        /*                    (79)  =  0133  PCI Kundenverantwortung  */
        /*                    (80)  =  0134  Reserve                  */
        /*                    (81)  =  0135  Reserve                  */
        /*                    (82)  =  0136  Reserve                  */
        /*                    (83)  =  0137  Reserve                  */
        /*                    (84)  =  0138  Reserve                  */
        /*                    (85)  =  0139  Reserve                  */
        /*                    (86)  =  0140  Reserve                  */
        /*                    (87)  =  0141  Reserve                  */
        /*                    (88)  =  0142  Reserve                  */
        /*                    (89)  =  0143  Reserve                  */
        /*                    (90)  =  0144  Reserve                  */
        /*                    (91)  =  0145  Reserve                  */
        /*                    (92)  =  0146  Reserve                  */
        /*                    (93)  =  0147  Reserve                  */
        /*                    (94)  =  0148  Reserve                  */
        /*                    (95)  =  0149  Reserve                  */
        /*                    (96)  =  0150  Reserve                  */
        /*                    (97)  =  0151  Reserve                  */
        /*                    (98)  =  0152  Reserve                  */
        /*                    (99)  =  0153  Reserve                  */
        /*                   (100)  =  0154  Reserve                  */
        /*                   (101)  =  0155  Reserve                  */
        /*                   (102)  =  0156  Reserve                  */
        /*                   (103)  =  0157  Reserve                  */
        /*                   (104)  =  0158  Reserve                  */
        /*                   (105)  =  0159  Reserve                  */
        /*                   (106)  =  0160  Reserve                  */
        /*                   (107)  =  0161  Reserve                  */
        /*                   (108)  =  0162  Reserve                  */
        /*                   (109)  =  0163  Reserve                  */
        /*                   (110)  =  0164  EAM Multi Advisor        */
        /*                     &                                      */
        /*                   (134)  =  0164  EAM Multi Advisor        */
  /*   END %INCLUDE TCD115O */
  /* BEGIN %INCLUDE YID0000 */
 /*------------------------------------------------------------------*/
 /*- Start Copybook YID0000                                         -*/
 /*------------------------------------------------------------------*/

 /*------------------------------------------------------------------*/
 /*- Produkt      : OCF (Output Cannel Fax)                         -*/
 /*- Zustdndig    : CITM 4 / Edo Wanek                              -*/
 /*- Beschreibung : Entry Deklatarion f|r das Module YID0000        -*/
 /*-                Auslesen bestimmter Informationen aus den       -*/
 /*-                System-Kontrollblvcke (z.B. SMFID, JOBNAME, ...)-*/
 /*-                                                                -*/
 /*- In Parameter : - Adresse auf die Struktur ID0000               -*/
 /*- Out Parameter: -                                               -*/
 /*------------------------------------------------------------------*/

   dcl  YID0000                  external entry (pointer);

 /*------------------------------------------------------------------*/
 /*- Ende Copybook YID0000                                          -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YID0000 */
 Dcl 1 ID0000,                               /* System-Information    */
  /* BEGIN %INCLUDE ID0000 */
 /*------------------------------------------------------------------*/
 /*- Start Copybook ID0000                                          -*/
 /*------------------------------------------------------------------*/

 /*------------------------------------------------------------------*/
 /*- Produkt      : OCF (Output Cannel Fax)                         -*/
 /*- Zustdndig    : CITM 4 / Edo Wanek                              -*/
 /*- Beschreibung : Parameterstruktur f|r die aus den               -*/
 /*-                JES3-Kontrollblocks ausgelesenen Werte.         -*/
 /*------------------------------------------------------------------*/


     2  JES3_JobName,
      4  Value                   char (08),
     2  JES3_JobNummer,
      4  Value                   char (08),
     2  JES3_JobStepName,
      4  Value                   char (08),
     2  JES3_ProcStepName,
      4  Value                   char (08),
     2  JES3_SMFID,
      4  Value                   char (04)

 /*------------------------------------------------------------------*/
 /*- Ende Copybook ID0000                                           -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE ID0000 */
 ;


 dcl 1 ID6060HL,                          /* Logging-Header           */
  /* BEGIN %INCLUDE ID6060HL */
 /*------------------------------------------------------------------*/
 /*- START COPYBOOK ID6060HL                                        -*/
 /*------------------------------------------------------------------*/
 /*- PRODUKT      : EOS (ELECTRONIC OUTPUT SYSTEM)                  -*/
 /*- BESCHREIBUNG : LOGGING-HEADER FUER PROGRAMM ID6060             -*/
 /*- change       : replace Ijobproc with Priority of doc processing-*/
 /*- change       : split priority into prio and channel            -*/
 /*------------------------------------------------------------------*/

       5 StructName   CHAR (08) INIT ('ID6060HL'),
       5 Filler       CHAR (01) INIT (':'),
       5 IJobName     CHAR (08),
       5 IJobNummer   CHAR (08),
       5 IJobStep     CHAR (08),
       5 IPriority    CHAR (04),
       5 IChannel     CHAR (04) INIT ('EOS'),
       5 IJobSMFID    CHAR (04),
       5 IOrderID     CHAR (05),
       5 SDataSetName CHAR (44),
       5 SJobname     CHAR (08),
       5 SJobNummer   CHAR (08),
       5 STimeStamp   CHAR (26)

 /*------------------------------------------------------------------*/
 /*- ENDE COPYBOOK ID6060HL                                         -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE ID6060HL */
 ;

 /*-------------------------------------------------------------------*/
 /* Base 64 encoder/decoder                                           */
 /*-------------------------------------------------------------------*/
 dcl base64encode  builtin;
 dcl base64decode  builtin;

 /*-------------------------------------------------------------------*/
 /* MQ Includes                                                       */
 /*-------------------------------------------------------------------*/
  /* BEGIN %INCLUDE YIDMQNM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   16. Aug. 2010   11:09   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : YIDMQNM - MQ Details                            @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    : 0097439                                         @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 04-Aug-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/

 dcl YIDMQNM       External Entry (file,            /* MQ File       */
                                   char(01),        /* Operation     */
                                   pointer);        /* Comm Area     */

 /*------------------------------------------------------------------*/
 /*- Ende Copybook YIDMQNM                                          -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE YIDMQNM */
 ;
 dcl 1 MQReceiverCommArea,
  /* BEGIN %INCLUDE IDMQCOMM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : IDMQCOMM - EOS Handler MQ Modules Comm Area     @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 05-May-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
    2   $Trace                bit(01),
    2   $QueueManager         char(48),
    2   $QueueName            char(48),
    2   $HandleConnection     bin fixed(31),
    2   $HandleObject         bin fixed(31),
    2   $CompCode             bin fixed(31),
    2   $Reason               bin fixed(31);
  /*   END %INCLUDE IDMQCOMM */
 ;

 dcl 1 MQELARCommArea,
  /* BEGIN %INCLUDE IDMQCOMM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : IDMQCOMM - EOS Handler MQ Modules Comm Area     @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 05-May-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
    2   $Trace                bit(01),
    2   $QueueManager         char(48),
    2   $QueueName            char(48),
    2   $HandleConnection     bin fixed(31),
    2   $HandleObject         bin fixed(31),
    2   $CompCode             bin fixed(31),
    2   $Reason               bin fixed(31);
  /*   END %INCLUDE IDMQCOMM */
 ;

 dcl 1 MQPDFReqCommArea,
  /* BEGIN %INCLUDE IDMQCOMM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : IDMQCOMM - EOS Handler MQ Modules Comm Area     @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 05-May-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
    2   $Trace                bit(01),
    2   $QueueManager         char(48),
    2   $QueueName            char(48),
    2   $HandleConnection     bin fixed(31),
    2   $HandleObject         bin fixed(31),
    2   $CompCode             bin fixed(31),
    2   $Reason               bin fixed(31);
  /*   END %INCLUDE IDMQCOMM */
 ;

 dcl 1 MQPrintCommArea,
  /* BEGIN %INCLUDE IDMQCOMM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : IDMQCOMM - EOS Handler MQ Modules Comm Area     @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 05-May-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
    2   $Trace                bit(01),
    2   $QueueManager         char(48),
    2   $QueueName            char(48),
    2   $HandleConnection     bin fixed(31),
    2   $HandleObject         bin fixed(31),
    2   $CompCode             bin fixed(31),
    2   $Reason               bin fixed(31);
  /*   END %INCLUDE IDMQCOMM */
 ;

 dcl 1 MQErrorCommArea,
  /* BEGIN %INCLUDE IDMQCOMM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : IDMQCOMM - EOS Handler MQ Modules Comm Area     @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 05-May-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
    2   $Trace                bit(01),
    2   $QueueManager         char(48),
    2   $QueueName            char(48),
    2   $HandleConnection     bin fixed(31),
    2   $HandleObject         bin fixed(31),
    2   $CompCode             bin fixed(31),
    2   $Reason               bin fixed(31);
  /*   END %INCLUDE IDMQCOMM */
 ;

 dcl 1 MQEnclCommArea,
  /* BEGIN %INCLUDE IDMQCOMM */
 /********************************************************************/
 /*                                                                  */
 /*    Letzte Source-Dnderung:   23. Mar. 2010   18:59   F243873     */
 /*                                                                  */
 /*@=================================================================@*/
 /*@ Component     : IDMQCOMM - EOS Handler MQ Modules Comm Area     @*/
 /*@ Application   : EOS Handler EODIST                              @*/
 /*@ Swan XP CR    :                                                 @*/
 /*@ Creator       : Amit Chaudhary                                  @*/
 /*@ Creation Date : 05-May-2010                                     @*/
 /*@-----------------------------------------------------------------@*/
 /*@ Changes Description:                                            @*/
 /*@=================================================================@*/
 /*@ Revisor       :                             Tag  :              @*/
 /*@ Swan XP CR    :                             Date :              @*/
 /*@ Changes Description:                                            @*/
 /*@                                                                 @*/
 /*@-----------------------------------------------------------------@*/
    2   $Trace                bit(01),
    2   $QueueManager         char(48),
    2   $QueueName            char(48),
    2   $HandleConnection     bin fixed(31),
    2   $HandleObject         bin fixed(31),
    2   $CompCode             bin fixed(31),
    2   $Reason               bin fixed(31);
  /*   END %INCLUDE IDMQCOMM */
 ;

 /*-------------------------------------------------------------------*/
 /* Definition for external service getBusinessUnit for Business Unit */
 /* Legal Entity Name.                                                */
 /*-------------------------------------------------------------------*/
 /*--- Definitions ---------------------------------------------------*/
  /* BEGIN %INCLUDE BU01401 */
 /* IF002335/bu01/getBusinessUnit/4.0/Definitions for Consumer        */
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 /* member         :  bu01401                                         */
 /*                   |   |||                                         */
 /*                   |   |||__ 1 = Definitions for Consumer          */
 /*                   |   ||___ 0 = minor version 0                   */
 /*                   |   |____ 4 = major version 4                   */
 /*                   |________ bu01 = service ID PSM                 */
 /* service        :  getBusinessUnit                                 */
 /* service ID PIM :  IF002335                                        */
 /* service ID PSM :  bu01                                            */
 /* version        :  4.0                                             */
 /* granularity    :  elementar                                       */
 /* contents       :  Definitions for Consumer                        */
 /*-------------------------------------------------------------------*/
 /* last generated :  18:06:2010 13:35:16                             */
 /* generator vers.:  1.5.1_p7                                        */
 /*-------------------------------------------------------------------*/
  /* BEGIN %XINCLUDE YXNDEF1 */
 /*********************************************************************/
 /**                                                                 **/
 /**  Macro         : yxNDef1                                        **/
 /**  Author        : Donat Cornu                                    **/
 /**  Org unit      : KSD 941                                        **/
 /**  Date          : 11.2007                                        **/
 /**  Copybook      : yxNDef1                                        **/
 /**  Version       : 1                                              **/
 /**                                                                 **/
 /**-----------------------------------------------------------------**/
 /**                                                                 **/
 /**  Program Short Description                                      **/
 /**  =========================                                      **/
 /**                                                                 **/
 /**  yxNDef checks for duplicate definitions.                       **/
 /**                                                                 **/
 /**           Description               values                      **/
 /**           ------------------------- -------------------------   **/
 /**  Input:   data type name                                        **/
 /**  Output:  is not defined?           'Y' = not defined yet       **/
 /**                                     'N' = already defined       **/
 /**                                                                 **/
 /*********************************************************************/

 /*********************************************************************/
 /*    Preprocessor Macro yxNDef1                                     */
 /*********************************************************************/
 /*-------------------------------------------------------------------*/

 /*--- End of Copybook yxNDef1 ---------------------------------------*/
  /*   END %XINCLUDE YXNDEF1 */
                                            /* is not defined?        */
  /* BEGIN %XINCLUDE YYUSQ */
 /*------------ YYUSQ ------------------------------------------------*/
 /*                                                                   */
 /* yyusq supports one dimensional unbounded sequences                */
 /*                                                                   */
 /* according to the supplied parameters it generates the needed code */
 /* and generates a call to YYUSQ.                                    */
 /*                                                                   */
 /* for APPEND and GETNEXT a type check is executed, which results    */
 /* in a compilation error when the type of the USQ and the element   */
 /* do not match.                                                     */
 /*                                                                   */
 /*                                                                   */
 /*                                                                   */
 /*  author:  Donat Cornu and Ruedi Schuster  01.06.2008              */
 /*  change:  default reduced form 16'000'000 to 100'000 for alloc    */
 /*           06.11.2008 R. Schuster KSDI611                          */
 /*  change:  avoid negative second operand to repeat BIF.            */
 /*           12.02.2010 A. Weisstanner KSDI 611                      */
 /*-------------------------------------------------------------------*/

 /* tracing named constants */

 dcl yyUSq_Trace_Silent      bin fixed(31) value(00);
 dcl yyUSq_Trace_Verbose     bin fixed(31) value(09);

 /* framework Code named constants */

 dcl yyUSq_OK                bin fixed(31) value( 000);
 dcl yyUSq_end_of_sequence   bin fixed(31) value(+100);
 dcl yyUSq_not_allocated     bin fixed(31) value(-100);
 dcl yyUSq_already_allocated bin fixed(31) value(-101);


  /* BEGIN %INCLUDE YYUSQA */
 /* this entry declaration has benn moved here from yyusqe because    */
 /* EPLI does not allow this declaration to be in the package.        */
 /* The abnormal attribute cannot be specified on the proc statement  */

 dcl yyusq entry external abnormal;
  /*   END %INCLUDE YYUSQA */
    /* must be here before activating yyusq */
  /* BEGIN %INCLUDE YYUSQE */
 /*--- YYUSQ entry declarations --------------------------------------*/
 /*                                                                   */
 /*    member is included by YYUSQ.pl# and YYUSQ.plu                  */
 /*                                                                   */
 /*    author: Ruedi Schuster 01.06.2008                              */
 /*                                                                   */
 /*--- Allocate ------------------------------------------------------*/
 dcl YYUSQAL entry
       (ptr byaddr nonasgn,                      /* uSeq address    In*/
        bin fixed(31) nonasgn byaddr,            /* heapsize (bytes)In*/
        char(100) varying nonasgn byaddr,        /* usq name        In*/
        bin fixed(31) byaddr aligned);           /* isOK           Out*/

 /*--- Append --------------------------------------------------------*/
 dcl YYUSQAP entry
       (ptr byaddr nonasgn,                      /* uSeq address    In*/
        ptr nonasgn byaddr,                      /* element address In*/
        bin fixed(31) nonasgn byaddr,            /* element length  In*/
        bin fixed(31) byaddr aligned);           /* isOK           Out*/

 /*--- Count ---------------------------------------------------------*/
 dcl YYUSQCT entry
       (ptr nonasgn byaddr,                      /* uSeq address    In*/
        bin fixed(31) byAddr);                   /* element counterOut*/

 /*--- Position Begin ------------------------------------------------*/
 dcl YYUSQPO entry
       (ptr nonasgn byaddr);                     /* uSeq address    In*/

 /*--- Get Next ------------------------------------------------------*/
 dcl YYUSQGN entry
       (ptr byaddr nonasgn,                      /* uSeq address    In*/
        ptr nonasgn byaddr,                      /* element address In*/
        bin fixed(31) byaddr aligned);           /* isOK           Out*/

 /*--- Free ----------------------------------------------------------*/
 dcl YYUSQFR entry
       (ptr byAddr nonasgn);                     /* uSeq address    In*/

 /*--- End of Copybook yyUSq -----------------------------------------*/
  /*   END %INCLUDE YYUSQE */
  /*   END %XINCLUDE YYUSQ */
                                            /* unbounded sequences    */

  /* BEGIN %XINCLUDE YYHDR1I */
 /*-------------------------------------------------------------------*/
 /* copybook       :   yyHdr1I                                        */
 /*                    | |  ||                                        */
 /*                    | |  ||__  I = initialization                  */
 /*                    | |  |___  1 = version 1                       */
 /*                    | |______    = data type short name            */
 /*                    |________    = implementing application        */
 /* data type      :   SBIP#Header01_T                                */
 /* version        :   1                                              */
 /* contents       :   data type definitions and entry declaration    */
 /* author         :   DiMA/Donat Cornu/A596175                       */
 /* date           :   03.2008                                        */
 /*-------------------------------------------------------------------*/

  /* BEGIN %INCLUDE YYHDR1 */
 /*--- Header                            DiMA/Donat Cornu, 03.2008 ---*/
  /* BEGIN %INCLUDE YYTYN1 */
 /*--- Typename                          DiMA/Donat Cornu, 03.2008 ---*/
   define alias
   SBIP#TypeName01_T                char(40);               /* yyTyN1 */
  /*   END %INCLUDE YYTYN1 */
                                   /* SBIP#TypeName01_T               */
  /* BEGIN %INCLUDE YYTRL1 */
 /*--- Trace Level                       DiMA/Donat Cornu, 03.2008 ---*/
   define alias
   SBIP#TraceLevel01_T              bin fixed(31);          /* yyTrL1 */

   dcl SBIP#TRACE_LEVEL_01_SILENT   type SBIP#TraceLevel01_T
                                    value(0);

   dcl SBIP#TRACE_LEVEL_01_VERBOSE  type SBIP#TraceLevel01_T
                                    value(9);
  /*   END %INCLUDE YYTRL1 */
                                   /* SBIP#TraceLevel01_T             */
  /* BEGIN %INCLUDE YYAID1 */
 /*--- Application-Id                    DiMA/Donat Cornu, 03.2008 ---*/
   define alias
   SBIP#ApplId01_T                  char(08);               /* yyAId1 */
  /*   END %INCLUDE YYAID1 */
                                   /* SBIP#ApplId01_T                 */
  /* BEGIN %INCLUDE YYRQT1 */
 /*--- Request-Id                        DiMA/Donat Cornu, 03.2008 ---*/
   define alias
   SBIP#RequestId01_T               char(40);               /* yyRqt1 */
  /*   END %INCLUDE YYRQT1 */
                                   /* SBIP#RequestId01_T              */
  /* BEGIN %INCLUDE YYRET1 */
 /*--- Return Code                       DiMA/Donat Cornu, 03.2008 ---*/
   define ordinal
   SBIP#RetCd01_T                                           /* yyRet1 */
   (SBIP#RET_CD_01_OK               value(0),
    SBIP#RET_CD_01_ATT              value(4),
    SBIP#RET_CD_01_BUS_EX           value(8),
    SBIP#RET_CD_01_SYS_EX           value(12),
    SBIP#RET_CD_01_UNRECOVERABLE    value(16))
   precision(31) signed;
  /*   END %INCLUDE YYRET1 */
                                   /* SBIP#RetCd01_T                  */

   dcl SBIP#HEADER_01_TYPE          type SBIP#TypeName01_T
                                    value('SBIP#Header01_T');

   define structure
   1 SBIP#Header01_T,                                       /* YYHdr1 */
     3 typeName                     type SBIP#TypeName01_T,
     3 traceLevel                   type SBIP#TraceLevel01_T,
     3 applId                       type SBIP#ApplId01_T,
     3 requestId                    type SBIP#RequestId01_T,
     3 retCdTrace                   type SBIP#RetCd01_T;
  /*   END %INCLUDE YYHDR1 */
                                            /* SBIP#Header01_T        */

 /*  %@SBIP#HEADER_01_INIT =          */
 /*  'yyHdr1I /* @SBIP#HEADER_01_INIT */

 dcl yyHdr1I /* @SBIP#HEADER_01_INIT */ entry

       (type SBIP#Header01_T);

 /*--- End of Copybook yyHdr1I ---------------------------------------*/
  /*   END %XINCLUDE YYHDR1I */
                                            /* SBIP#Header V1: init   */

  /* BEGIN %XINCLUDE BU0140BT */
 /* IF002335/bu01/getBusinessUnit/4.0/Business Service                */
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 /* member         :  bu0140BT                                        */
 /*                   |   ||||_ T = Data Type Definitions             */
 /*                   |   |||__ B = Business Service                  */
 /*                   |   ||___ 0 = minor version 0                   */
 /*                   |   |____ 4 = major version 4                   */
 /*                   |________ bu01 = service ID PSM                 */
 /* service        :  getBusinessUnit                                 */
 /* service ID PIM :  IF002335                                        */
 /* service ID PSM :  bu01                                            */
 /* version        :  4.0                                             */
 /* granularity    :  elementar                                       */
 /* contents       :  Data Type Definitions                           */
 /*-------------------------------------------------------------------*/
 /* last generated :  18:06:2010 13:35:08                             */
 /* generator vers.:  1.5.1_p7                                        */
 /*-------------------------------------------------------------------*/

 /*--- Overview ------------------------------------------------------*/
 /*                                                                   */
 /* ReturnCode                                                        */
 /* ==========                                                        */
 /*                                                                   */
 /* retCd                              SBIP#RetCd01_T                 */
 /* "                                  ordinal                        */
 /*                                                                   */
 /* Header                                                            */
 /* ======                                                            */
 /*                                                                   */
 /* 1 header                           SBIP#Header01_T                */
 /*  3 typeName                        SBIP#TypeName01_T              */
 /*    "                               char(40)                       */
 /*  3 traceLevel                      SBIP#TraceLevel01_T            */
 /*    "                               bin fixed(31)                  */
 /*  3 applId                          SBIP#ApplId01_T                */
 /*    "                               char(08)                       */
 /*  3 requestId                       SBIP#RequestId01_T             */
 /*    "                               char(40)                       */
 /*  3 retCdTrace                      SBIP#RetCd01_T                 */
 /*    "                               ordinal                        */
 /*                                                                   */
 /* Input                                                             */
 /* =====                                                             */
 /*                                                                   */

 /*   1 getBusinessUnitIn Bu0140B#In_T                                */
 /*     3 typeName type SBIP#TypeName01_T                             */
 /*     3 buId OEST#BU#P#BUId_1_T                                     */
 /*       " char(4)                                                   */
 /*     3 language MECC#AB#P#Language_1_Opt_T                         */
 /*       5 isNull bit(1) aligned                                     */
 /*       5 * char(7)                                                 */
 /*       5 val MECC#AB#P#Language_1_T                                */
 /*         7 selection MECC#AB#P#LanguageSelection_1_T               */
 /*         7 languageCSCd GEDD#IL#P#LanguageCdCS_1_Opt_T             */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GEDD#IL#P#LanguageCdCS_1_T                        */
 /*             " char(3)                                             */

 /*         7 languageIsoCd GEDD#IL#P#LanguageCdISO_1_Opt_T           */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GEDD#IL#P#LanguageCdISO_1_T                       */
 /*             " char(2)                                             */

 /*     3 validAsPerDate GEDD#TI#P#Date_1_Opt_T                       */
 /*       5 isNull bit(1) aligned                                     */
 /*       5 * char(7)                                                 */
 /*       5 val GEDD#TI#P#Date_1_T                                    */
 /*         " char(8)                                                 */

 /*                                                                   */
 /* Output                                                            */
 /* ======                                                            */
 /*                                                                   */

 /*   1 getBusinessUnitOut Bu0140B#Out_T                              */
 /*     3 typeName type SBIP#TypeName01_T                             */
 /*     3 general MECC#AB#P#BUGeneral_3_T                             */
 /*       5 lifeCycleStateCd GEDD#ST#P#LifeCycleStateCd_2_T           */
 /*         " char(1)                                                 */
 /*       5 buAbbreviation GEDD#NA#P#Abbreviation_1_T                 */
 /*         " char(4)                                                 */
 /*       5 legalEntityId OEST#BU#P#LegalEntityId_1_T                 */
 /*         " char(4)                                                 */
 /*       5 itPlatformId GEDD#IF#P#PlatformCd_1_Opt_T                 */
 /*         7 isNull bit(1) aligned                                   */
 /*         7 * char(7)                                               */
 /*         7 val GEDD#IF#P#PlatformCd_1_T                            */
 /*           " char(4)                                               */

 /*     3 geographic MECC#AB#P#BUGeographic_3_T                       */
 /*       5 defaultLanguageCSCd GEDD#IL#P#LanguageCdCS_1_T            */
 /*         " char(3)                                                 */
 /*       5 defaultLanguageIsoCd GEDD#IL#P#LanguageCdISO_1_T          */
 /*         " char(2)                                                 */
 /*       5 countryCSCd GEDD#IL#P#CountryCdCS_1_T                     */
 /*         " char(3)                                                 */
 /*       5 countryIsoCd GEDD#IL#P#CountryCdISO_1_T                   */
 /*         " char(2)                                                 */
 /*       5 timeZoneId GEDD#TI#P#TimeZoneId_1_Opt_T                   */
 /*         7 isNull bit(1) aligned                                   */
 /*         7 * char(7)                                               */
 /*         7 val GEDD#TI#P#TimeZoneId_1_T                            */
 /*           " char(8) varying                                       */

 /*     3 operational MECC#AB#P#BUOperational_4_T                     */
 /*       5 financials MECC#AB#P#BUOperational_4_I1Financials_T       */
 /*         7 functionalCurrencyCSCd GEDD#IL#P#CurrencyCdCS_1_Opt_T   */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GEDD#IL#P#CurrencyCdCS_1_T                        */
 /*             " char(4)                                             */

 /*         7 functionalCurrencyIsoCd GEDD#IL#P#CurrencyCdISO_1_Opt_T */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GEDD#IL#P#CurrencyCdISO_1_T                       */
 /*             " char(3)                                             */

 /*         7 localBusCurrencyCSCd GEDD#IL#P#CurrencyCdCS_1_Opt_T     */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GEDD#IL#P#CurrencyCdCS_1_T                        */
 /*             " char(4)                                             */

 /*         7 localBusCurrencyIsoCd GEDD#IL#P#CurrencyCdISO_1_Opt_T   */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GEDD#IL#P#CurrencyCdISO_1_T                       */
 /*             " char(3)                                             */

 /*         7 clearingBUClusterId GEDD#BU#P#BUClusterId_1_Opt_T       */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GEDD#BU#P#BUClusterId_1_T                         */
 /*             " char(4)                                             */

 /*         7 gliChartManagingBUId OEST#BU#P#BUId_1_Opt_T             */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val OEST#BU#P#BUId_1_T                                */
 /*             " char(4)                                             */

 /*         7 prefixFinancialAcc MECC#AB#P#PrefixFinancialAccounting_ */
 /* 1_Opt_T                                                           */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val MECC#AB#P#PrefixFinancialAccounting_1_T           */
 /*             " char(4)                                             */

 /*         7 adacReportingUnit GRCS#RU#P#ReportingUnit_1_Opt_T       */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GRCS#RU#P#ReportingUnit_1_T                       */
 /*             " char(4)                                             */

 /*         7 vatUID GEDD#NO#P#VatUid_1_Opt_T                         */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GEDD#NO#P#VatUid_1_T                              */
 /*             " char(20)                                            */

 /*         7 vatRID GEDD#NO#P#VatRid_1_Opt_T                         */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GEDD#NO#P#VatRid_1_T                              */
 /*             " char(20)                                            */

 /*       5 securities MECC#AB#P#BUOperational_4_I2Securities_T       */
 /*         7 secProcBUId OEST#BU#P#BUId_1_Opt_T                      */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val OEST#BU#P#BUId_1_T                                */
 /*             " char(4)                                             */

 /*         7 secProcEntity MECC#AB#P#SecProcEntity_1_Opt_T           */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val MECC#AB#P#SecProcEntity_1_T                       */
 /*             " char(4)                                             */

 /*       5 others MECC#AB#P#BUOperational_4_I3Others_T               */
 /*         7 senderBIC MSHD#CP#P#BIC_1_Opt_T                         */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val MSHD#CP#P#BIC_1_T                                 */
 /*             " char(11)                                            */

 /*         7 numberingBUClusterId GEDD#BU#P#BUClusterId_1_Opt_T      */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val GEDD#BU#P#BUClusterId_1_T                         */
 /*             " char(4)                                             */

 /*         7 cdsSchemaId MECC#AB#P#CdsSchemaId_1_Opt_T               */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val MECC#AB#P#CdsSchemaId_1_T                         */
 /*             " char(4)                                             */

 /*         7 headquartersBranchId OEST#OU#P#BranchCd_1_Opt_T         */
 /*           9 isNull bit(1) aligned                                 */
 /*           9 * char(7)                                             */
 /*           9 val OEST#OU#P#BranchCd_1_T                            */
 /*             " char(4)                                             */

 /*     3 languageDependent MECC#AB#P#BULanguageDep_2_Opt_T           */
 /*       5 isNull bit(1) aligned                                     */
 /*       5 * char(7)                                                 */
 /*       5 val MECC#AB#P#BULanguageDep_2_T                           */
 /*         7 buShortName GEDD#NA#P#ShortName_1_T                     */
 /*           " char(10)                                              */
 /*         7 buName GEDD#NA#P#Name_1_T                               */
 /*           " char(35)                                              */
 /*         7 legalEntityName GEDD#NA#P#Name_1_T                      */
 /*           " char(35)                                              */

 /*     3 busEx type GEDD#IF#P#BusinessException_1_Opt_T              */
 /*                                                                   */
 /* SystemException                                                   */
 /* ===============                                                   */
 /*                                                                   */
 /* 1  sysEx                GEDD#IF#P#SystemException_1_Opt_T         */
 /*                                                                   */
 /*--- End of Overview -----------------------------------------------*/

 /*--- Data Types independent of Interfaces --------------------------*/
  /* BEGIN %INCLUDE YYRET1 */
 /*--- Return Code                       DiMA/Donat Cornu, 03.2008 ---*/
  /*   END %INCLUDE YYRET1 */
                              /* SBIP#RetCd01_T                       */
  /* BEGIN %INCLUDE YYHDR1 */
 /*--- Header                            DiMA/Donat Cornu, 03.2008 ---*/
  /*   END %INCLUDE YYHDR1 */
                              /* SBIP#Header01_T                      */
  /* BEGIN %INCLUDE YYTYN1 */
 /*--- Typename                          DiMA/Donat Cornu, 03.2008 ---*/
  /*   END %INCLUDE YYTYN1 */
                              /* SBIP#TypeName01_T                    */
  /* BEGIN %INCLUDE YYEX1T */
 /* copybook       :  YYEX1T                                          */
 /*-------------------------------------------------------------------*/
 /* Data type definitions for Exception Handling YYEX1                */
 /*-------------------------------------------------------------------*/

 /*--- Preprocessor --------------------------------------------------*/
  /* BEGIN %XINCLUDE YXNDEF1 */
  /*   END %XINCLUDE YXNDEF1 */
                                            /* is not defined?        */
  /* BEGIN %XINCLUDE YYUSQ */
  /*   END %XINCLUDE YYUSQ */
                                            /* unbounded sequences    */

 /*********************************************************************/
 /*    General Definitions                                            */
 /*********************************************************************/
  define alias
  GEDD#TI#P#UTC_1_T char(32);

 /* Bounded sequence wrapper for StringM80_1, maximal size 10         */
  define structure
  1 StringM80_1_BSeq10_T,
    3 cnt bin fixed(31),
    3 * char(4),
    3 ele(10) char(80) varying;

 /*********************************************************************/
 /*    Business Exception                                             */
 /*********************************************************************/

 /* 1 busEx GEDD#IF#P#BusinessException_1_Opt_T                       */
 /*   3 isNull bit(1) aligned                                         */
 /*   3 * char(7)                                                     */
 /*   3 val GEDD#IF#P#BusinessException_1_T                           */
 /*     5 cd char(8)                                                  */
 /*     5 params StringM80_1_BSeq10_T                                 */
 /*       7 cnt bin fixed(31)                                         */
 /*       7 * char(4)                                                 */
 /*       7 ele(10) char(80) varying                                  */
 /*     5 occurrenceTime GEDD#TI#P#UTC_1_T                            */
 /*       " char(32)                                                  */

  define structure
  1 GEDD#IF#P#BusinessException_1_T,
    3 cd char(8),
    3 params type StringM80_1_BSeq10_T,
    3 occurrenceTime type GEDD#TI#P#UTC_1_T;

 /* Optional wrapper for BusinessException                            */
  define structure
  1 GEDD#IF#P#BusinessException_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#IF#P#BusinessException_1_T;

 /*********************************************************************/
 /*    Attention                                                      */
 /*********************************************************************/

 /* 1 att GEDD#IF#P#Attention_1_Opt_T                                 */
 /*   3 isNull bit(1) aligned                                         */
 /*   3 * char(7)                                                     */
 /*   3 val GEDD#IF#P#Attention_1_T                                   */
 /*     5 cd char(8)                                                  */
 /*     5 params StringM80_1_BSeq10_T                                 */
 /*       7 cnt bin fixed(31)                                         */
 /*       7 * char(4)                                                 */
 /*       7 ele(10) char(80) varying                                  */
 /*     5 logId char(100) varying                                     */
 /*     5 logEntryId char(100) varying                                */

  define structure
  1 GEDD#IF#P#Attention_1_T,
    3 cd char(8),
    3 params type StringM80_1_BSeq10_T,
    3 logId char(100) varying,
    3 logEntryId char(100) varying;
  define structure
  1 GEDD#IF#P#Attention_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#IF#P#Attention_1_T;

 /*********************************************************************/
 /*    System Exception                                               */
 /*********************************************************************/

 /* 1 sysEx GEDD#IF#P#SystemException_1_Opt_T                         */
 /*   3 isNull bit(1) aligned                                         */
 /*   3 * char(7)                                                     */
 /*   3 val GEDD#IF#P#SystemException_1_T                             */
 /*     5 cd char(8)                                                  */
 /*     5 occurrenceTime GEDD#TI#P#UTC_1_T                            */
 /*       " char(32)                                                  */
 /*     5 sourceId char(100) varying                                  */
 /*     5 posInSource char(10)                                        */
 /*     5 logId char(100) varying                                     */
 /*     5 logEntryId char(100) varying                                */
 /*     5 sysExTrace GEDD#IF#P#SystemExceptionTrace_1_USeq_T          */
 /*     --- Seq. Element SystemExceptionTrace: Start ---              */
 /*       7 systemExceptionTrace GEDD#IF#P#SystemExceptionTrace_1_T   */
 /*         9 cd char(8)                                              */
 /*         9 sourceId char(100) varying                              */
 /*         9 logId char(100) varying                                 */
 /*         9 logEntryId char(100) varying                            */
 /*     --- Seq. Element SystemExceptionTrace: End ---                */

  define structure
  1 GEDD#IF#P#SystemExceptionTrace_1_T,
    3 cd char(8),
    3 sourceId char(100) varying,
    3 logId char(100) varying,
    3 logEntryId char(100) varying;

 /* Unbounded sequence wrapper for SystemExceptionTrace               */
 define structure
   1 GEDD#IF#P#SystemExceptionTrace_1_USeq_T,
     3 type_check handle(GEDD#IF#P#SystemExceptionTrace_1_T),
     3 usq_ext pointer,
     3 trace bin fixed(31),
     3 * pointer;
  define structure
  1 GEDD#IF#P#SystemException_1_T,
    3 cd char(8),
    3 occurrenceTime type GEDD#TI#P#UTC_1_T,
    3 sourceId char(100) varying,
    3 posInSource char(10),
    3 logId char(100) varying,
    3 logEntryId char(100) varying,
    3 sysExTrace type GEDD#IF#P#SystemExceptionTrace_1_USeq_T;
  define structure
  1 GEDD#IF#P#SystemException_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#IF#P#SystemException_1_T;

 /*--- End of Copybook YYEX1T ----------------------------------------*/
  /*   END %INCLUDE YYEX1T */
                              /* exceptions                           */

 /*--- Data Type Definitions -----------------------------------------*/
 /* The Business Unit Identifier is the one-to-one identifier of      */
 /* Business Units. A Business Unit Identifier is made up of 4 digits */
 /* and indefinitely valid i.e. after liquidation of the Business     */
 /* Unit never reused. The Business Unit Identifier is in no way      */
 /* meaningful, i.e. without any evidence of Legal Entity, Country,   */
 /* Organizational Unit/Instradierung, IT Infrastructure, etc.   A    */
 /* Business Unit (BU) is a separate part of the bank, that is a      */
 /* specific business area (e.g. CS Private Banking Switzerland)      */
 /* within a legal entity or is itself a legal entity (LE, e.g. Neue  */
 /* Aargauer Bank, NAB) that, acting within laws and regulations as   */
 /* well as directives and objectives, autonomously determines how    */
 /* data is to be processed and stored on the IT infrastructure in    */
 /* use, which banking products are offered, to whom, at which        */
 /* conditions and prices, etc.  Every Business Unit possesses an     */
 /* indefinitely valid, unique Business Unit Identifier (BUID) and is */
 /* at any point in time made up of exactly one accountable organizat */
 /* ional unit of the bank?s line organization, along with other      */
 /* associated units in the same country.    Examples:  0015 - NAB    */
 /* 0020 - CLEU   See also:  http://csintra                           */
 /* .net/pb_operations_structuraldata/doc/buid_bezeichnungen_en.xls   */
 /* http://csintra.net/pb_operations_structuraldata/doc/buid_company  */
 /* .xls                                                              */
 /* Constraint(s) on data type BUId:                                  */
 /* id 1 : accepted characters: 0..9                                  */
 /* id 2 : # of characters: 4-digits                                  */
 /* id 3 : to zeroize                                                 */
 /* BUId type version 1                                               */
  define alias
  OEST#BU#P#BUId_1_T char(4);

 /* Language Selection                                                */
  define ordinal
  MECC#AB#P#LanguageSelection_1_T(
   /* case 1, default                                                 */
   MECC#AB#P#LANGUAGESELECTION_1_BUDEF value(0),
   /* case 2                                                          */
   MECC#AB#P#LANGUAGESELECTION_1_CDCS value(1),
   /* case 3                                                          */
   MECC#AB#P#LANGUAGESELECTION_1_CDISO value(2))
  precision (31) signed;

 /* A numerical code to identify the language according to the CS     */
 /* codetable. Currently, only 0 to 99 are legal. If only two digits  */
 /* are used a leading zero has to be inserted.   Examples:  '001'    */
 /* (German)  '002' (Italian)  '003' (French)  '004' (English)        */
 /* Constraint(s) on data type LanguageCdCS:                          */
 /* id 1 : value range: code table 950                                */
 /* LanguageCdCS type version 1                                       */
  define alias
  GEDD#IL#P#LanguageCdCS_1_T char(3);

 /* Optional wrapper for LanguageCdCS                                 */
  define structure
  1 GEDD#IL#P#LanguageCdCS_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#IL#P#LanguageCdCS_1_T;

 /* Two-character language code according to the ISO 639-1 standard.  */
 /* Examples:  'de' (German)  'fr' (French)  'it' (Italian)  'en'     */
 /* (English)   See also:  http://www.loc                             */
 /* .gov/standards/iso639-2/php/code_list.php  http://en.wikipedia    */
 /* .org/wiki/ISO_639                                                 */
 /* LanguageCdISO type version 1                                      */
  define alias
  GEDD#IL#P#LanguageCdISO_1_T char(2);

 /* Optional wrapper for LanguageCdISO                                */
  define structure
  1 GEDD#IL#P#LanguageCdISO_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#IL#P#LanguageCdISO_1_T;

 /* For language dependent parameters. Empty: No language dependent   */
 /* properties are returned                                           */
  define structure
  1 MECC#AB#P#Language_1_T,
    3 selection type MECC#AB#P#LanguageSelection_1_T,
    3 languageCSCd type GEDD#IL#P#LanguageCdCS_1_Opt_T,
    3 languageIsoCd type GEDD#IL#P#LanguageCdISO_1_Opt_T;

 /* Optional wrapper for Language                                     */
  define structure
  1 MECC#AB#P#Language_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type MECC#AB#P#Language_1_T;

 /* Date, based on the Gregorian calendar, represented according the  */
 /* ISO 8601 standard in the basic format [YYYYMMDD]0 dates prior 15  */
 /* October 1582 ("15821015") are not valid, because of the introduct */
 /* ion of the Gregorian Calendar by this date.  Special semantic     */
 /* interpretation for following specific dates:  "99991231" is       */
 /* interpreted as undefined in future   See also:  http://www.iso    */
 /* .org/iso/support/faqs/faqs_widely_used_standards/widely_used_stan */
 /* dards_other/date_and_time_format.htm  http://en.wikipedia         */
 /* .org/wiki/ISO_8601#Calendar_dates                                 */
 /* Constraint(s) on data type Date:                                  */
 /* id 1 :  Accepted characters: 0..9                                 */
 /* id 2 : Exactly 8 characters must be entered                       */
 /* id 3 : Range: 15821015 - 29991231, except 99991231                */
 /* id 4 : Further constraints:  a) 01 <= MM <= 12  b) 01 <= dd <= 28 */
 /* or 29 or 30 or 31, according to the Gregorian calendar  c)        */
 /* Special value 99991231: nonterminating (unendlich)/undefined      */
 /* (unbestimmt)                                                      */
 /* Date type version 1                                               */
  define alias
  GEDD#TI#P#Date_1_T char(8);

 /* Optional wrapper for Date                                         */
  define structure
  1 GEDD#TI#P#Date_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#TI#P#Date_1_T;
  define structure
  1 Bu0140B#In_T,
    3 typeName type SBIP#TypeName01_T,
    3 buId type OEST#BU#P#BUId_1_T,
    3 language type MECC#AB#P#Language_1_Opt_T,
    3 validAsPerDate type GEDD#TI#P#Date_1_Opt_T;

 /* Lifecycle states of a business object                             */
 /* Constraint(s) on data type LifeCycleStateCd:                      */
 /* id 1 : Possible transitions:  Inexistent > Tentative  Inexistent  */
 /* > Active  Transitions within Current  Tentative > Active  Active  */
 /* > Closing in progress  Transition from Current to Finished        */
 /* Tentative > Nullified  Active > Closed  Active > Disused  Closing */
 /* in progress > Closed  Transition to end  Nullified > Inexistent   */
 /* Closed > Inexistent  Disused > Inexistent  Refer to the attached  */
 /* transition diagram for more details.                              */
 /* id 2 : accepted characters: '0' = Inexistent '1' = Tentative '2'  */
 /* = Active '4' = Closing in progress '7' = Closed '8' = Disused '9' */
 /* = Nullified                                                       */
 /* LifeCycleStateCd type version 2                                   */
  define alias
  GEDD#ST#P#LifeCycleStateCd_2_T char(1);

 /* Mnemotechnisch gebildete K|rzestform eines Namens.   Beispiel:    */
 /* 'CSPB' (Business unit short name)  'CLEU' (Business unit short    */
 /* name)  'CSGN' (Instrument symbol)  'JPM ' (Instrument symbol)     */
 /* Constraint(s) on data type Abbreviation:                          */
 /* id 1 : An abbreviation is case insensitive and consists of latin  */
 /* characters. Abbreviations are left adjusted and do not contain    */
 /* spaces.                                                           */
 /* Abbreviation type version 1                                       */
  define alias
  GEDD#NA#P#Abbreviation_1_T char(4);

 /* A numerical identifier for the legal entity (Juristische          */
 /* Einheit).   A legal entity (of the bank) is a company that is     */
 /* active in the financial industry and incorporated and registered  */
 /* as a legally independent enterprise with an officially registered */
 /* name in the jurisdiction of its incorporation0 it is subject to   */
 /* supervision by the competent authorities of the jurisdiction or   */
 /* country, respectively, of its headquarters. It is capable of      */
 /* engaging in activity as soon as the company's governing bodies,   */
 /* as required pursuant to local law and the company's by-laws, have */
 /* been appointed. It may incur rights and obligations and may sue   */
 /* or be sued.  Subsidiaries are legal entities, whereas branches    */
 /* and representative offices are extensions of an existing legal    */
 /* entity. However, from an bank-operational perspective, all        */
 /* branches and representative offices domiciled in any foreign      */
 /* country are treated as separate legal entities, supplementing the */
 /* official name of the legal entity with a corresponding identifier */
 /* , e.g. "Austrian Branch".  Furthermore, for operational purposes, */
 /* a company that continuously executes tasks on behalf and for      */
 /* account of the Bank, on the basis of an outsourcing agreement, is */
 /* treated as a legal entity, to which the mandated employees (IT    */
 /* users) are allocated.                                             */
 /* Constraint(s) on data type LegalEntityId:                         */
 /* id 1 : value range: 5343A                                         */
 /* LegalEntityId type version 1                                      */
  define alias
  OEST#BU#P#LegalEntityId_1_T char(4);

 /* The platform code is a unique code that is assigned to every      */
 /* existing ITPlatform.  An ITPlatform is entirety of the logical IT */
 /* systems used by one (ore more) Business Unit(s), that offers      */
 /* certain interfaces for communication and is perceived from the    */
 /* outside as one integral unit.                                     */
 /* PlatformCd type version 1                                         */
  define alias
  GEDD#IF#P#PlatformCd_1_T char(4);

 /* Optional wrapper for PlatformCd                                   */
  define structure
  1 GEDD#IF#P#PlatformCd_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#IF#P#PlatformCd_1_T;

 /* General part of the Output-Structure for the service getBusinessU */
 /* nit                                                               */
 /* Constraint(s) on data type BUGeneral:                             */
 /* id 1 : numberingBUClusterId: fix coded 0001                       */
 /* id 2 : platformId: fix coded 0001                                 */
  define structure
  1 MECC#AB#P#BUGeneral_3_T,
    3 lifeCycleStateCd type GEDD#ST#P#LifeCycleStateCd_2_T,
    3 buAbbreviation type GEDD#NA#P#Abbreviation_1_T,
    3 legalEntityId type OEST#BU#P#LegalEntityId_1_T,
    3 itPlatformId type GEDD#IF#P#PlatformCd_1_Opt_T;

 /* Credit Suisse specific country code.   Examples:  044 - Germany   */
 /* 210 - Switzerland  290 - China   See also:  http://csintra        */
 /* .net/pb_isp_advisory_orderfulfillment/doc/equities/countries_code */
 /* s.pdf                                                             */
 /* Constraint(s) on data type CountryCdCS:                           */
 /* id 1 : code table 5001                                            */
 /* CountryCdCS type version 1                                        */
  define alias
  GEDD#IL#P#CountryCdCS_1_T char(3);

 /* Two-letter country code, uppercase, according to the ISO 3166-1   */
 /* alpha-2 standard, representing countries and dependent territorie */
 /* s.   Examples:  CH - Switzerland  CN - China  DE - Germany   See  */
 /* also:  http://www.iso.org/iso/country_codes/iso_3166_code_lists/e */
 /* nglish_country_names_and_code_elements.htm                        */
 /* Constraint(s) on data type CountryCdISO:                          */
 /* id 1 : code table 5001                                            */
 /* CountryCdISO type version 1                                       */
  define alias
  GEDD#IL#P#CountryCdISO_1_T char(2);

 /* A TimeZoneId is the enduring, unique, alphanumeric but not        */
 /* case-sensitive identifier of a geographical area where time is    */
 /* uniformly used and autonomously regulated by law.  TimeZoneIds    */
 /* are assigned by IANA (Internet Assigned Numbers Authority),       */
 /* according to RFC 4647 and IETF's BCP 47 (Best Current Practice    */
 /* 47), maintained in CLDR (Unicode Common Locale Data Repository).  */
 /* - Accepted characters are a..z, 0..9 - Min size of property       */
 /* value: 3 char - Max size of property value: 8 char                */
 /* Constraint(s) on data type TimeZoneId:                            */
 /* id 1 : The special ?generalized? identifiers utc, utce01, ...,    */
 /* utce14, utcw01, ?, utcw12 should be accepted for valid in         */
 /* particular cases only                                             */
 /* id 2 : The ?unkown? identifier unk (Etc/Unknown) to use in        */
 /* extraordinary cases only                                          */
 /* TimeZoneId type version 1                                         */
  define alias
  GEDD#TI#P#TimeZoneId_1_T char(8) varying;

 /* Optional wrapper for TimeZoneId                                   */
  define structure
  1 GEDD#TI#P#TimeZoneId_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#TI#P#TimeZoneId_1_T;

 /* Geographic part of the Output-Structure for the service getBusine */
 /* ssUnit                                                            */
 /* Constraint(s) on data type BUGeographic:                          */
 /* id 1 : timeZoneId: currently not supported                        */
  define structure
  1 MECC#AB#P#BUGeographic_3_T,
    3 defaultLanguageCSCd type GEDD#IL#P#LanguageCdCS_1_T,
    3 defaultLanguageIsoCd type GEDD#IL#P#LanguageCdISO_1_T,
    3 countryCSCd type GEDD#IL#P#CountryCdCS_1_T,
    3 countryIsoCd type GEDD#IL#P#CountryCdISO_1_T,
    3 timeZoneId type GEDD#TI#P#TimeZoneId_1_Opt_T;

 /*  Credit Suisse specific currency code, 4-digit numeric, right-ali */
 /* gned with leading zeros.   Examples:  0002 - Euro  0010 - Swiss   */
 /* francs  0335 - Yen   See also:  http://csintra                    */
 /* .net/pb_isp_advisory_orderfulfillment/doc/equities/countries_code */
 /* s.pdf                                                             */
 /* Constraint(s) on data type CurrencyCdCS:                          */
 /* id 1 : value range: code table 5020                               */
 /* CurrencyCdCS type version 1                                       */
  define alias
  GEDD#IL#P#CurrencyCdCS_1_T char(4);

 /* Optional wrapper for CurrencyCdCS                                 */
  define structure
  1 GEDD#IL#P#CurrencyCdCS_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#IL#P#CurrencyCdCS_1_T;

 /*  3 letter currency code, uppercase according to the ISO 4217      */
 /* standard.  The first two letters (except EURO) of the code are    */
 /* the two letters of ISO 3166-1 alpha-2 country codes (which are    */
 /* also used as the basis for national top-level domains on the      */
 /* Internet) and the third is usually the initial of the currency    */
 /* itself. So Japan's currency code becomes JPY?JP for Japan and Y   */
 /* for yen.   3-stelliger Wdhrungscode in Grossbuchstaben, gemdss    */
 /* dem ISO 4217 Standard.  Der Wdhrungscode wird gebildet aus dem    */
 /* 2-stelligen Ldndercode (Ausnahme EURO) gemdss ISO 3166-1 alpha-2  */
 /* und f|r die dritte Stelle normalerweise aus dem Anfangsbuchstaben */
 /* der Wdhrung. Z.B. Japans Wdhrungscode lautet JPY - "JP" f|r Japan */
 /* und "Y" f|r Yen.   Examples:  'CHF' - Swiss francs  'EUR' - Euro  */
 /* 'JPY' - Yen   See also:  http://www.iso                           */
 /* .org/iso/support/currency_codes_list-1.htm or  http://www.iso     */
 /* .org/iso/support/faqs/faqs_widely_used_standards/widely_used_stan */
 /* dards_other/currency_codes/currency_codes_list-1.htm              */
 /* Constraint(s) on data type CurrencyCdISO:                         */
 /* id 1 : value range: code table 5020                               */
 /* CurrencyCdISO type version 1                                      */
  define alias
  GEDD#IL#P#CurrencyCdISO_1_T char(3);

 /* Optional wrapper for CurrencyCdISO                                */
  define structure
  1 GEDD#IL#P#CurrencyCdISO_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#IL#P#CurrencyCdISO_1_T;

 /* A business unit cluster is a defined set of business units, which */
 /* utilize the same numbering space to allocate a one-to-one         */
 /* internal/operational number to an agreement, and CIF respectively */
 /* .  A business unit cluster identification is the unique nummerica */
 /* l identifier of the business unit clusters.  4-digit nummerical,  */
 /* right aligned with leading zeroes  Per example: 0009, 0011, 0012  */
 /* BUClusterId type version 1                                        */
  define alias
  GEDD#BU#P#BUClusterId_1_T char(4);

 /* Optional wrapper for BUClusterId                                  */
  define structure
  1 GEDD#BU#P#BUClusterId_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#BU#P#BUClusterId_1_T;

 /* Optional wrapper for BUId                                         */
  define structure
  1 OEST#BU#P#BUId_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type OEST#BU#P#BUId_1_T;

 /* The prefixFinancialAccounting is the code for BUID that is used   */
 /* in PSFT GL. (The transition is performed in the domain AOC.)      */
 /* Explanation: Actually the mapping from BUIDs to prefixFinancialAc */
 /* counting is done in table 5341. It is not the prefix that links   */
 /* internal accounts or cash accounts for affiliates to a BUID but   */
 /* has the same scheme                                               */
 /* PrefixFinancialAccounting type version 1                          */
  define alias
  MECC#AB#P#PrefixFinancialAccounting_1_T char(4);

 /* Optional wrapper for PrefixFinancialAccounting                    */
  define structure
  1 MECC#AB#P#PrefixFinancialAccounting_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type MECC#AB#P#PrefixFinancialAccounting_1_T;

 /* Die Reporting Units sind definiert durch die Bed|rfnisse des      */
 /* Konzerns hinsichtlich interner und externer Rechnungslegung.      */
 /* Reporting Units f|hren im Normalfall eine selbstdndige Finanzbuch */
 /* haltung und ihre Beziehungen innerhalb eines Konzerns m|ssen auf  */
 /* der Ebene "Reporting Unit" gegeneinander ausgewiesen werden       */
 /* (Intercompany).                                                   */
 /* Constraint(s) on data type ReportingUnit:                         */
 /* id 1 : accepted characters: 0..9                                  */
 /* id 2 : value range: code table 50102  complete list see:          */
 /* https://onejap.csintra.net:29289/adac/net?page=InfMgmtUnitList&en */
 /* tryNavItem=IM3&RefreshHttpParms=InfMgmtUnitList&valueEntryAllowed */
 /* =false                                                            */
 /* id 3 : # of characters: 4-digits                                  */
 /* id 4 : to zeroize                                                 */
 /* ReportingUnit type version 1                                      */
  define alias
  GRCS#RU#P#ReportingUnit_1_T char(4);

 /* Optional wrapper for ReportingUnit                                */
  define structure
  1 GRCS#RU#P#ReportingUnit_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GRCS#RU#P#ReportingUnit_1_T;

 /* The Value Added Tax Identification Number (VAT UID0 German:       */
 /* Umsatzsteuer Identifikationsnummer (UID)) is a pan-European       */
 /* unique identification number of a VAT liable company (German:     */
 /* Umsatzsteuerpflichtiger). The VAT UID is required to sell and     */
 /* purchase goods and services within the European Community         */
 /* (German:  Europdische Gemeinschaft).  Some countries have only    */
 /* the VAT RID (refer to definition vatRI)D) and treat in the "daily */
 /* business" very often the VAT RID and VAT UID equally and do not   */
 /* distinguish between the two Ids. Therefore the service gives the  */
 /* same value (including the history) for VAT UID back when only the */
 /* VAT RID known.  Please refer also to the description of the       */
 /* vatUID of this service. Because of the situation that in some     */
 /* countries the vatRID and vatUID treated as the "same" or only one */
 /* of the Ids exists (e.g. Switzerland) , it is very important to    */
 /* evaluate the usage of vatRID or vatUID against the individual     */
 /* requirements very carefully.                                      */
 /* VatUid type version 1                                             */
  define alias
  GEDD#NO#P#VatUid_1_T char(20);

 /* Optional wrapper for VatUid                                       */
  define structure
  1 GEDD#NO#P#VatUid_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#NO#P#VatUid_1_T;

 /* The tax registration number (German: Steuerregisternummer) or tax */
 /* identification number (German: Steuernummer), abbreviation: VAT   */
 /* RID) The VAT RID is the official identification number of a tax   */
 /* liable person or company at the tax authorities in the tax        */
 /* control register (German: Steuerregister). The VAT RID is used as */
 /* identification and reference for any communication between the    */
 /* tax authorities and the tax liable  person or company.   The term */
 /* VAT RID is only used within the Credit Suisse. Outside Credit     */
 /* Suisse the term Value Added Tax Number (VAT Number) is commonly   */
 /* used.  Some countries have only the VAT RID and treat in the      */
 /* "daily business" very often the VAT RID and VAT UID (refer to     */
 /* defintion vatUID) equally and do not distinguish between the two  */
 /* Ids. Therefore the service gives the same value (including the    */
 /* history) for VAT UID back when only the VAT RID known.  Please    */
 /* refer also to the description of the vatUID of this service.      */
 /* Because of the situation that in some countries the vatRID and    */
 /* vatUID treated as the "same" or only one of the Ids exists (e.g.  */
 /* Switzerland) , it is very important to evaluate the usage of      */
 /* vatRID or vatUID against the individual requirements very         */
 /* carefully.   Note on previous versions of the service: Applicatio */
 /* n which used the VAT Number of the previous versions of the       */
 /* service should now use the vatRID, because from a tax perspective */
 /* the VAT RID the successor of the VAT Number.                      */
 /* VatRid type version 1                                             */
  define alias
  GEDD#NO#P#VatRid_1_T char(20);

 /* Optional wrapper for VatRid                                       */
  define structure
  1 GEDD#NO#P#VatRid_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type GEDD#NO#P#VatRid_1_T;

 /* Wrapper for inline structure of field financials in structure     */
 /* MECC#AB#P#BUOperational_4_T                                       */
  define structure
  1 MECC#AB#P#BUOperational_4_I1Financials_T,
    3 functionalCurrencyCSCd type GEDD#IL#P#CurrencyCdCS_1_Opt_T,
    3 functionalCurrencyIsoCd type GEDD#IL#P#CurrencyCdISO_1_Opt_T,
    3 localBusCurrencyCSCd type GEDD#IL#P#CurrencyCdCS_1_Opt_T,
    3 localBusCurrencyIsoCd type GEDD#IL#P#CurrencyCdISO_1_Opt_T,
    3 clearingBUClusterId type GEDD#BU#P#BUClusterId_1_Opt_T,
    3 gliChartManagingBUId type OEST#BU#P#BUId_1_Opt_T,
    3 prefixFinancialAcc type
     MECC#AB#P#PrefixFinancialAccounting_1_Opt_T,
    3 adacReportingUnit type GRCS#RU#P#ReportingUnit_1_Opt_T,
    3 vatUID type GEDD#NO#P#VatUid_1_Opt_T,
    3 vatRID type GEDD#NO#P#VatRid_1_Opt_T;

 /* tbd                                                               */
 /* SecProcEntity type version 1                                      */
  define alias
  MECC#AB#P#SecProcEntity_1_T char(4);

 /* Optional wrapper for SecProcEntity                                */
  define structure
  1 MECC#AB#P#SecProcEntity_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type MECC#AB#P#SecProcEntity_1_T;

 /* Wrapper for inline structure of field securities in structure     */
 /* MECC#AB#P#BUOperational_4_T                                       */
  define structure
  1 MECC#AB#P#BUOperational_4_I2Securities_T,
    3 secProcBUId type OEST#BU#P#BUId_1_Opt_T,
    3 secProcEntity type MECC#AB#P#SecProcEntity_1_Opt_T;

 /* Bank Identifier Code (BIC)   To ensure the availability of a      */
 /* unique identifier, an International Standard - ISO 9362 - has     */
 /* been established. This standard specifies a universal method for  */
 /* identifying financial institutions and is intended to facilitate  */
 /* automated processing of telecommunication messages.   It is the   */
 /* unique identification code of a financial institution. This code  */
 /* is used when transferring money between banks, particularly for   */
 /* international wire transfers, and also for the exchange of other  */
 /* messages between banks. The codes can sometimes be found on       */
 /* account statements.   Example:  'CRESZHZZ80A' (Credit Suisse,     */
 /* 8070 Z|rich)   Also known as:  SWIFT-BIC, SWIFT ID or SWIFT code  */
 /* See also:  http://swift.csintra.net/user_handbook_2008_E/subscrib */
 /* er/en_uk/2/usgi/b20.htm  http://www.swift.com/biconline/          */
 /* http://en.wikipedia.org/wiki/ISO_9362                             */
 /* Constraint(s) on data type BIC:                                   */
 /* id 1 : Accepted characters: A..Z, 0..9                            */
 /* id 2 : Components of a BIC Character 1 to 4, BANK CODE: A..Z      */
 /* Character 5 and 6, COUNTRY CODE: A..Z Character 7 and 8, LOCATION */
 /* CODE: A..Z, 0..9 Character 9-11, BRANCH CODE (optional, defined   */
 /* by the institutions): A..Z, 0..9                                  */
 /* id 3 : # of characters: absolute min=8, absolute max=11           */
 /* BIC type version 1                                                */
  define alias
  MSHD#CP#P#BIC_1_T char(11);

 /* Optional wrapper for BIC                                          */
  define structure
  1 MSHD#CP#P#BIC_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type MSHD#CP#P#BIC_1_T;

 /* tbd                                                               */
 /* CdsSchemaId type version 1                                        */
  define alias
  MECC#AB#P#CdsSchemaId_1_T char(4);

 /* Optional wrapper for CdsSchemaId                                  */
  define structure
  1 MECC#AB#P#CdsSchemaId_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type MECC#AB#P#CdsSchemaId_1_T;

 /*  Branch code (Bankstellen Code)   Bankniederlassung an einer      */
 /* bestimmten postalischen Adresse.   Beispiel:  '0223' (WORB)       */
 /* Constraint(s) on data type BranchCd:                              */
 /* id 1 : Accepted characters: 4-digits, numeric                     */
 /* id 2 : Value range: 6021                                          */
 /* id 3 : deprecated                                                 */
 /* BranchCd type version 1                                           */
  define alias
  OEST#OU#P#BranchCd_1_T char(4);

 /* Optional wrapper for BranchCd                                     */
  define structure
  1 OEST#OU#P#BranchCd_1_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type OEST#OU#P#BranchCd_1_T;

 /* Wrapper for inline structure of field others in structure         */
 /* MECC#AB#P#BUOperational_4_T                                       */
  define structure
  1 MECC#AB#P#BUOperational_4_I3Others_T,
    3 senderBIC type MSHD#CP#P#BIC_1_Opt_T,
    3 numberingBUClusterId type GEDD#BU#P#BUClusterId_1_Opt_T,
    3 cdsSchemaId type MECC#AB#P#CdsSchemaId_1_Opt_T,
    3 headquartersBranchId type OEST#OU#P#BranchCd_1_Opt_T;

 /* Operational part of the Output-Structure for the service          */
 /* getBusinessUnit                                                   */
  define structure
  1 MECC#AB#P#BUOperational_4_T,
    3 financials type MECC#AB#P#BUOperational_4_I1Financials_T,
    3 securities type MECC#AB#P#BUOperational_4_I2Securities_T,
    3 others type MECC#AB#P#BUOperational_4_I3Others_T;

 /* Short denotation of a business object   Examples:  'CSG AG'  'CS  */
 /* GROUP N'  'Flex Hypo'                                             */
 /* ShortName type version 1                                          */
  define alias
  GEDD#NA#P#ShortName_1_T char(10);

 /* Denotation of a business object   Examples:  'Credit Suisse Group */
 /* AG'  'Z|rich'  'Switzerland'  'Schweiz'  'Flex Hypothek'          */
 /* Constraint(s) on data type Name:                                  */
 /* id 1 : alphanummeric a-z, A-Z, 0-9                                */
 /* id 2 : special characters allowed                                 */
 /* id 3 : case sensitive                                             */
 /* id 4 : no leading spaces                                          */
 /* Name type version 1                                               */
  define alias
  GEDD#NA#P#Name_1_T char(35);

 /* Language dependent attributes.                                    */
  define structure
  1 MECC#AB#P#BULanguageDep_2_T,
    3 buShortName type GEDD#NA#P#ShortName_1_T,
    3 buName type GEDD#NA#P#Name_1_T,
    3 legalEntityName type GEDD#NA#P#Name_1_T;

 /* Optional wrapper for BULanguageDep                                */
  define structure
  1 MECC#AB#P#BULanguageDep_2_Opt_T,
    3 isNull bit(1) aligned,
    3 * char(7),
    3 val type MECC#AB#P#BULanguageDep_2_T;
  define structure
  1 Bu0140B#Out_T,
    3 typeName type SBIP#TypeName01_T,
    3 general type MECC#AB#P#BUGeneral_3_T,
    3 geographic type MECC#AB#P#BUGeographic_3_T,
    3 operational type MECC#AB#P#BUOperational_4_T,
    3 languageDependent type MECC#AB#P#BULanguageDep_2_Opt_T,
    3 busEx type GEDD#IF#P#BusinessException_1_Opt_T;

 /*--- Input ---------------------------------------------------------*/
 dcl BU0140B#IN_TYPE             type SBIP#TypeName01_T
                             value('Bu0140B#In_T');

 /*--- Output --------------------------------------------------------*/
 dcl BU0140B#OUT_TYPE            type SBIP#TypeName01_T
                             value('Bu0140B#Out_T');

 /*--- Constants -----------------------------------------------------*/

 dcl BU0140B#BUS_EX_BU000004_LANG_ISO_CD_NOT_VALID char
      value('BU000004');

 dcl BU0140B#BUS_EX_BU000001_BUID_NOT_VALID char
      value('BU000001');

 dcl BU0140B#BUS_EX_BU000006_VALID_AS_PER_DATE_NOT_VALID char
      value('BU000006');

 dcl BU0140B#BUS_EX_BU000002_LANG_SWITCH_NOT_VALID char
      value('BU000002');

 dcl BU0140B#BUS_EX_BU000003_LANG_CS_CD_NOT_VALID char
      value('BU000003');

 dcl BU0140B#SYS_EX_IJ000002_OUTAGE_UNAVAILABLE_RESOURCE char
      value('IJ000002');

 dcl BU0140B#SYS_EX_IJ000001_OUTAGE_UNAVAILABLE_SERVICE char
      value('IJ000001');

 /*--- End of Copybook bu0140BT --------------------------------------*/


  /*   END %XINCLUDE BU0140BT */
                      /* getBusinessUnit 4.0                          */

 dcl bu01401 entry() abnormal;  /* for CS-bind on host                */

 /*--- getBusinessUnit 4.0 -------------------------------------------*/
 /*  %@IF002335#GET_BUSINESS_UNIT_4_0 =                               */
 /*  'bu0140B /* @IF002335#GET_BUSINESS_UNIT_4_0                      */

 dcl bu0140B /* @IF002335#GET_BUSINESS_UNIT_4_0 */ entry

       (type SBIP#RetCd01_T,
        type SBIP#Header01_T nonasgn,
        type Bu0140B#In_T nonasgn,
        type Bu0140B#Out_T,
        type GEDD#IF#P#SystemException_1_Opt_T);

 /*--- getBusinessUnit 4.0: Input Initialization ---------------------*/
 /*  %@IF002335#GET_BUSINESS_UNIT_4_0_INPUT_INIT =                    */
 /*  'bu0140I /* @IF002335#GET_BUSINESS_UNIT_4_0_INPUT_INIT           */

 dcl bu0140I /* @IF002335#GET_BUSINESS_UNIT_4_0_INPUT_INIT */ entry

       (type Bu0140B#In_T);

 /*--- getBusinessUnit 4.0: Puts -------------------------------------*/
 /*  %@IF002335#GET_BUSINESS_UNIT_4_0_PUT =                           */
 /*  'bu0140P /* @IF002335#GET_BUSINESS_UNIT_4_0_PUT                  */

 dcl bu0140P /* @IF002335#GET_BUSINESS_UNIT_4_0_PUT */ entry

       (type SBIP#RetCd01_T nonasgn optional,
        type SBIP#Header01_T nonasgn optional,
        type Bu0140B#In_T nonasgn optional,
        type Bu0140B#Out_T nonasgn optional,
        type GEDD#IF#P#SystemException_1_Opt_T nonasgn optional);

 /*--- getBusinessUnit 4.0: Frees ------------------------------------*/
 /*  %@IF002335#GET_BUSINESS_UNIT_4_0_FREE =                          */
 /*  'bu0140F /* @IF002335#GET_BUSINESS_UNIT_4_0_FREE                 */

 dcl bu0140F /* @IF002335#GET_BUSINESS_UNIT_4_0_FREE */ entry

       (

        type GEDD#IF#P#SystemException_1_Opt_T);

 /*--- End of Copybook bu01401 ---------------------------------------*/


  /*   END %INCLUDE BU01401 */
                    /* getBusinessUnit 4.0                            */

 /*--- Application Landscape -----------------------------------------*/
 dcl   retCd                 type SBIP#RetCd01_T;
 dcl 1 header                type SBIP#Header01_T;
 dcl 1 sysEx                 type GEDD#IF#P#SystemException_1_Opt_T;

 /*--- getBusinessUnit 4.0 -------------------------------------------*/
 dcl 1 getBusinessUnitIn  type Bu0140B#In_T;
 dcl 1 getBusinessUnitOut type Bu0140B#Out_T;

 /*--- Miscellaneous -------------------------------------------------*/
 dcl   sourceName            char(8) varying;

 /*--- Preprocessing -------------------------------------------------*/
 sourceName = procName();

 /*--- Header Data ---------------------------------------------------*/
 call yyHdr1I /* @SBIP#HEADER_01_INIT */ (header);


 If $@PARM8 = 'Y'
 then header.traceLevel = SBIP#TRACE_LEVEL_01_VERBOSE;
 else header.traceLevel = SBIP#TRACE_LEVEL_01_SILENT;

 header.applId     = 'EOSP';
 header.retCdTrace = SBIP#RET_CD_01_SYS_EX;

 /*-------------------------------------------------------------------*/
 /* Structure for PDF Metadata Tags.                                  */
 /*-------------------------------------------------------------------*/
 dcl AttrName            CHAR(04)  INIT('Name');
 dcl AttrValue           CHAR(05)  INIT('Value');

 /*-------------------------------------------------------------------*/
 /*  Include DBox DB2 Table Structures                                */
 /*-------------------------------------------------------------------*/
 Dcl 1 XC401A1T            based(ptrDboxMetadata),
  /* BEGIN %INCLUDE XC401A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:28   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC401A1                           */
 /*********************************************************************/
     5 XC401_CHANNEL                 CHAR(3),
     5 XC401_DOC_UUID                CHAR(36),
     5 XC401_EVENT_UUID              CHAR(36),
     5 XC401_PART_NO                 CHAR(2),
     5 XC401_RECIPIENT_TYPE          CHAR(2),
     5 XC401_RECIPIENT_ID            CHAR(20),
     5 XC401_OWNER_TYPE              CHAR(2),
     5 XC401_OWNER_ID                CHAR(20),
     5 XC401_RELATION_TYPE           CHAR(2),
     5 XC401_RELATION_NO             CHAR(20),
     5 XC401_DOC_SRC_FORMAT          CHAR(3),
     5 XC401_DOC_TYPE                CHAR(4),
     5 XC401_DOC_GROUP               CHAR(4),
     5 XC401_DOC_CATEGORY            CHAR(1),
     5 XC401_RET_CATEGORY            CHAR(7),
     5 XC401_APPL_ID                 CHAR(8),
     5 XC401_DOC_LANG_CODE_CS        CHAR(1),
     5 XC401_DOC_TITLE               CHAR(100),
     5 XC401_DOC_PAGES               BIN FIXED(31),
     5 XC401_IS_ORIGINAL             CHAR(1),
     5 XC401_IS_SIGNED               CHAR(1),
     5 XC401_IS_IMPORTANT            CHAR(1),
     5 XC401_ACCOUNT_TYPE            CHAR(3),
     5 XC401_DEPOSIT_TYPE            CHAR(3),
     5 XC401_SETTLEMENT_NUMBER       CHAR(25),
     5 XC401_IBAN                    CHAR(34),
     5 XC401_IBAN_COUNTER            CHAR(34),
     5 XC401_ACCOUNT_COUNTER         CHAR(34),
     5 XC401_CASH_FLOW               CHAR(1),
     5 XC401_CURRENCY_CODE_ISO       CHAR(3),
     5 XC401_AMOUNT                  DEC FIXED(31,8),
     5 XC401_VALUE_DATE              CHAR(10),
     5 XC401_PERIOD_FROM             CHAR(10),
     5 XC401_PERIOD_TO               CHAR(10),
     5 XC401_BUS_EVENT_DATE          CHAR(10),
     5 XC401_OUT_CREATION_DATE       CHAR(10),
     5 XC401_CUST_ISSUE_DATE         CHAR(10),
     5 XC401_DELETION_DATE           CHAR(10),
     5 XC401_PVS_HEADER              CHAR(254),
     5 XC401_DOC_FILENAME            CHAR(254) VAR,
     5 XC401_INPUT_INFO              CHAR(254) VAR,
     5 XC401_DOC_WEB_URL             CHAR(254) VAR,
     5 XC401_DOC_STATUS              CHAR(2),
     5 XC401_UPDATE_ID               CHAR(8),
     5 XC401_UPDATE_TS               CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 45         */
 /*********************************************************************/
  /*   END %INCLUDE XC401A1T */
 ;

 Dcl 1 DboxStandalone,
  /* BEGIN %INCLUDE XC401A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:28   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC401A1                           */
 /*********************************************************************/
     5 XC401_CHANNEL                 CHAR(3),
     5 XC401_DOC_UUID                CHAR(36),
     5 XC401_EVENT_UUID              CHAR(36),
     5 XC401_PART_NO                 CHAR(2),
     5 XC401_RECIPIENT_TYPE          CHAR(2),
     5 XC401_RECIPIENT_ID            CHAR(20),
     5 XC401_OWNER_TYPE              CHAR(2),
     5 XC401_OWNER_ID                CHAR(20),
     5 XC401_RELATION_TYPE           CHAR(2),
     5 XC401_RELATION_NO             CHAR(20),
     5 XC401_DOC_SRC_FORMAT          CHAR(3),
     5 XC401_DOC_TYPE                CHAR(4),
     5 XC401_DOC_GROUP               CHAR(4),
     5 XC401_DOC_CATEGORY            CHAR(1),
     5 XC401_RET_CATEGORY            CHAR(7),
     5 XC401_APPL_ID                 CHAR(8),
     5 XC401_DOC_LANG_CODE_CS        CHAR(1),
     5 XC401_DOC_TITLE               CHAR(100),
     5 XC401_DOC_PAGES               BIN FIXED(31),
     5 XC401_IS_ORIGINAL             CHAR(1),
     5 XC401_IS_SIGNED               CHAR(1),
     5 XC401_IS_IMPORTANT            CHAR(1),
     5 XC401_ACCOUNT_TYPE            CHAR(3),
     5 XC401_DEPOSIT_TYPE            CHAR(3),
     5 XC401_SETTLEMENT_NUMBER       CHAR(25),
     5 XC401_IBAN                    CHAR(34),
     5 XC401_IBAN_COUNTER            CHAR(34),
     5 XC401_ACCOUNT_COUNTER         CHAR(34),
     5 XC401_CASH_FLOW               CHAR(1),
     5 XC401_CURRENCY_CODE_ISO       CHAR(3),
     5 XC401_AMOUNT                  DEC FIXED(31,8),
     5 XC401_VALUE_DATE              CHAR(10),
     5 XC401_PERIOD_FROM             CHAR(10),
     5 XC401_PERIOD_TO               CHAR(10),
     5 XC401_BUS_EVENT_DATE          CHAR(10),
     5 XC401_OUT_CREATION_DATE       CHAR(10),
     5 XC401_CUST_ISSUE_DATE         CHAR(10),
     5 XC401_DELETION_DATE           CHAR(10),
     5 XC401_PVS_HEADER              CHAR(254),
     5 XC401_DOC_FILENAME            CHAR(254) VAR,
     5 XC401_INPUT_INFO              CHAR(254) VAR,
     5 XC401_DOC_WEB_URL             CHAR(254) VAR,
     5 XC401_DOC_STATUS              CHAR(2),
     5 XC401_UPDATE_ID               CHAR(8),
     5 XC401_UPDATE_TS               CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 45         */
 /*********************************************************************/
  /*   END %INCLUDE XC401A1T */
 ;

 Dcl 1 DboxStandalone1     based(ptrDboxStandaloneMetadata1),
  /* BEGIN %INCLUDE XC401A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:28   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC401A1                           */
 /*********************************************************************/
     5 XC401_CHANNEL                 CHAR(3),
     5 XC401_DOC_UUID                CHAR(36),
     5 XC401_EVENT_UUID              CHAR(36),
     5 XC401_PART_NO                 CHAR(2),
     5 XC401_RECIPIENT_TYPE          CHAR(2),
     5 XC401_RECIPIENT_ID            CHAR(20),
     5 XC401_OWNER_TYPE              CHAR(2),
     5 XC401_OWNER_ID                CHAR(20),
     5 XC401_RELATION_TYPE           CHAR(2),
     5 XC401_RELATION_NO             CHAR(20),
     5 XC401_DOC_SRC_FORMAT          CHAR(3),
     5 XC401_DOC_TYPE                CHAR(4),
     5 XC401_DOC_GROUP               CHAR(4),
     5 XC401_DOC_CATEGORY            CHAR(1),
     5 XC401_RET_CATEGORY            CHAR(7),
     5 XC401_APPL_ID                 CHAR(8),
     5 XC401_DOC_LANG_CODE_CS        CHAR(1),
     5 XC401_DOC_TITLE               CHAR(100),
     5 XC401_DOC_PAGES               BIN FIXED(31),
     5 XC401_IS_ORIGINAL             CHAR(1),
     5 XC401_IS_SIGNED               CHAR(1),
     5 XC401_IS_IMPORTANT            CHAR(1),
     5 XC401_ACCOUNT_TYPE            CHAR(3),
     5 XC401_DEPOSIT_TYPE            CHAR(3),
     5 XC401_SETTLEMENT_NUMBER       CHAR(25),
     5 XC401_IBAN                    CHAR(34),
     5 XC401_IBAN_COUNTER            CHAR(34),
     5 XC401_ACCOUNT_COUNTER         CHAR(34),
     5 XC401_CASH_FLOW               CHAR(1),
     5 XC401_CURRENCY_CODE_ISO       CHAR(3),
     5 XC401_AMOUNT                  DEC FIXED(31,8),
     5 XC401_VALUE_DATE              CHAR(10),
     5 XC401_PERIOD_FROM             CHAR(10),
     5 XC401_PERIOD_TO               CHAR(10),
     5 XC401_BUS_EVENT_DATE          CHAR(10),
     5 XC401_OUT_CREATION_DATE       CHAR(10),
     5 XC401_CUST_ISSUE_DATE         CHAR(10),
     5 XC401_DELETION_DATE           CHAR(10),
     5 XC401_PVS_HEADER              CHAR(254),
     5 XC401_DOC_FILENAME            CHAR(254) VAR,
     5 XC401_INPUT_INFO              CHAR(254) VAR,
     5 XC401_DOC_WEB_URL             CHAR(254) VAR,
     5 XC401_DOC_STATUS              CHAR(2),
     5 XC401_UPDATE_ID               CHAR(8),
     5 XC401_UPDATE_TS               CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 45         */
 /*********************************************************************/
  /*   END %INCLUDE XC401A1T */
 ;

 Dcl 1 DboxStandalone2     based(ptrDboxStandaloneMetadata2),
  /* BEGIN %INCLUDE XC401A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:28   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC401A1                           */
 /*********************************************************************/
     5 XC401_CHANNEL                 CHAR(3),
     5 XC401_DOC_UUID                CHAR(36),
     5 XC401_EVENT_UUID              CHAR(36),
     5 XC401_PART_NO                 CHAR(2),
     5 XC401_RECIPIENT_TYPE          CHAR(2),
     5 XC401_RECIPIENT_ID            CHAR(20),
     5 XC401_OWNER_TYPE              CHAR(2),
     5 XC401_OWNER_ID                CHAR(20),
     5 XC401_RELATION_TYPE           CHAR(2),
     5 XC401_RELATION_NO             CHAR(20),
     5 XC401_DOC_SRC_FORMAT          CHAR(3),
     5 XC401_DOC_TYPE                CHAR(4),
     5 XC401_DOC_GROUP               CHAR(4),
     5 XC401_DOC_CATEGORY            CHAR(1),
     5 XC401_RET_CATEGORY            CHAR(7),
     5 XC401_APPL_ID                 CHAR(8),
     5 XC401_DOC_LANG_CODE_CS        CHAR(1),
     5 XC401_DOC_TITLE               CHAR(100),
     5 XC401_DOC_PAGES               BIN FIXED(31),
     5 XC401_IS_ORIGINAL             CHAR(1),
     5 XC401_IS_SIGNED               CHAR(1),
     5 XC401_IS_IMPORTANT            CHAR(1),
     5 XC401_ACCOUNT_TYPE            CHAR(3),
     5 XC401_DEPOSIT_TYPE            CHAR(3),
     5 XC401_SETTLEMENT_NUMBER       CHAR(25),
     5 XC401_IBAN                    CHAR(34),
     5 XC401_IBAN_COUNTER            CHAR(34),
     5 XC401_ACCOUNT_COUNTER         CHAR(34),
     5 XC401_CASH_FLOW               CHAR(1),
     5 XC401_CURRENCY_CODE_ISO       CHAR(3),
     5 XC401_AMOUNT                  DEC FIXED(31,8),
     5 XC401_VALUE_DATE              CHAR(10),
     5 XC401_PERIOD_FROM             CHAR(10),
     5 XC401_PERIOD_TO               CHAR(10),
     5 XC401_BUS_EVENT_DATE          CHAR(10),
     5 XC401_OUT_CREATION_DATE       CHAR(10),
     5 XC401_CUST_ISSUE_DATE         CHAR(10),
     5 XC401_DELETION_DATE           CHAR(10),
     5 XC401_PVS_HEADER              CHAR(254),
     5 XC401_DOC_FILENAME            CHAR(254) VAR,
     5 XC401_INPUT_INFO              CHAR(254) VAR,
     5 XC401_DOC_WEB_URL             CHAR(254) VAR,
     5 XC401_DOC_STATUS              CHAR(2),
     5 XC401_UPDATE_ID               CHAR(8),
     5 XC401_UPDATE_TS               CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 45         */
 /*********************************************************************/
  /*   END %INCLUDE XC401A1T */
 ;

 Dcl 1 DboxStandalone3     based(ptrDboxStandaloneMetadata3),
  /* BEGIN %INCLUDE XC401A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:28   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC401A1                           */
 /*********************************************************************/
     5 XC401_CHANNEL                 CHAR(3),
     5 XC401_DOC_UUID                CHAR(36),
     5 XC401_EVENT_UUID              CHAR(36),
     5 XC401_PART_NO                 CHAR(2),
     5 XC401_RECIPIENT_TYPE          CHAR(2),
     5 XC401_RECIPIENT_ID            CHAR(20),
     5 XC401_OWNER_TYPE              CHAR(2),
     5 XC401_OWNER_ID                CHAR(20),
     5 XC401_RELATION_TYPE           CHAR(2),
     5 XC401_RELATION_NO             CHAR(20),
     5 XC401_DOC_SRC_FORMAT          CHAR(3),
     5 XC401_DOC_TYPE                CHAR(4),
     5 XC401_DOC_GROUP               CHAR(4),
     5 XC401_DOC_CATEGORY            CHAR(1),
     5 XC401_RET_CATEGORY            CHAR(7),
     5 XC401_APPL_ID                 CHAR(8),
     5 XC401_DOC_LANG_CODE_CS        CHAR(1),
     5 XC401_DOC_TITLE               CHAR(100),
     5 XC401_DOC_PAGES               BIN FIXED(31),
     5 XC401_IS_ORIGINAL             CHAR(1),
     5 XC401_IS_SIGNED               CHAR(1),
     5 XC401_IS_IMPORTANT            CHAR(1),
     5 XC401_ACCOUNT_TYPE            CHAR(3),
     5 XC401_DEPOSIT_TYPE            CHAR(3),
     5 XC401_SETTLEMENT_NUMBER       CHAR(25),
     5 XC401_IBAN                    CHAR(34),
     5 XC401_IBAN_COUNTER            CHAR(34),
     5 XC401_ACCOUNT_COUNTER         CHAR(34),
     5 XC401_CASH_FLOW               CHAR(1),
     5 XC401_CURRENCY_CODE_ISO       CHAR(3),
     5 XC401_AMOUNT                  DEC FIXED(31,8),
     5 XC401_VALUE_DATE              CHAR(10),
     5 XC401_PERIOD_FROM             CHAR(10),
     5 XC401_PERIOD_TO               CHAR(10),
     5 XC401_BUS_EVENT_DATE          CHAR(10),
     5 XC401_OUT_CREATION_DATE       CHAR(10),
     5 XC401_CUST_ISSUE_DATE         CHAR(10),
     5 XC401_DELETION_DATE           CHAR(10),
     5 XC401_PVS_HEADER              CHAR(254),
     5 XC401_DOC_FILENAME            CHAR(254) VAR,
     5 XC401_INPUT_INFO              CHAR(254) VAR,
     5 XC401_DOC_WEB_URL             CHAR(254) VAR,
     5 XC401_DOC_STATUS              CHAR(2),
     5 XC401_UPDATE_ID               CHAR(8),
     5 XC401_UPDATE_TS               CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 45         */
 /*********************************************************************/
  /*   END %INCLUDE XC401A1T */
 ;

 Dcl 1 DboxStandalone4     based(ptrDboxStandaloneMetadata4),
  /* BEGIN %INCLUDE XC401A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:28   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC401A1                           */
 /*********************************************************************/
     5 XC401_CHANNEL                 CHAR(3),
     5 XC401_DOC_UUID                CHAR(36),
     5 XC401_EVENT_UUID              CHAR(36),
     5 XC401_PART_NO                 CHAR(2),
     5 XC401_RECIPIENT_TYPE          CHAR(2),
     5 XC401_RECIPIENT_ID            CHAR(20),
     5 XC401_OWNER_TYPE              CHAR(2),
     5 XC401_OWNER_ID                CHAR(20),
     5 XC401_RELATION_TYPE           CHAR(2),
     5 XC401_RELATION_NO             CHAR(20),
     5 XC401_DOC_SRC_FORMAT          CHAR(3),
     5 XC401_DOC_TYPE                CHAR(4),
     5 XC401_DOC_GROUP               CHAR(4),
     5 XC401_DOC_CATEGORY            CHAR(1),
     5 XC401_RET_CATEGORY            CHAR(7),
     5 XC401_APPL_ID                 CHAR(8),
     5 XC401_DOC_LANG_CODE_CS        CHAR(1),
     5 XC401_DOC_TITLE               CHAR(100),
     5 XC401_DOC_PAGES               BIN FIXED(31),
     5 XC401_IS_ORIGINAL             CHAR(1),
     5 XC401_IS_SIGNED               CHAR(1),
     5 XC401_IS_IMPORTANT            CHAR(1),
     5 XC401_ACCOUNT_TYPE            CHAR(3),
     5 XC401_DEPOSIT_TYPE            CHAR(3),
     5 XC401_SETTLEMENT_NUMBER       CHAR(25),
     5 XC401_IBAN                    CHAR(34),
     5 XC401_IBAN_COUNTER            CHAR(34),
     5 XC401_ACCOUNT_COUNTER         CHAR(34),
     5 XC401_CASH_FLOW               CHAR(1),
     5 XC401_CURRENCY_CODE_ISO       CHAR(3),
     5 XC401_AMOUNT                  DEC FIXED(31,8),
     5 XC401_VALUE_DATE              CHAR(10),
     5 XC401_PERIOD_FROM             CHAR(10),
     5 XC401_PERIOD_TO               CHAR(10),
     5 XC401_BUS_EVENT_DATE          CHAR(10),
     5 XC401_OUT_CREATION_DATE       CHAR(10),
     5 XC401_CUST_ISSUE_DATE         CHAR(10),
     5 XC401_DELETION_DATE           CHAR(10),
     5 XC401_PVS_HEADER              CHAR(254),
     5 XC401_DOC_FILENAME            CHAR(254) VAR,
     5 XC401_INPUT_INFO              CHAR(254) VAR,
     5 XC401_DOC_WEB_URL             CHAR(254) VAR,
     5 XC401_DOC_STATUS              CHAR(2),
     5 XC401_UPDATE_ID               CHAR(8),
     5 XC401_UPDATE_TS               CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 45         */
 /*********************************************************************/
  /*   END %INCLUDE XC401A1T */
 ;

 Dcl 1 DboxStandalone5     based(ptrDboxStandaloneMetadata5),
  /* BEGIN %INCLUDE XC401A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:28   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC401A1                           */
 /*********************************************************************/
     5 XC401_CHANNEL                 CHAR(3),
     5 XC401_DOC_UUID                CHAR(36),
     5 XC401_EVENT_UUID              CHAR(36),
     5 XC401_PART_NO                 CHAR(2),
     5 XC401_RECIPIENT_TYPE          CHAR(2),
     5 XC401_RECIPIENT_ID            CHAR(20),
     5 XC401_OWNER_TYPE              CHAR(2),
     5 XC401_OWNER_ID                CHAR(20),
     5 XC401_RELATION_TYPE           CHAR(2),
     5 XC401_RELATION_NO             CHAR(20),
     5 XC401_DOC_SRC_FORMAT          CHAR(3),
     5 XC401_DOC_TYPE                CHAR(4),
     5 XC401_DOC_GROUP               CHAR(4),
     5 XC401_DOC_CATEGORY            CHAR(1),
     5 XC401_RET_CATEGORY            CHAR(7),
     5 XC401_APPL_ID                 CHAR(8),
     5 XC401_DOC_LANG_CODE_CS        CHAR(1),
     5 XC401_DOC_TITLE               CHAR(100),
     5 XC401_DOC_PAGES               BIN FIXED(31),
     5 XC401_IS_ORIGINAL             CHAR(1),
     5 XC401_IS_SIGNED               CHAR(1),
     5 XC401_IS_IMPORTANT            CHAR(1),
     5 XC401_ACCOUNT_TYPE            CHAR(3),
     5 XC401_DEPOSIT_TYPE            CHAR(3),
     5 XC401_SETTLEMENT_NUMBER       CHAR(25),
     5 XC401_IBAN                    CHAR(34),
     5 XC401_IBAN_COUNTER            CHAR(34),
     5 XC401_ACCOUNT_COUNTER         CHAR(34),
     5 XC401_CASH_FLOW               CHAR(1),
     5 XC401_CURRENCY_CODE_ISO       CHAR(3),
     5 XC401_AMOUNT                  DEC FIXED(31,8),
     5 XC401_VALUE_DATE              CHAR(10),
     5 XC401_PERIOD_FROM             CHAR(10),
     5 XC401_PERIOD_TO               CHAR(10),
     5 XC401_BUS_EVENT_DATE          CHAR(10),
     5 XC401_OUT_CREATION_DATE       CHAR(10),
     5 XC401_CUST_ISSUE_DATE         CHAR(10),
     5 XC401_DELETION_DATE           CHAR(10),
     5 XC401_PVS_HEADER              CHAR(254),
     5 XC401_DOC_FILENAME            CHAR(254) VAR,
     5 XC401_INPUT_INFO              CHAR(254) VAR,
     5 XC401_DOC_WEB_URL             CHAR(254) VAR,
     5 XC401_DOC_STATUS              CHAR(2),
     5 XC401_UPDATE_ID               CHAR(8),
     5 XC401_UPDATE_TS               CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 45         */
 /*********************************************************************/
  /*   END %INCLUDE XC401A1T */
 ;

 Dcl 1 DboxStandalone6     based(ptrDboxStandaloneMetadata6),
  /* BEGIN %INCLUDE XC401A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:28   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC401A1                           */
 /*********************************************************************/
     5 XC401_CHANNEL                 CHAR(3),
     5 XC401_DOC_UUID                CHAR(36),
     5 XC401_EVENT_UUID              CHAR(36),
     5 XC401_PART_NO                 CHAR(2),
     5 XC401_RECIPIENT_TYPE          CHAR(2),
     5 XC401_RECIPIENT_ID            CHAR(20),
     5 XC401_OWNER_TYPE              CHAR(2),
     5 XC401_OWNER_ID                CHAR(20),
     5 XC401_RELATION_TYPE           CHAR(2),
     5 XC401_RELATION_NO             CHAR(20),
     5 XC401_DOC_SRC_FORMAT          CHAR(3),
     5 XC401_DOC_TYPE                CHAR(4),
     5 XC401_DOC_GROUP               CHAR(4),
     5 XC401_DOC_CATEGORY            CHAR(1),
     5 XC401_RET_CATEGORY            CHAR(7),
     5 XC401_APPL_ID                 CHAR(8),
     5 XC401_DOC_LANG_CODE_CS        CHAR(1),
     5 XC401_DOC_TITLE               CHAR(100),
     5 XC401_DOC_PAGES               BIN FIXED(31),
     5 XC401_IS_ORIGINAL             CHAR(1),
     5 XC401_IS_SIGNED               CHAR(1),
     5 XC401_IS_IMPORTANT            CHAR(1),
     5 XC401_ACCOUNT_TYPE            CHAR(3),
     5 XC401_DEPOSIT_TYPE            CHAR(3),
     5 XC401_SETTLEMENT_NUMBER       CHAR(25),
     5 XC401_IBAN                    CHAR(34),
     5 XC401_IBAN_COUNTER            CHAR(34),
     5 XC401_ACCOUNT_COUNTER         CHAR(34),
     5 XC401_CASH_FLOW               CHAR(1),
     5 XC401_CURRENCY_CODE_ISO       CHAR(3),
     5 XC401_AMOUNT                  DEC FIXED(31,8),
     5 XC401_VALUE_DATE              CHAR(10),
     5 XC401_PERIOD_FROM             CHAR(10),
     5 XC401_PERIOD_TO               CHAR(10),
     5 XC401_BUS_EVENT_DATE          CHAR(10),
     5 XC401_OUT_CREATION_DATE       CHAR(10),
     5 XC401_CUST_ISSUE_DATE         CHAR(10),
     5 XC401_DELETION_DATE           CHAR(10),
     5 XC401_PVS_HEADER              CHAR(254),
     5 XC401_DOC_FILENAME            CHAR(254) VAR,
     5 XC401_INPUT_INFO              CHAR(254) VAR,
     5 XC401_DOC_WEB_URL             CHAR(254) VAR,
     5 XC401_DOC_STATUS              CHAR(2),
     5 XC401_UPDATE_ID               CHAR(8),
     5 XC401_UPDATE_TS               CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 45         */
 /*********************************************************************/
  /*   END %INCLUDE XC401A1T */
 ;

 Dcl 1 XR101A1T            based(ptrRETMetadata),
  /* BEGIN %INCLUDE XR101A1T */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE GDB0472.TXR101A1                        */
 /*********************************************************************/
 /*DCL 1 XR101A1T,  */
      5 XR101_UUID_DOC_B  CHAR(16),
      5 XR101_RECIP_CIFNR  CHAR(12),
      5 XR101_PART_NO  CHAR(2),
      5 XR101_DOC_PART_NO  CHAR(3),
      5 XR101_DOC_TB_NAME  CHAR(8),
      5 XR101_UUID_DOC_C  CHAR(36),
      5 XR101_UUID_TXR_C  CHAR(36),
      5 XR101_DOC_WARN_CNT  BIN FIXED(31),
      5 XR101_RET_CATEGORY  CHAR(7),
      5 XR101_TYP_RELATION  CHAR(2),
      5 XR101_TYP_BU_RENUM  CHAR(20),
      5 XR101_TYP_ACCOUNT  CHAR(3),
      5 XR101_TYP_DEPOSIT  CHAR(3),
      5 XR101_OWNER_CIFNR  CHAR(12),
      5 XR101_OWNER_BUID  CHAR(4),
      5 XR101_TYPCUSTOWNER  CHAR(3),
      5 XR101_DOC_SETID  CHAR(4),
      5 XR101_DOC_GROUP  CHAR(4),
      5 XR101_DOC_TYP  CHAR(4),
      5 XR101_T_INFO  CHAR(100),
      5 XR101_DOC_LANG_CDE  CHAR(1),
      5 XR101_DATE_BEVENT  CHAR(10),
      5 XR101_DATE_OUTCR  CHAR(10),
      5 XR101_DATE_ISSUE  CHAR(10),
      5 XR101_DATE_VALUE  CHAR(10),
      5 XR101_DOC_TITLE  CHAR(100),
      5 XR101_DOC_SRC_FRMT  CHAR(3),
      5 XR101_NUM_PAGES  BIN FIXED(31),
      5 XR101_CURRENCY  CHAR(3),
      5 XR101_AMOUNT  DEC FIXED(31,8),
      5 XR101_IS_ORIGINAL  CHAR(1),
      5 XR101_DATE_PRINT  CHAR(10),
      5 XR101_COPYGRP  CHAR(6),
      5 XR101_PAGEFMT  CHAR(6),
      5 XR101_OWNER_NAME  CHAR(70),
      5 XR101_CARD_NUMBER  CHAR(20),
      5 XR101_DATE_EXPIRY  CHAR(10),
      5 XR101_DATE_NOTIFY  CHAR(10),
      5 XR101_DATE_DELETE  CHAR(10),
      5 XR101_CREATOR_PID  CHAR(8),
      5 XR101_RM_NOTIFY  CHAR(1),
      5 XR101_PO_STATUS  CHAR(1),
      5 XR101_CONTACT_PID  CHAR(8),
      5 XR101_CONTACT_DATE  CHAR(10),
      5 XR101_DELETE_RSCDE  CHAR(2),
      5 XR101_PRINT_STATUS  CHAR(1),
      5 XR101_DOC_NOTE  CHAR(1000) VAR,
      5 XR101_CONTACT_REMK  CHAR(1000) VAR,
      5 XR101_DOC_STATUS  CHAR(2),
      5 XR101_RESERVE_PID  CHAR(8),
      5 XR101_TS_RESERVE  CHAR(26),
      5 XR101_UPDATE_PID  CHAR(8),
      5 XR101_TS_UPDATE  CHAR(26);
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 53         */
 /*********************************************************************/
  /*   END %INCLUDE XR101A1T */
 ;

 Dcl 1 RETStandalone,
  /* BEGIN %INCLUDE XR101A1T */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE GDB0472.TXR101A1                        */
 /*********************************************************************/
 /*DCL 1 XR101A1T,  */
      5 XR101_UUID_DOC_B  CHAR(16),
      5 XR101_RECIP_CIFNR  CHAR(12),
      5 XR101_PART_NO  CHAR(2),
      5 XR101_DOC_PART_NO  CHAR(3),
      5 XR101_DOC_TB_NAME  CHAR(8),
      5 XR101_UUID_DOC_C  CHAR(36),
      5 XR101_UUID_TXR_C  CHAR(36),
      5 XR101_DOC_WARN_CNT  BIN FIXED(31),
      5 XR101_RET_CATEGORY  CHAR(7),
      5 XR101_TYP_RELATION  CHAR(2),
      5 XR101_TYP_BU_RENUM  CHAR(20),
      5 XR101_TYP_ACCOUNT  CHAR(3),
      5 XR101_TYP_DEPOSIT  CHAR(3),
      5 XR101_OWNER_CIFNR  CHAR(12),
      5 XR101_OWNER_BUID  CHAR(4),
      5 XR101_TYPCUSTOWNER  CHAR(3),
      5 XR101_DOC_SETID  CHAR(4),
      5 XR101_DOC_GROUP  CHAR(4),
      5 XR101_DOC_TYP  CHAR(4),
      5 XR101_T_INFO  CHAR(100),
      5 XR101_DOC_LANG_CDE  CHAR(1),
      5 XR101_DATE_BEVENT  CHAR(10),
      5 XR101_DATE_OUTCR  CHAR(10),
      5 XR101_DATE_ISSUE  CHAR(10),
      5 XR101_DATE_VALUE  CHAR(10),
      5 XR101_DOC_TITLE  CHAR(100),
      5 XR101_DOC_SRC_FRMT  CHAR(3),
      5 XR101_NUM_PAGES  BIN FIXED(31),
      5 XR101_CURRENCY  CHAR(3),
      5 XR101_AMOUNT  DEC FIXED(31,8),
      5 XR101_IS_ORIGINAL  CHAR(1),
      5 XR101_DATE_PRINT  CHAR(10),
      5 XR101_COPYGRP  CHAR(6),
      5 XR101_PAGEFMT  CHAR(6),
      5 XR101_OWNER_NAME  CHAR(70),
      5 XR101_CARD_NUMBER  CHAR(20),
      5 XR101_DATE_EXPIRY  CHAR(10),
      5 XR101_DATE_NOTIFY  CHAR(10),
      5 XR101_DATE_DELETE  CHAR(10),
      5 XR101_CREATOR_PID  CHAR(8),
      5 XR101_RM_NOTIFY  CHAR(1),
      5 XR101_PO_STATUS  CHAR(1),
      5 XR101_CONTACT_PID  CHAR(8),
      5 XR101_CONTACT_DATE  CHAR(10),
      5 XR101_DELETE_RSCDE  CHAR(2),
      5 XR101_PRINT_STATUS  CHAR(1),
      5 XR101_DOC_NOTE  CHAR(1000) VAR,
      5 XR101_CONTACT_REMK  CHAR(1000) VAR,
      5 XR101_DOC_STATUS  CHAR(2),
      5 XR101_RESERVE_PID  CHAR(8),
      5 XR101_TS_RESERVE  CHAR(26),
      5 XR101_UPDATE_PID  CHAR(8),
      5 XR101_TS_UPDATE  CHAR(26);
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 53         */
 /*********************************************************************/
  /*   END %INCLUDE XR101A1T */
 ;

 Dcl 1 RETStandalone1      based(ptrRETStandaloneMetadata1),
  /* BEGIN %INCLUDE XR101A1T */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE GDB0472.TXR101A1                        */
 /*********************************************************************/
 /*DCL 1 XR101A1T,  */
      5 XR101_UUID_DOC_B  CHAR(16),
      5 XR101_RECIP_CIFNR  CHAR(12),
      5 XR101_PART_NO  CHAR(2),
      5 XR101_DOC_PART_NO  CHAR(3),
      5 XR101_DOC_TB_NAME  CHAR(8),
      5 XR101_UUID_DOC_C  CHAR(36),
      5 XR101_UUID_TXR_C  CHAR(36),
      5 XR101_DOC_WARN_CNT  BIN FIXED(31),
      5 XR101_RET_CATEGORY  CHAR(7),
      5 XR101_TYP_RELATION  CHAR(2),
      5 XR101_TYP_BU_RENUM  CHAR(20),
      5 XR101_TYP_ACCOUNT  CHAR(3),
      5 XR101_TYP_DEPOSIT  CHAR(3),
      5 XR101_OWNER_CIFNR  CHAR(12),
      5 XR101_OWNER_BUID  CHAR(4),
      5 XR101_TYPCUSTOWNER  CHAR(3),
      5 XR101_DOC_SETID  CHAR(4),
      5 XR101_DOC_GROUP  CHAR(4),
      5 XR101_DOC_TYP  CHAR(4),
      5 XR101_T_INFO  CHAR(100),
      5 XR101_DOC_LANG_CDE  CHAR(1),
      5 XR101_DATE_BEVENT  CHAR(10),
      5 XR101_DATE_OUTCR  CHAR(10),
      5 XR101_DATE_ISSUE  CHAR(10),
      5 XR101_DATE_VALUE  CHAR(10),
      5 XR101_DOC_TITLE  CHAR(100),
      5 XR101_DOC_SRC_FRMT  CHAR(3),
      5 XR101_NUM_PAGES  BIN FIXED(31),
      5 XR101_CURRENCY  CHAR(3),
      5 XR101_AMOUNT  DEC FIXED(31,8),
      5 XR101_IS_ORIGINAL  CHAR(1),
      5 XR101_DATE_PRINT  CHAR(10),
      5 XR101_COPYGRP  CHAR(6),
      5 XR101_PAGEFMT  CHAR(6),
      5 XR101_OWNER_NAME  CHAR(70),
      5 XR101_CARD_NUMBER  CHAR(20),
      5 XR101_DATE_EXPIRY  CHAR(10),
      5 XR101_DATE_NOTIFY  CHAR(10),
      5 XR101_DATE_DELETE  CHAR(10),
      5 XR101_CREATOR_PID  CHAR(8),
      5 XR101_RM_NOTIFY  CHAR(1),
      5 XR101_PO_STATUS  CHAR(1),
      5 XR101_CONTACT_PID  CHAR(8),
      5 XR101_CONTACT_DATE  CHAR(10),
      5 XR101_DELETE_RSCDE  CHAR(2),
      5 XR101_PRINT_STATUS  CHAR(1),
      5 XR101_DOC_NOTE  CHAR(1000) VAR,
      5 XR101_CONTACT_REMK  CHAR(1000) VAR,
      5 XR101_DOC_STATUS  CHAR(2),
      5 XR101_RESERVE_PID  CHAR(8),
      5 XR101_TS_RESERVE  CHAR(26),
      5 XR101_UPDATE_PID  CHAR(8),
      5 XR101_TS_UPDATE  CHAR(26);
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 53         */
 /*********************************************************************/
  /*   END %INCLUDE XR101A1T */
 ;

 Dcl 1 RETStandalone2      based(ptrRETStandaloneMetadata2),
  /* BEGIN %INCLUDE XR101A1T */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE GDB0472.TXR101A1                        */
 /*********************************************************************/
 /*DCL 1 XR101A1T,  */
      5 XR101_UUID_DOC_B  CHAR(16),
      5 XR101_RECIP_CIFNR  CHAR(12),
      5 XR101_PART_NO  CHAR(2),
      5 XR101_DOC_PART_NO  CHAR(3),
      5 XR101_DOC_TB_NAME  CHAR(8),
      5 XR101_UUID_DOC_C  CHAR(36),
      5 XR101_UUID_TXR_C  CHAR(36),
      5 XR101_DOC_WARN_CNT  BIN FIXED(31),
      5 XR101_RET_CATEGORY  CHAR(7),
      5 XR101_TYP_RELATION  CHAR(2),
      5 XR101_TYP_BU_RENUM  CHAR(20),
      5 XR101_TYP_ACCOUNT  CHAR(3),
      5 XR101_TYP_DEPOSIT  CHAR(3),
      5 XR101_OWNER_CIFNR  CHAR(12),
      5 XR101_OWNER_BUID  CHAR(4),
      5 XR101_TYPCUSTOWNER  CHAR(3),
      5 XR101_DOC_SETID  CHAR(4),
      5 XR101_DOC_GROUP  CHAR(4),
      5 XR101_DOC_TYP  CHAR(4),
      5 XR101_T_INFO  CHAR(100),
      5 XR101_DOC_LANG_CDE  CHAR(1),
      5 XR101_DATE_BEVENT  CHAR(10),
      5 XR101_DATE_OUTCR  CHAR(10),
      5 XR101_DATE_ISSUE  CHAR(10),
      5 XR101_DATE_VALUE  CHAR(10),
      5 XR101_DOC_TITLE  CHAR(100),
      5 XR101_DOC_SRC_FRMT  CHAR(3),
      5 XR101_NUM_PAGES  BIN FIXED(31),
      5 XR101_CURRENCY  CHAR(3),
      5 XR101_AMOUNT  DEC FIXED(31,8),
      5 XR101_IS_ORIGINAL  CHAR(1),
      5 XR101_DATE_PRINT  CHAR(10),
      5 XR101_COPYGRP  CHAR(6),
      5 XR101_PAGEFMT  CHAR(6),
      5 XR101_OWNER_NAME  CHAR(70),
      5 XR101_CARD_NUMBER  CHAR(20),
      5 XR101_DATE_EXPIRY  CHAR(10),
      5 XR101_DATE_NOTIFY  CHAR(10),
      5 XR101_DATE_DELETE  CHAR(10),
      5 XR101_CREATOR_PID  CHAR(8),
      5 XR101_RM_NOTIFY  CHAR(1),
      5 XR101_PO_STATUS  CHAR(1),
      5 XR101_CONTACT_PID  CHAR(8),
      5 XR101_CONTACT_DATE  CHAR(10),
      5 XR101_DELETE_RSCDE  CHAR(2),
      5 XR101_PRINT_STATUS  CHAR(1),
      5 XR101_DOC_NOTE  CHAR(1000) VAR,
      5 XR101_CONTACT_REMK  CHAR(1000) VAR,
      5 XR101_DOC_STATUS  CHAR(2),
      5 XR101_RESERVE_PID  CHAR(8),
      5 XR101_TS_RESERVE  CHAR(26),
      5 XR101_UPDATE_PID  CHAR(8),
      5 XR101_TS_UPDATE  CHAR(26);
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 53         */
 /*********************************************************************/
  /*   END %INCLUDE XR101A1T */
 ;

 Dcl 1 RETStandalone3      based(ptrRETStandaloneMetadata3),
  /* BEGIN %INCLUDE XR101A1T */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE GDB0472.TXR101A1                        */
 /*********************************************************************/
 /*DCL 1 XR101A1T,  */
      5 XR101_UUID_DOC_B  CHAR(16),
      5 XR101_RECIP_CIFNR  CHAR(12),
      5 XR101_PART_NO  CHAR(2),
      5 XR101_DOC_PART_NO  CHAR(3),
      5 XR101_DOC_TB_NAME  CHAR(8),
      5 XR101_UUID_DOC_C  CHAR(36),
      5 XR101_UUID_TXR_C  CHAR(36),
      5 XR101_DOC_WARN_CNT  BIN FIXED(31),
      5 XR101_RET_CATEGORY  CHAR(7),
      5 XR101_TYP_RELATION  CHAR(2),
      5 XR101_TYP_BU_RENUM  CHAR(20),
      5 XR101_TYP_ACCOUNT  CHAR(3),
      5 XR101_TYP_DEPOSIT  CHAR(3),
      5 XR101_OWNER_CIFNR  CHAR(12),
      5 XR101_OWNER_BUID  CHAR(4),
      5 XR101_TYPCUSTOWNER  CHAR(3),
      5 XR101_DOC_SETID  CHAR(4),
      5 XR101_DOC_GROUP  CHAR(4),
      5 XR101_DOC_TYP  CHAR(4),
      5 XR101_T_INFO  CHAR(100),
      5 XR101_DOC_LANG_CDE  CHAR(1),
      5 XR101_DATE_BEVENT  CHAR(10),
      5 XR101_DATE_OUTCR  CHAR(10),
      5 XR101_DATE_ISSUE  CHAR(10),
      5 XR101_DATE_VALUE  CHAR(10),
      5 XR101_DOC_TITLE  CHAR(100),
      5 XR101_DOC_SRC_FRMT  CHAR(3),
      5 XR101_NUM_PAGES  BIN FIXED(31),
      5 XR101_CURRENCY  CHAR(3),
      5 XR101_AMOUNT  DEC FIXED(31,8),
      5 XR101_IS_ORIGINAL  CHAR(1),
      5 XR101_DATE_PRINT  CHAR(10),
      5 XR101_COPYGRP  CHAR(6),
      5 XR101_PAGEFMT  CHAR(6),
      5 XR101_OWNER_NAME  CHAR(70),
      5 XR101_CARD_NUMBER  CHAR(20),
      5 XR101_DATE_EXPIRY  CHAR(10),
      5 XR101_DATE_NOTIFY  CHAR(10),
      5 XR101_DATE_DELETE  CHAR(10),
      5 XR101_CREATOR_PID  CHAR(8),
      5 XR101_RM_NOTIFY  CHAR(1),
      5 XR101_PO_STATUS  CHAR(1),
      5 XR101_CONTACT_PID  CHAR(8),
      5 XR101_CONTACT_DATE  CHAR(10),
      5 XR101_DELETE_RSCDE  CHAR(2),
      5 XR101_PRINT_STATUS  CHAR(1),
      5 XR101_DOC_NOTE  CHAR(1000) VAR,
      5 XR101_CONTACT_REMK  CHAR(1000) VAR,
      5 XR101_DOC_STATUS  CHAR(2),
      5 XR101_RESERVE_PID  CHAR(8),
      5 XR101_TS_RESERVE  CHAR(26),
      5 XR101_UPDATE_PID  CHAR(8),
      5 XR101_TS_UPDATE  CHAR(26);
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 53         */
 /*********************************************************************/
  /*   END %INCLUDE XR101A1T */
 ;

 Dcl 1 RETStandalone4      based(ptrRETStandaloneMetadata4),
  /* BEGIN %INCLUDE XR101A1T */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE GDB0472.TXR101A1                        */
 /*********************************************************************/
 /*DCL 1 XR101A1T,  */
      5 XR101_UUID_DOC_B  CHAR(16),
      5 XR101_RECIP_CIFNR  CHAR(12),
      5 XR101_PART_NO  CHAR(2),
      5 XR101_DOC_PART_NO  CHAR(3),
      5 XR101_DOC_TB_NAME  CHAR(8),
      5 XR101_UUID_DOC_C  CHAR(36),
      5 XR101_UUID_TXR_C  CHAR(36),
      5 XR101_DOC_WARN_CNT  BIN FIXED(31),
      5 XR101_RET_CATEGORY  CHAR(7),
      5 XR101_TYP_RELATION  CHAR(2),
      5 XR101_TYP_BU_RENUM  CHAR(20),
      5 XR101_TYP_ACCOUNT  CHAR(3),
      5 XR101_TYP_DEPOSIT  CHAR(3),
      5 XR101_OWNER_CIFNR  CHAR(12),
      5 XR101_OWNER_BUID  CHAR(4),
      5 XR101_TYPCUSTOWNER  CHAR(3),
      5 XR101_DOC_SETID  CHAR(4),
      5 XR101_DOC_GROUP  CHAR(4),
      5 XR101_DOC_TYP  CHAR(4),
      5 XR101_T_INFO  CHAR(100),
      5 XR101_DOC_LANG_CDE  CHAR(1),
      5 XR101_DATE_BEVENT  CHAR(10),
      5 XR101_DATE_OUTCR  CHAR(10),
      5 XR101_DATE_ISSUE  CHAR(10),
      5 XR101_DATE_VALUE  CHAR(10),
      5 XR101_DOC_TITLE  CHAR(100),
      5 XR101_DOC_SRC_FRMT  CHAR(3),
      5 XR101_NUM_PAGES  BIN FIXED(31),
      5 XR101_CURRENCY  CHAR(3),
      5 XR101_AMOUNT  DEC FIXED(31,8),
      5 XR101_IS_ORIGINAL  CHAR(1),
      5 XR101_DATE_PRINT  CHAR(10),
      5 XR101_COPYGRP  CHAR(6),
      5 XR101_PAGEFMT  CHAR(6),
      5 XR101_OWNER_NAME  CHAR(70),
      5 XR101_CARD_NUMBER  CHAR(20),
      5 XR101_DATE_EXPIRY  CHAR(10),
      5 XR101_DATE_NOTIFY  CHAR(10),
      5 XR101_DATE_DELETE  CHAR(10),
      5 XR101_CREATOR_PID  CHAR(8),
      5 XR101_RM_NOTIFY  CHAR(1),
      5 XR101_PO_STATUS  CHAR(1),
      5 XR101_CONTACT_PID  CHAR(8),
      5 XR101_CONTACT_DATE  CHAR(10),
      5 XR101_DELETE_RSCDE  CHAR(2),
      5 XR101_PRINT_STATUS  CHAR(1),
      5 XR101_DOC_NOTE  CHAR(1000) VAR,
      5 XR101_CONTACT_REMK  CHAR(1000) VAR,
      5 XR101_DOC_STATUS  CHAR(2),
      5 XR101_RESERVE_PID  CHAR(8),
      5 XR101_TS_RESERVE  CHAR(26),
      5 XR101_UPDATE_PID  CHAR(8),
      5 XR101_TS_UPDATE  CHAR(26);
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 53         */
 /*********************************************************************/
  /*   END %INCLUDE XR101A1T */
 ;

 Dcl 1 RETStandalone5      based(ptrRETStandaloneMetadata5),
  /* BEGIN %INCLUDE XR101A1T */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE GDB0472.TXR101A1                        */
 /*********************************************************************/
 /*DCL 1 XR101A1T,  */
      5 XR101_UUID_DOC_B  CHAR(16),
      5 XR101_RECIP_CIFNR  CHAR(12),
      5 XR101_PART_NO  CHAR(2),
      5 XR101_DOC_PART_NO  CHAR(3),
      5 XR101_DOC_TB_NAME  CHAR(8),
      5 XR101_UUID_DOC_C  CHAR(36),
      5 XR101_UUID_TXR_C  CHAR(36),
      5 XR101_DOC_WARN_CNT  BIN FIXED(31),
      5 XR101_RET_CATEGORY  CHAR(7),
      5 XR101_TYP_RELATION  CHAR(2),
      5 XR101_TYP_BU_RENUM  CHAR(20),
      5 XR101_TYP_ACCOUNT  CHAR(3),
      5 XR101_TYP_DEPOSIT  CHAR(3),
      5 XR101_OWNER_CIFNR  CHAR(12),
      5 XR101_OWNER_BUID  CHAR(4),
      5 XR101_TYPCUSTOWNER  CHAR(3),
      5 XR101_DOC_SETID  CHAR(4),
      5 XR101_DOC_GROUP  CHAR(4),
      5 XR101_DOC_TYP  CHAR(4),
      5 XR101_T_INFO  CHAR(100),
      5 XR101_DOC_LANG_CDE  CHAR(1),
      5 XR101_DATE_BEVENT  CHAR(10),
      5 XR101_DATE_OUTCR  CHAR(10),
      5 XR101_DATE_ISSUE  CHAR(10),
      5 XR101_DATE_VALUE  CHAR(10),
      5 XR101_DOC_TITLE  CHAR(100),
      5 XR101_DOC_SRC_FRMT  CHAR(3),
      5 XR101_NUM_PAGES  BIN FIXED(31),
      5 XR101_CURRENCY  CHAR(3),
      5 XR101_AMOUNT  DEC FIXED(31,8),
      5 XR101_IS_ORIGINAL  CHAR(1),
      5 XR101_DATE_PRINT  CHAR(10),
      5 XR101_COPYGRP  CHAR(6),
      5 XR101_PAGEFMT  CHAR(6),
      5 XR101_OWNER_NAME  CHAR(70),
      5 XR101_CARD_NUMBER  CHAR(20),
      5 XR101_DATE_EXPIRY  CHAR(10),
      5 XR101_DATE_NOTIFY  CHAR(10),
      5 XR101_DATE_DELETE  CHAR(10),
      5 XR101_CREATOR_PID  CHAR(8),
      5 XR101_RM_NOTIFY  CHAR(1),
      5 XR101_PO_STATUS  CHAR(1),
      5 XR101_CONTACT_PID  CHAR(8),
      5 XR101_CONTACT_DATE  CHAR(10),
      5 XR101_DELETE_RSCDE  CHAR(2),
      5 XR101_PRINT_STATUS  CHAR(1),
      5 XR101_DOC_NOTE  CHAR(1000) VAR,
      5 XR101_CONTACT_REMK  CHAR(1000) VAR,
      5 XR101_DOC_STATUS  CHAR(2),
      5 XR101_RESERVE_PID  CHAR(8),
      5 XR101_TS_RESERVE  CHAR(26),
      5 XR101_UPDATE_PID  CHAR(8),
      5 XR101_TS_UPDATE  CHAR(26);
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 53         */
 /*********************************************************************/
  /*   END %INCLUDE XR101A1T */
 ;

 Dcl 1 RETStandalone6      based(ptrRETStandaloneMetadata6),
  /* BEGIN %INCLUDE XR101A1T */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE GDB0472.TXR101A1                        */
 /*********************************************************************/
 /*DCL 1 XR101A1T,  */
      5 XR101_UUID_DOC_B  CHAR(16),
      5 XR101_RECIP_CIFNR  CHAR(12),
      5 XR101_PART_NO  CHAR(2),
      5 XR101_DOC_PART_NO  CHAR(3),
      5 XR101_DOC_TB_NAME  CHAR(8),
      5 XR101_UUID_DOC_C  CHAR(36),
      5 XR101_UUID_TXR_C  CHAR(36),
      5 XR101_DOC_WARN_CNT  BIN FIXED(31),
      5 XR101_RET_CATEGORY  CHAR(7),
      5 XR101_TYP_RELATION  CHAR(2),
      5 XR101_TYP_BU_RENUM  CHAR(20),
      5 XR101_TYP_ACCOUNT  CHAR(3),
      5 XR101_TYP_DEPOSIT  CHAR(3),
      5 XR101_OWNER_CIFNR  CHAR(12),
      5 XR101_OWNER_BUID  CHAR(4),
      5 XR101_TYPCUSTOWNER  CHAR(3),
      5 XR101_DOC_SETID  CHAR(4),
      5 XR101_DOC_GROUP  CHAR(4),
      5 XR101_DOC_TYP  CHAR(4),
      5 XR101_T_INFO  CHAR(100),
      5 XR101_DOC_LANG_CDE  CHAR(1),
      5 XR101_DATE_BEVENT  CHAR(10),
      5 XR101_DATE_OUTCR  CHAR(10),
      5 XR101_DATE_ISSUE  CHAR(10),
      5 XR101_DATE_VALUE  CHAR(10),
      5 XR101_DOC_TITLE  CHAR(100),
      5 XR101_DOC_SRC_FRMT  CHAR(3),
      5 XR101_NUM_PAGES  BIN FIXED(31),
      5 XR101_CURRENCY  CHAR(3),
      5 XR101_AMOUNT  DEC FIXED(31,8),
      5 XR101_IS_ORIGINAL  CHAR(1),
      5 XR101_DATE_PRINT  CHAR(10),
      5 XR101_COPYGRP  CHAR(6),
      5 XR101_PAGEFMT  CHAR(6),
      5 XR101_OWNER_NAME  CHAR(70),
      5 XR101_CARD_NUMBER  CHAR(20),
      5 XR101_DATE_EXPIRY  CHAR(10),
      5 XR101_DATE_NOTIFY  CHAR(10),
      5 XR101_DATE_DELETE  CHAR(10),
      5 XR101_CREATOR_PID  CHAR(8),
      5 XR101_RM_NOTIFY  CHAR(1),
      5 XR101_PO_STATUS  CHAR(1),
      5 XR101_CONTACT_PID  CHAR(8),
      5 XR101_CONTACT_DATE  CHAR(10),
      5 XR101_DELETE_RSCDE  CHAR(2),
      5 XR101_PRINT_STATUS  CHAR(1),
      5 XR101_DOC_NOTE  CHAR(1000) VAR,
      5 XR101_CONTACT_REMK  CHAR(1000) VAR,
      5 XR101_DOC_STATUS  CHAR(2),
      5 XR101_RESERVE_PID  CHAR(8),
      5 XR101_TS_RESERVE  CHAR(26),
      5 XR101_UPDATE_PID  CHAR(8),
      5 XR101_TS_UPDATE  CHAR(26);
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 53         */
 /*********************************************************************/
  /*   END %INCLUDE XR101A1T */
 ;

 Dcl 1 EnclosureData,
  /* BEGIN %INCLUDE XC409A1T */
 /********************************************************************/
 /*                                                                  */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   19:32   F243873     */
 /*                                                                  */
 /********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC409A1                           */
 /*********************************************************************/
      5 XC409_SUP_IDENTIFIER       CHAR(8),
      5 XC409_SUP_VERSION          CHAR(4),
      5 XC409_SUP_UUID             CHAR(36),
      5 XC409_SUP_CATEGORY         CHAR(1),
      5 XC409_SUP_DOC_TYPE         CHAR(4),
      5 XC409_SUP_PERIOD_FROM      CHAR(10),
      5 XC409_SUP_PERIOD_TO        CHAR(10),
      5 XC409_SUP_PAGES            BIN FIXED(31),
      5 XC409_SUP_STATUS           CHAR(2),
      5 XC409_SUP_TITLE            CHAR(100),
      5 XC409_SUP_FILENAME         CHAR(254) VAR,
      5 XC409_UPDATE_ID            CHAR(8),
      5 XC409_UPDATE_TS            CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 13         */
 /*********************************************************************/
  /*   END %INCLUDE XC409A1T */
 ;

 Dcl 1 EnclosureData1      based(ptrXC409A1Tdata1),
  /* BEGIN %INCLUDE XC409A1T */
 /********************************************************************/
 /*                                                                  */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   19:32   F243873     */
 /*                                                                  */
 /********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC409A1                           */
 /*********************************************************************/
      5 XC409_SUP_IDENTIFIER       CHAR(8),
      5 XC409_SUP_VERSION          CHAR(4),
      5 XC409_SUP_UUID             CHAR(36),
      5 XC409_SUP_CATEGORY         CHAR(1),
      5 XC409_SUP_DOC_TYPE         CHAR(4),
      5 XC409_SUP_PERIOD_FROM      CHAR(10),
      5 XC409_SUP_PERIOD_TO        CHAR(10),
      5 XC409_SUP_PAGES            BIN FIXED(31),
      5 XC409_SUP_STATUS           CHAR(2),
      5 XC409_SUP_TITLE            CHAR(100),
      5 XC409_SUP_FILENAME         CHAR(254) VAR,
      5 XC409_UPDATE_ID            CHAR(8),
      5 XC409_UPDATE_TS            CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 13         */
 /*********************************************************************/
  /*   END %INCLUDE XC409A1T */
 ;

 Dcl 1 EnclosureData2      based(ptrXC409A1Tdata2),
  /* BEGIN %INCLUDE XC409A1T */
 /********************************************************************/
 /*                                                                  */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   19:32   F243873     */
 /*                                                                  */
 /********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC409A1                           */
 /*********************************************************************/
      5 XC409_SUP_IDENTIFIER       CHAR(8),
      5 XC409_SUP_VERSION          CHAR(4),
      5 XC409_SUP_UUID             CHAR(36),
      5 XC409_SUP_CATEGORY         CHAR(1),
      5 XC409_SUP_DOC_TYPE         CHAR(4),
      5 XC409_SUP_PERIOD_FROM      CHAR(10),
      5 XC409_SUP_PERIOD_TO        CHAR(10),
      5 XC409_SUP_PAGES            BIN FIXED(31),
      5 XC409_SUP_STATUS           CHAR(2),
      5 XC409_SUP_TITLE            CHAR(100),
      5 XC409_SUP_FILENAME         CHAR(254) VAR,
      5 XC409_UPDATE_ID            CHAR(8),
      5 XC409_UPDATE_TS            CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 13         */
 /*********************************************************************/
  /*   END %INCLUDE XC409A1T */
 ;

 Dcl 1 EnclosureData3      based(ptrXC409A1Tdata3),
  /* BEGIN %INCLUDE XC409A1T */
 /********************************************************************/
 /*                                                                  */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   19:32   F243873     */
 /*                                                                  */
 /********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC409A1                           */
 /*********************************************************************/
      5 XC409_SUP_IDENTIFIER       CHAR(8),
      5 XC409_SUP_VERSION          CHAR(4),
      5 XC409_SUP_UUID             CHAR(36),
      5 XC409_SUP_CATEGORY         CHAR(1),
      5 XC409_SUP_DOC_TYPE         CHAR(4),
      5 XC409_SUP_PERIOD_FROM      CHAR(10),
      5 XC409_SUP_PERIOD_TO        CHAR(10),
      5 XC409_SUP_PAGES            BIN FIXED(31),
      5 XC409_SUP_STATUS           CHAR(2),
      5 XC409_SUP_TITLE            CHAR(100),
      5 XC409_SUP_FILENAME         CHAR(254) VAR,
      5 XC409_UPDATE_ID            CHAR(8),
      5 XC409_UPDATE_TS            CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 13         */
 /*********************************************************************/
  /*   END %INCLUDE XC409A1T */
 ;

 Dcl 1 EnclosureData4      based(ptrXC409A1Tdata4),
  /* BEGIN %INCLUDE XC409A1T */
 /********************************************************************/
 /*                                                                  */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   19:32   F243873     */
 /*                                                                  */
 /********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC409A1                           */
 /*********************************************************************/
      5 XC409_SUP_IDENTIFIER       CHAR(8),
      5 XC409_SUP_VERSION          CHAR(4),
      5 XC409_SUP_UUID             CHAR(36),
      5 XC409_SUP_CATEGORY         CHAR(1),
      5 XC409_SUP_DOC_TYPE         CHAR(4),
      5 XC409_SUP_PERIOD_FROM      CHAR(10),
      5 XC409_SUP_PERIOD_TO        CHAR(10),
      5 XC409_SUP_PAGES            BIN FIXED(31),
      5 XC409_SUP_STATUS           CHAR(2),
      5 XC409_SUP_TITLE            CHAR(100),
      5 XC409_SUP_FILENAME         CHAR(254) VAR,
      5 XC409_UPDATE_ID            CHAR(8),
      5 XC409_UPDATE_TS            CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 13         */
 /*********************************************************************/
  /*   END %INCLUDE XC409A1T */
 ;

 Dcl 1 EnclosureData5      based(ptrXC409A1Tdata5),
  /* BEGIN %INCLUDE XC409A1T */
 /********************************************************************/
 /*                                                                  */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   19:32   F243873     */
 /*                                                                  */
 /********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC409A1                           */
 /*********************************************************************/
      5 XC409_SUP_IDENTIFIER       CHAR(8),
      5 XC409_SUP_VERSION          CHAR(4),
      5 XC409_SUP_UUID             CHAR(36),
      5 XC409_SUP_CATEGORY         CHAR(1),
      5 XC409_SUP_DOC_TYPE         CHAR(4),
      5 XC409_SUP_PERIOD_FROM      CHAR(10),
      5 XC409_SUP_PERIOD_TO        CHAR(10),
      5 XC409_SUP_PAGES            BIN FIXED(31),
      5 XC409_SUP_STATUS           CHAR(2),
      5 XC409_SUP_TITLE            CHAR(100),
      5 XC409_SUP_FILENAME         CHAR(254) VAR,
      5 XC409_UPDATE_ID            CHAR(8),
      5 XC409_UPDATE_TS            CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 13         */
 /*********************************************************************/
  /*   END %INCLUDE XC409A1T */
 ;

 Dcl 1 EnclosureData6      based(ptrXC409A1Tdata6),
  /* BEGIN %INCLUDE XC409A1T */
 /********************************************************************/
 /*                                                                  */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   19:32   F243873     */
 /*                                                                  */
 /********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC409A1                           */
 /*********************************************************************/
      5 XC409_SUP_IDENTIFIER       CHAR(8),
      5 XC409_SUP_VERSION          CHAR(4),
      5 XC409_SUP_UUID             CHAR(36),
      5 XC409_SUP_CATEGORY         CHAR(1),
      5 XC409_SUP_DOC_TYPE         CHAR(4),
      5 XC409_SUP_PERIOD_FROM      CHAR(10),
      5 XC409_SUP_PERIOD_TO        CHAR(10),
      5 XC409_SUP_PAGES            BIN FIXED(31),
      5 XC409_SUP_STATUS           CHAR(2),
      5 XC409_SUP_TITLE            CHAR(100),
      5 XC409_SUP_FILENAME         CHAR(254) VAR,
      5 XC409_UPDATE_ID            CHAR(8),
      5 XC409_UPDATE_TS            CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 13         */
 /*********************************************************************/
  /*   END %INCLUDE XC409A1T */
 ;

 Dcl 1 XC126A1T,
  /* BEGIN %INCLUDE XC126A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   27. FEB. 2014   17:55   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC126A1                           */
 /*********************************************************************/
      5 XC126_CHANNEL           CHAR(03),
      5 XC126_DOC_UUID          CHAR(36),
      5 XC126_DOC_FORMAT        CHAR(03),                       /*MR01*/
      5 XC126_REQ_SLOT_NO       CHAR(03),
      5 XC126_REQ_PRIORITY      CHAR(02),
      5 XC126_REQ_STATUS        CHAR(01),
      5 XC126_UPDATE_ID         CHAR(08),
      5 XC126_UPDATE_TS         CHAR(26),
      5 XC126_REMARKS           CHAR(255)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 8          */
 /*********************************************************************/
  /*   END %INCLUDE XC126A1T */
 ;

 Dcl 1 XC105A1T,
  /* BEGIN %INCLUDE XC105A1T */
 /*********************************************************************/
 /***  Last Source Change     :  04 Apr 2006   12:00:23   F600435   ***/
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE TXC105A1                                */
 /*********************************************************************/
      5 XC105_RECIP_CIFNR  CHAR(12),
      5 XC105_UUID_DOC_C   CHAR(35),
      5 XC105_ACTION_TS    CHAR(26),
      5 XC105_PID          CHAR(10),
      5 XC105_ACTIONID     CHAR(3),
      5 XC105_RECIP_BUID   CHAR(4),
      5 XC105_RUNSTART_TS  CHAR(26),
      5 XC105_ACT_CONTENT  CHAR(2000) VAR;
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 8          */
 /*********************************************************************/
  /*   END %INCLUDE XC105A1T */
 ;

 Dcl 1 XC103A1T,
  /* BEGIN %INCLUDE XC103A1T */
 /*********************************************************************/
 /***  Last Source Change     :  04 Apr 2006   11:59:48   F600435   ***/
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE TXC103A1                                */
 /*********************************************************************/
      5 XC103_RECIP_CIFNR  CHAR(12),
      5 XC103_ACTION_TS  CHAR(26),
      5 XC103_PID  CHAR(10),
      5 XC103_ACTIONID  CHAR(3),
      5 XC103_RECIP_BUID  CHAR(4),
      5 XC103_RUNSTART_TS  CHAR(26),
      5 XC103_ACT_CONTENT  CHAR(2000) VAR;
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 7          */
 /*********************************************************************/
  /*   END %INCLUDE XC103A1T */
 ;

 Dcl 1 XR100A1T,
  /* BEGIN %INCLUDE XR100A1T */
 /********************************************************************/
 /*                                                                  */
 /*    LETZTE SOURCE-DNDERUNG:   11. JAN. 2012   18:28   F243873     */
 /*                                                                  */
 /********************************************************************/
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE GDB0472.TXR100A1                        */
 /*********************************************************************/
 /*DCL 1 XR100A1T,  */
      5 XR100_RECIP_CIFNR    CHAR(12),
      5 XR100_CIF_INFO       CHAR(70),
      5 XR100_BUID           CHAR(4),
      5 XR100_RET_CATEGORY   CHAR(7),
      5 XR100_RET_OFFICE     CHAR(8),
      5 XR100_RET_AO         CHAR(8),
      5 XR100_CLIENT_OFFIC   CHAR(8),
      5 XR100_TYPCUSTRECIP   CHAR(3),
      5 XR100_RM_PID         CHAR(8),
      5 XR100_COUNTRY        CHAR(3),
      5 XR100_LANG_CDE       CHAR(1),
      5 XR100_DOSR_STATUS    CHAR(2),
      5 XR100_CIF_STATUS     CHAR(1),
      5 XR100_NOTE           CHAR(2000) VAR,
      5 XR100_UPDATE_PID     CHAR(8),
      5 XR100_TS_UPDATE      CHAR(26),
      5 XR100_IS_RETMM       CHAR(01),
      5 XR100_CREATION_DATE  CHAR(10),
      5 XR100_LAST_ORDER     CHAR(26),
      5 XR100_NXT_ORDER      CHAR(26),                          /*VA01*/
      5 XR100_ONLINE_START   CHAR(10),                          /*VA01*/
      5 XR100_ONLINE_END     CHAR(10),                          /*VA01*/
      5 XR100_DOC_COUNT      BIN FIXED(31),                     /*SA01*/
      5 XR100_PAGE_COUNT     BIN FIXED(31);                     /*SA01*/
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 16         */
 /*********************************************************************/
  /*   END %INCLUDE XR100A1T */
 ;

 Dcl 1 XC400A1T,
  /* BEGIN %INCLUDE XC400A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:22   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC400A1                           */
 /*********************************************************************/
      5 XC400_RECIPIENT_ID           CHAR(20),
      5 XC400_RECIPIENT_TYPE         CHAR(2),
      5 XC400_CREATION_DATE          CHAR(10),
      5 XC400_RECIPIENT_STATUS       CHAR(2),
      5 XC400_UPDATE_ID              CHAR(8),
      5 XC400_UPDATE_TS              CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 6          */
 /*********************************************************************/
  /*   END %INCLUDE XC400A1T */
 ;

 Dcl 1 XC407A1T,
  /* BEGIN %INCLUDE XC407A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   19:30   F243873      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC407A1                           */
 /*********************************************************************/
      5 XC407_DOC_UUID             CHAR(36),
      5 XC407_SUP_UUID             CHAR(36),
      5 XC407_SUP_CATEGORY         CHAR(1),
      5 XC407_RECIPIENT_TYPE       CHAR(2),
      5 XC407_RECIPIENT_ID         CHAR(20),
      5 XC407_SUP_STATUS           CHAR(2),
      5 XC407_UPDATE_ID            CHAR(8),
      5 XC407_UPDATE_TS            CHAR(26)
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 8          */
 /*********************************************************************/
  /*   END %INCLUDE XC407A1T */
 ;

 Dcl 1 XC410A1T,
  /* BEGIN %INCLUDE XC410A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   14. NOV. 2013   16:22   G443608      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC410A1                           */
 /*********************************************************************/
      5 XC410_RECIPIENT_TYPE         CHAR(2),
      5 XC410_RECIPIENT_ID           CHAR(20),
      5 XC410_CHANNEL                CHAR(3),
      5 XC410_DOCBOX_NAME            CHAR(70) VAR,
      5 XC410_UPDATE_ID              CHAR(8),
      5 XC410_UPDATE_TS              CHAR(26);
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 6          */
 /*********************************************************************/
  /*   END %INCLUDE XC410A1T */
 ;

 Dcl 1 XC411A1T,
  /* BEGIN %INCLUDE XC411A1T */
 /*********************************************************************/
 /*                                                                   */
 /*    LETZTE SOURCE-DNDERUNG:   12. NOV. 2014   16:22   F108299      */
 /*                                                                   */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE OA1P.TXC411A1                           */
 /*********************************************************************/
      5 XC411_DOC_UUID         CHAR(36),
      5 XC411_TAG              CHAR(20),
      5 XC411_TAG_DATA         CHAR(32000) VAR;
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 3          */
 /*********************************************************************/
  /*   END %INCLUDE XC411A1T */
 ;

 Dcl 1 XR112A1T,
  /* BEGIN %INCLUDE XR112A1T */
 /*********************************************************************/
 /* PLI DECLARATION FOR TABLE GDB0472.TXR112A1                        */
 /*********************************************************************/
 /*DCL 1 XR112A1T,  */
      5 XR112_RECIP_CIFNR  CHAR(16),
      5 XR112_BUSI_UUID_B  CHAR(36),
      5 XR112_BUSI_OBJTYP  CHAR(2),
      5 XR112_INCIDENT_CDE  CHAR(3),
      5 XR112_INCIDENT_TS  CHAR(26),
      5 XR112_BUID  CHAR(4),
      5 XR112_RET_OFFICE  CHAR(8),
      5 XR112_RET_AO  CHAR(8),
      5 XR112_RET_CATEGORY  CHAR(7),
      5 XR112_CLIENT_OFFIC  CHAR(8),
      5 XR112_PRINTER_NAME  CHAR(15),
      5 XR112_STATUS  CHAR(2),
      5 XR112_CREATOR_PID  CHAR(8),
      5 XR112_INCIDENT_CNT  CHAR(2000) VAR;
 /*********************************************************************/
 /* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 14         */
 /*********************************************************************/
  /*   END %INCLUDE XR112A1T */
 ;

 Dcl 1 TID150A1,
  /* BEGIN %INCLUDE TID150A1 */
 /*--- --------------------------------------------------------------*/
 /*- START COPYBOOK TID150A1                                        -*/
 /*------------------------------------------------------------------*/

 /*------------------------------------------------------------------*/
 /*- PRODUKT      : DOD                                             -*/
 /*- BESCHREIBUNG : STRUKTUR ZU DB2 TABELLE TID150A1                -*/
 /*-                ("UUID LOG         ")                           -*/
 /*------------------------------------------------------------------*/

         5  TID150UUI         CHAR(35)  ,
         5  TID150TST         CHAR(26)  ,
         5  TID150CHA         CHAR(3)   ,
         5  TID150LNR         CHAR(4)   ,
         5  TID150VRS         CHAR(5)   ,
         5  TID150CRE         CHAR(7)   ,
         5  TID150IDT         CHAR(2)   ,
         5  TID150IDE         CHAR(20)  ,
         5  TID150ADT         CHAR(2)   ,
         5  TID150ADR         CHAR(40)  ,
         5  TID150BU          CHAR(4)   ,
         5  TID150BKS         CHAR(4)   ,
         5  TID150ARE         CHAR(4)   ,
         5  TID150CBE         CHAR(8)   ,
         5  TID150INS         CHAR(8)   ,
         5  TID150ITF         CHAR(3)   ,
         5  TID150DSN         CHAR(44)                     /*SH01*/

 /*------------------------------------------------------------------*/
 /*- ENDE COPYBOOK TID150A1                                         -*/
 /*------------------------------------------------------------------*/
  /*   END %INCLUDE TID150A1 */
 ;



 dcl  WA_REQ_PRIORITY          char(02)  init('');

 /*-------------------------------------------------------------------*/
 /* READ PROGRAM PARM RECORDS                                         */
 /*-------------------------------------------------------------------*/
 dcl 1 AUSL,
  /* BEGIN %INCLUDE PARMDCL */
 /*********************************************************************/
 /* DD#PARM: Deklaration der Standard-Felder     ******************** */
 /* ----------------------------------------     * Member: PARMDCL  * */
 /*                                              ******************** */
 /* Verwendung:  Deklaration $@PARM4, $@PARM5 und $@PARM6             */
 /*                                                                   */
 /* Daten einlesen siehe PARMREAD                                     */
 /*                                                                   */
 /* BMP-ECR- / Seriell-Splitt-Verarbeitung siehe ECR#SPLT             */
 /*                                                                   */
 /*                                  Stand per: 12.12.2003 / KARS 11  */
 /*                                  Mutation : 23.08.2005 / KCDS 211 */
 /*********************************************************************/

 /* $@PARM4 nicht in DD#PARM angeben, wird in PARMREAD abgef|llt.     */
       2 $@PARM4        CHAR (08),     /* Jobname                     */

 /* BMP-ECR- / Seriell-Splitt-Felder                                  */
       2 $@PARM5        BIN FIXED(15), /* Elapsed Time in Sekunden    */
       2 $@PARM6        BIN FIXED(31)  /* Anzahl Datenbank-Updates    */
                                       /* (BMP-ECR)              oder */
                                       /* Anzahl Daten-Verarbeitungen */
                                       /* (Seriell-Split)             */

  /*   END %INCLUDE PARMDCL */
 ,
       2 $@PARM7   char(01),       /* CHECKPOINT LOGIC (Y/N)          */
       2 $@PARM8   char(01),       /* PROGRAM TRACE (Y/N)             */
       2 $@PARM9   CHAR(04),       /* DB2 SUBSYSTEM                   */
       2 $@PARM10  CHAR(07);       /* Commit Frequency                */

  /* BEGIN %INCLUDE PARMREAD */
 /********************************************************************/
 /* DD#PARM: Daten einlesen                      ******************** */
 /* -----------------------                      * Member: PARMREAD * */
 /*                                              ******************** */
 /* Verwendung:  File-Deklaration und -Verarbeitung mittels GET FILE  */
 /*                                                                   */
 /* Deklaration der Standard-Felder siehe PARMDCL                     */
 /*                                                                   */
 /* BMP-ECR- / Seriell-Splitt-Verarbeitung siehe ECR#SPLT             */
 /*                                                                   */
 /*                                  Stand per: 12.12.2003 / KARS 11  */
 /*                                  Mutation : 03.09.2018 / MITM 43  */
 /*                                                                   */
 /*********************************************************************/

 /* Initialisierung nvtig, DD#PARM muss nicht alle Felder enthalten.  */
 AUSL         = '';

 CALL READ_DD#PARM_INTO_AUSL();

 READ_DD#PARM_INTO_AUSL: PROC()
                         SUPPRESS(LAXNESTED)
                         OPTIONS(NODESCRIPTOR NOINLINE);

   DCL (
       DATAFIELD,
       GETSYSWORD,
       LENGTH,
       SUBSTR,
       VERIFY
       )                BUILTIN;

   DCL DD#PARM          FILE INPUT STREAM;
   DCL DD#PARM_EOF      BIT ALIGNED INIT('0'B);
   DCL DD#PARM_DFL      BIN FIXED(31) INIT(0);

   ON ENDFILE(DD#PARM) BEGIN;
     DD#PARM_EOF = '1'B;
   END;

   ON NAME(DD#PARM) BEGIN;
     DD#PARM_DFL = LENGTH(DATAFIELD());
     SELECT;
       WHEN(DD#PARM_DFL = 8                 /* NUMMERIERUNG           */
          & VERIFY(DATAFIELD(),'0123456789') = 0 );
       WHEN(DD#PARM_DFL > 3                 /* KOMMENTAR              */
          & SUBSTR(DATAFIELD(),1,2) = '/*'
          & SUBSTR(DATAFIELD(),DD#PARM_DFL - 1,2) = '*/');
       OTHER DO;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
         SIGNAL ERROR;
       END;
     END;
   END;

   ON CONVERSION BEGIN;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
     SIGNAL ERROR;
   END;

   ON SIZE BEGIN;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
     SIGNAL ERROR;
   END;

   ON STRINGSIZE BEGIN;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
     SIGNAL ERROR;
   END;

   OPEN FILE(DD#PARM);

   (SIZE, STRINGSIZE):
   GET FILE(DD#PARM) DATA(AUSL);

   REVERT CONVERSION;
   REVERT SIZE;
   REVERT STRINGSIZE;

   IF DD#PARM_EOF = '0'B
   THEN DO;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
     SIGNAL ERROR;
   END;

   AUSL.$@PARM4 = GETSYSWORD('JOBNAME');

   CLOSE FILE(DD#PARM);

 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */

 END READ_DD#PARM_INTO_AUSL;
  /*   END %INCLUDE PARMREAD */

 /*-------------------------------------------------------------------*/
 /* Global variables declarations                                     */
 /*-------------------------------------------------------------------*/
 dcl MQMessageCnt                 bin fixed(31) init(0);
 dcl MQMessageDocCnt              bin fixed(31) init(0);
 dcl WaitTimeForMQ                bin fixed(31) init(1000);
 dcl MQMessageSize                bin fixed(31) init(0);
 dcl MQMessageLen                 bin fixed(31) init(0);
 dcl PDFMQMessageLength           bin fixed(31) init(0);
 dcl PDFMQMaxMessageLength        bin fixed(31) init(0);
 dcl MQArrayCount                 bin fixed(31) init(0);
 dcl NumberOfAllocatedErrorMQMsg  bin fixed(31) init(0);
 dcl CommitSeqNumber              bin fixed(31) init(0);
 dcl DBoxPartUsedSpace            bin fixed(31) init(0);
 dcl CurrEnclCount                bin fixed(31) init(0);
 dcl DelayTime                    bin fixed(31) init(0);
 dcl TotalDocsBypassed            bin fixed(31) init(0);
 dcl TotalDocsSentToDbox          bin fixed(31) init(0);
 dcl TotalDocsSentToArchive       bin fixed(31) init(0);
 dcl TotalDocsSentToPrint         bin fixed(31) init(0);
 dcl ErrorTextLen                 bin fixed(31) init(18);
 dcl YXRRSAF_rc                   bin fixed(31) init(0);

 dcl MQMessageInputData(25000)    char(4096)    ctl ;
 dcl ErrorText                    char(280) var init('');
 dcl EnclErrQueueName             char(48)      init('');
 dcl ErrorQueueName               char(48)      init('');

 dcl SaveDocType                  char(04)      init('');
 dcl RecipientBUID                char(04)      init('');
 dcl ImmediateQueueManager        char(48)      init('');
 dcl ImmediateQueueName           char(48)      init('');
 dcl PrintQueueName               char(48)      init('');
 dcl ELARQueueName                char(48)      init('');
 dcl ConversionRemarks            char(255)     init('');
 dcl BULegalEntityName            char(35)      init('');
 dcl TargetDocumentFormat         char(03)      init('');
 dcl LastDocSourceFormat          char(03)      init('');
 dcl CurrentDocSourceFormat       char(03)      init('');

 dcl MQFull                       bit(01)       init('0'b) aligned;
 dcl PDFConversionBypass          bit(01)       init('0'b) aligned;
 dcl SaveDocTypeBit               bit(01)       init('0'b) aligned;
 dcl SupImportBypass              bit(01)       init('0'b) aligned;
 dcl ShutDownMessageReceived      bit(01)       init('0'b) aligned;
 dcl BypassDocProcess             bit(01)       init('0'b) aligned;
 dcl SentToPrintMQ                bit(01)       init('0'b) aligned;
 dcl DBoxDocAlreadyExists         bit(01)       init('0'B) aligned;
 dcl RecipCIFExistsInCIFAppl      bit(01)       init('0'B) aligned;
 dcl dossierExist                 bit(01)       init('0'B) aligned;
 dcl IsImportCategoryRet          bit(01)       init('0'B) aligned;
 dcl DocumentTypePDFCopyB         bit(01)       init('0'B) aligned;

 Dcl 1 ChkpXrstUserArea,
       2 RecCnt                   bin fixed(31);

 dcl MQInputMessagePtr            ptr init(null);
 dcl ptrAFPContent                ptr init(null);
 dcl ptrPDFContentRow             ptr init(null);
 dcl ptrErrorText                 ptr init(null);
 dcl ptrPDFMQMessage              ptr init(null);
 dcl MQMessageSample              char(200) based(MQInputMessagePtr);

 /*-------------------------------------------------------------------*/
 /* External Files                                                    */
 /*-------------------------------------------------------------------*/
 dcl SYSPRINT                External File Stream Print Output;
 dcl RetryCount              fixed bin (31) init (0);
 dcl MaxRetryCount           fixed bin (31) init (2);
 dcl DocContentSize          fixed bin (31) init (0);
 dcl DB2DocContentWIPLen     fixed bin (31) init (0);
 dcl DB2DocContentDataRecLen fixed bin (31) init (0);
 dcl DB2MonthDay             fixed bin (15) init (0);

 dcl ErrorMQMessage(*)        char(4096)      ctl;
 dcl PDFMQMessage(5000)       char(20000)      ctl;
 dcl AFP_Record               char(32756) init('') var;
 dcl PDF_Record               char(32000) init('') var;
 dcl DocContent(3205)         char(32756)
                              based(XCPARS.OutParam.ptrDBoxContent);
 dcl ErrorMessageRec          char(32767)  based  (ptrErrorText);
 dcl PDFMQMessageRec          char(32767)  based  (ptrPDFMQMessage);
 dcl DB2DocContentDataRec     char(32000)  based(ptrPDFContentRow);

 dcl 1 SplittedAFPRecord      based(ptrAFPContent),
     2 AFP_5A                  char(01),
     2 AFP_Rec_Length          char(02),
     2 AFP_Struct              char(01);

 dcl AFP_Rec_Length_Numeric   bin fixed(15,0) based
                             (addr(SplittedAFPRecord.AFP_Rec_Length));

 dcl MQMsgXMLHeaderNew   char(43)
                  value ('<?xml version="1.0" encoding="UTF-8"?><Req>');
 dcl TrailerNew          char(12) value ('</Doc></Req>');

 dcl ConfigPageDefvalue      char(08)            init('');
 dcl ConfigFormDefvalue      char(08)            init('');
 dcl ProcessKey              char(08)            init('');
 dcl PriorityKey             char(02)            init('');
 dcl AppIDValue              char(53)            init('');
 dcl JulianDays              char(07)            init('');

 /*------------------------------------------------------------------*/
 /*- Base 64 converted content is 4/3 times longer in length         */
 /*------------------------------------------------------------------*/
 dcl Base64OutMsg(5200)      char(20000)      ctl;
 dcl ptrBase64OutMsg         ptr              init (null());
 dcl Base64OutMsgRec         char(32000)      based(ptrBase64OutMsg);
 dcl Base64OutMsgLen         bin fixed(31)    init(0);

 /*===================================================================*/
 /*                                                                   */
 /*                 M A I N - P R O C E D U R E                       */
 /*                                                                   */
 /*===================================================================*/
 Call PerformDB2Connection();
 Call InitiateProgram('Document Delivery Receiver ');
 Call RetrieveMQDetailsFromConfig;
 Call RetrievePDFMQDetailsFromConfig;
 Call InitializeWorkArea;
 Call RetrieveAndInitializeData;
 Call PerformMQConnection;
 Call PerformMQOpen;

 do while(^ShutDownMessageReceived);
   Call RetrieveAndProcessMQMessage;
 end;

 Call PerformMQClose;
 Call PerformMQDisConnection;
 Call PerformDB2AndMQCommit;
 Call DisplayProgramStatistics;
 Free MQMessageInputData(25000);
 FREE PDFMQMessage;                                            /*AS01*/
 FREE Base64OutMsg;                                            /*AS01*/
 Call Pliretc(0);

 /*===================================================================*/
 /*                                                                   */
 /*                     S U B - P R O C E D U R E S                   */
 /*                                                                   */
 /*===================================================================*/
 PerformDB2Connection: proc;
   Call Logtrace(@Dflt,'Proc',ProcedureName());


   sqlca = '';

   YXRRSAF_rc = YXRRSAF('CONNECT',$@PARM9,@PgmName);

   If YXRRSAF_rc = 0
   then Call LogTrace(@Dflt,'T#01','DB2 Connection Successfull');
   else do;
     Call Logtrace(@Force,'T#02','SSID      : '!!$@PARM9);
     Call Logtrace(@Force,'T#03','Planname  : '!!@PgmName);
     Call HandleException('E#01','YXRRSAF',
                          'DB2 Connection Failiure, RC:'!!YXRRSAF_rc);
   end;

 End PerformDB2Connection;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 RetrieveMQDetailsFromConfig: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   ImmediateQueueManager = trim(RetrieveDBoxConfig('*'
                                                  ,'IMMEDIATE_RECEIVER'
                                                  ,'QUEUE_MANAGER'));

   ImmediateQueueName    = trim(RetrieveDBoxConfig('*'
                                                  ,'IMMEDIATE_RECEIVER'
                                                  ,'QUEUE_NAME'));

   ErrorQueueName        = trim(RetrieveDBoxConfig('*'
                                                  ,'IMMEDIATE_RECEIVER'
                                                 ,'VALID_ERROR_QUEUE'));

   EnclErrQueueName
                         = trim(RetrieveDBoxConfig('*'
                                                  ,'IMMEDIATE_RECEIVER'
                                                  ,'ENCL_ERROR_QUEUE'));

   PrintQueueName        = trim(RetrieveDBoxConfig('*'
                                                  ,'PRINT_ADAPTOR'
                                                  ,'QUEUE_NAME'));

   ELARQueueName         = trim(RetrieveDBoxConfig('*'
                                                  ,'ARCHIVE_ADAPTOR'
                                                  ,'QUEUE_NAME'));

   If ImmediateQueueName = ''
   then Call HandleException('E#01','########','Immediate Queue Name is'
                           !!' not present in TXC300A1');

   If PrintQueueName = ''
   then Call HandleException('E#02','########','Print Queue Name is'
                           !!' not present in TXC300A1');

   If ELARQueueName = ''
   then Call HandleException('E#03','########','ELAR Queue Name is'
                           !!' not present in TXC300A1');

   If ErrorQueueName = ''
   then Call HandleException('E#04','########','Validation Error Queue'
                           !!' Name is not present in TXC300A1');

   If EnclErrQueueName = ''
   then Call HandleException('E#04','########','Enclosure Error Queue'
                           !!' Name is not present in TXC300A1');

   Call LogTrace(@Force,'Imme','Immediate Queue: '!!ImmediateQueueName);
   Call LogTrace(@Force,'Prit','Print     Queue: '!!PrintQueueName);
   Call LogTrace(@Force,'ELAR','Archive   Queue: '!!ELARQueueName);
   Call LogTrace(@Force,'Eror','Error     Queue: '!!ErrorQueueName);
   Call LogTrace(@Force,'Encl','Enclosure Queue: '!!EnclErrQueueName);

 End RetrieveMQDetailsFromConfig;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 RetrieveDBoxConfig: Proc($Channel,$Group,$Key) returns(char(100));
   Call LogTrace(@Dflt,'PROC',procedurename() !! '('!! $Channel !!
                                                 ','!! $Group   !!
                                                 ','!! $Key     !!')');
   dcl  $Channel              char(03);
   dcl  $Group                char(20);
   dcl  $Key                  char(20);

   XCCNFG                     = '';
   XCCNFG.XC300_CHANNEL       = $Channel;
   XCCNFG.XC300_CONFIG_GROUP  = $Group;
   XCCNFG.XC300_CONFIG_KEY    = $Key;
   XCCNFG.XC300_CONFIG_SEQ    = 1;
   XCCNFG.TraceFlag           = @Trace;

   Call YXCCNFG('S',addr(XCCNFG));
   Select(XCCNFG.RC);
     when(0)   return(trim(XCCNFG.XC300_CONFIG_DATA));
     when(100) return('');
     otherwise do;
       Call HandleException('E#46','########',
                            'Unable to Retrieve Config for:' !!
                             $Channel !!','!! $Group !!','!! $Key);
     end;
   end;
   return('');
 End RetrieveDBoxConfig;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 InitializeWorkArea: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   Allocate MQMessageInputData(25000);
   ALLOCATE PDFMQMessage;                                    /*AS01*/
   ALLOCATE Base64OutMsg;                                    /*AS01*/

   DelayTime       =  bin(trim(RetrieveDBoxConfig('*',
                        'DELAY_TIME',@PgmName)));

   WaitTimeForMQ  = bin(RETRIEVEDBOXCONFIG('*',
                       'PROCESSING_WAIT_TIME','MQ_TYPE_SMALL'));

   EXEC SQL
    SET :DB2MonthDay = MONTH(CURRENT TIMESTAMP) * 100
                       + DAY(CURRENT TIMESTAMP);
   JulianDays = REPATTERN(PL1_Current_Date,'YYYYDDD','YYYYMMDD');


   ID0000 = '';
   CALL YID0000 (addr(ID0000));

 End InitializeWorkArea;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformMQConnection: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   MQReceiverCommArea               = '';
   MQReceiverCommArea.$Trace        = @Trace;
   MQReceiverCommArea.$QueueManager = ImmediateQueueManager;

   /*-----------------------------------------------------------------*/
   /* Connect to MQ Manager                                           */
   /*-----------------------------------------------------------------*/
   Call YIDMQCN(addr(MQReceiverCommArea));
   if MQReceiverCommArea.$CompCode ^= 0
   then Call HandleException('E#05','YIDMQCN ',
                             'Unable to Connect to MQ');

 End PerformMQConnection;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 RetrieveAndProcessMQMessage: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   TopicQCommArea        = '';
   MQMessageInputData(*) = '';
   MQInputMessagePtr     = addr(MQMessageInputData(1));
   MQMessageSize         = cstg(MQMessageInputData);


   TopicQCommArea.$HandleConnection
                                 = MQReceiverCommArea.$HandleConnection;
 /* TopicQCommArea.$HandleObject  = MQReceiverCommArea.$HandleObject;*/
                                                          /*AS01*/

   Call ReceiveMessageFromMQ;

   do while (MQReceiverCommArea.$CompCode = 0
      &  ^ShutDownMessageReceived);

     MQMessageDocCnt     = MQMessageDocCnt + 1;
     LastDocSourceFormat = CurrentDocSourceFormat ;
     Call ReinitializationVariables;
     Call ProcessMQMessage;
     call PerformDB2AndMQCommit();

     Call ReInitializeLoopWorkArea;
     Call ReceiveMessageFromMQ;

   end;

 End RetrieveAndProcessMQMessage;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 ReinitializationVariables: Proc;
   call Logtrace(@Dflt,'Proc',ProcedureName());

   DocContentSize      = 0;
   DB2DocContentWIPLen = 0;
   PdfConversionBypass = @False;
   XCPARS              = '';
   XCPARS.OutParam.ReturnCode = 0;
   XCPARS.OutParam.ReturnText = '';

   XCPARS.OutParam.PrintDetails.ptrPrintMQDetails = null();
   XCPARS.OutParam.PrintDetails.PrintDocumentSize = 0;
   XCPARS.OutParam.PrintDetails.ListNum = '';

   XCPARS.OutParam.ELARDetails.ptrELARMQDetails = null();
   XCPARS.OutParam.ELARDetails.ELARDocumentSize = 0;

   XCPARS.OutParam.EnclosureData.TotalEnclCount   = 0;
   XCPARS.OutParam.EnclosureData.ptrXC409A1Tdata1 = null();
   XCPARS.OutParam.EnclosureData.ptrXC409A1Tdata2 = null();
   XCPARS.OutParam.EnclosureData.ptrXC409A1Tdata3 = null();
   XCPARS.OutParam.EnclosureData.ptrXC409A1Tdata4 = null();
   XCPARS.OutParam.EnclosureData.ptrXC409A1Tdata5 = null();
   XCPARS.OutParam.EnclosureData.ptrXC409A1Tdata6 = null();

   XCPARS.OutParam.StandaloneMetadata.ptrDboxStandaloneMetadata1 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrDboxStandaloneMetadata2 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrDboxStandaloneMetadata3 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrDboxStandaloneMetadata4 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrDboxStandaloneMetadata5 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrDboxStandaloneMetadata6 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrRETStandaloneMetadata1 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrRETStandaloneMetadata2 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrRETStandaloneMetadata3 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrRETStandaloneMetadata4 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrRETStandaloneMetadata5 =
                                                                 null();
   XCPARS.OutParam.StandaloneMetadata.ptrRETStandaloneMetadata6 =
                                                                 null();

   XCPARS.OutParam.DBoxDetails.ptrDBoxContent    = null();
   XCPARS.OutParam.DBoxDetails.DBoxDocumentSize  = 0;
   XCPARS.OutParam.DBoxDetails.MaxIndexRecTagCnt = 0;
   XCPARS.OutParam.DBoxDetails.IndexRecTagTbl.INDX_TAG(*)   = '';
   XCPARS.OutParam.DBoxDetails.IndexRecTagTbl.INDX_FIELD(*) = '';
   XCPARS.OutParam.DBoxDetails.ptrDboxMetadata              = null();

   XCPARS.OutParam.RETDetails.ptrRETMetadata                = null();

 End ReinitializationVariables;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 RetrieveDBoxDocContentAvailPartition: Proc;
   call Logtrace(@Dflt,'Proc',ProcedureName());

   XCEPHD                                = '';
   XCEPHD.HeaderParam.PgmName            = @PgmName;
   XCEPHD.HeaderParam.TraceFlag          = @Trace;
   XCEPHD.InParam.OperationMode          = 'S';
   XCEPHD.InParam.ModeRetrieve.DocFormat = CurrentDocSourceFormat;

   Call YXCEPHD(addr(XCEPHD));

   If XCEPHD.OutParam.returnCode ^= 0
   then call HandleException('E#03','########',
                             'Unable to Retrieve DBox Partition, '!!
                             'YXCEPHD RC:' !!
                              XCEPHD.OutParam.returnCode);

 End RetrieveDBoxDocContentAvailPartition;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 UpdateDBoxDocContentPartUsedSpace: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   XCEPHD.InParam.OperationMode            = 'U';
   XCEPHD.InParam.ModeUpdate.TableName     = XCEPHD.OutParam.
                                             ModeRetrieve.TableName;
   XCEPHD.InParam.ModeUpdate.PartNumber    = XCEPHD.OutParam.
                                             ModeRetrieve.PartNumber;
   XCEPHD.InParam.ModeUpdate.PartUsedSpace = DBoxPartUsedSpace;


   Call YXCEPHD(addr(XCEPHD));

   Select(XCEPHD.OutParam.ReturnCode);
     when(0);
     otherwise
        Call HandleException('E#04','TXC406A1',
                              'Update Used Partition Failed, '!!
                              XCEPHD.OutParam.ReasonCode);
   end;
   DBoxPartUsedSpace = 0;

 End UpdateDBoxDocContentPartUsedSpace;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 ReInitializeLoopWorkArea: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   MQMessageInputData(*) = '';
   MQInputMessagePtr     = addr(MQMessageInputData(1));
   MQMessageLen          = 0;
   SentToPrintMQ         = @False;
   BypassDocProcess      = @False;
   DBoxDocAlreadyExists  = @False;
   DocumentTypePDFCopyB  = @False;

 End ReInitializeLoopWorkArea;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 PerformDB2Commit: proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   CommitSeqNumber = CommitSeqNumber + 1;
   /*-----------------------------------------------------------------*/
   /* Perform DB2 Commit ---------------------------------------------*/
   /*-----------------------------------------------------------------*/
   YXRRSAF_rc = YXRRSAF('COMMIT');

   If YXRRSAF_rc = 0
   then call LogTrace(@DFLT,'T#38','DB2 COMMIT# '!! CommitSeqNumber);
   else Call HandleException('E#22','COMMIT','Unsuccessful Commit');

 End PerformDB2Commit;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 PerformDB2AndMQCommit: proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   Call PerformDB2Commit();
   /*-----------------------------------------------------------------*/
   /* Perform MQ Commit ----------------------------------------------*/
   /*-----------------------------------------------------------------*/
   MQReceiverCommArea.$CompCode = 0;
   if MQMessageDocCnt > 0
   then Call YIDMQCM(addr(MQReceiverCommArea));

   if MQReceiverCommArea.$CompCode ^= 0
   then Call HandleException('E#23','YIDMQCM ','Unable to COMMIT MQ,'
                                          !!'Reason: '
                                          !!MQReceiverCommArea.$Reason);
 End PerformDB2AndMQCommit;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformMQOpen: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   Call PerformReceiverMQOpen;
   Call PerformADHOCPDFMQOpen;
   Call PerformELARMQOpen;
   Call PerformPrintMQOpen;
   Call PerformEnclErrorMQOpen;
   Call PerformErrorMQOpen;

 End PerformMQOpen;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformReceiverMQOpen: Proc();

   Call LogTrace(@Dflt,'Proc',procedurename());

   MQReceiverCommArea.$QueueName    = ImmediateQueueName;

   Call YIDMQOP(addr(MQReceiverCommArea),
                1 + 8192);

   If MQReceiverCommArea.$CompCode ^= 0
   then Call HandleException('E#06','YIDMQCN ',
                             'Unable to OPEN REceiver MQ');

 End PerformReceiverMQOpen;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformELARMQOpen: Proc();

   Call LogTrace(@Dflt,'Proc',procedurename());

   MQELARCommArea                   = '';
   MQELARCommArea.$QueueName        = ELARQueueName;
   MQELARCommArea.$Trace            = @Trace;
   MQELARCommArea.$QueueManager     = ImmediateQueueManager;  /*AS01*/
   MQELARCommArea.$HandleConnection =
                                  MQReceiverCommArea.$HandleConnection;

   Call YIDMQOP(addr(MQELARCommArea),
                16 + 8192);

   If MQELARCommArea.$CompCode ^= 0
   then Call HandleException('E#06','YIDMQCN ',
                             'Unable to OPEN  ELAR MQ');

 End PerformELARMQOpen;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformPrintMQOpen: Proc();

   Call LogTrace(@Dflt,'Proc',procedurename());

   MQPrintCommArea                   = '';
   MQPrintCommArea.$QueueName        = PrintQueueName;
   MQPrintCommArea.$Trace            = @Trace;
   MQPrintCommArea.$QueueManager     = ImmediateQueueManager;   /*AS01*/
   MQPrintCommArea.$HandleConnection =
                                  MQReceiverCommArea.$HandleConnection;


   Call YIDMQOP(addr(MQPrintCommArea),
                16 + 8192);
   If MQPrintCommArea.$CompCode ^= 0
   then Call HandleException('E#06','YIDMQCN ',
                             'Unable to OPEN Print MQ');

 End PerformPrintMQOpen;

 /*-------------------------------------------------------------------*/
 /* MQ Name fetched from Config                                       */
 /*-------------------------------------------------------------------*/
 PerformADHOCPDFMQOpen: Proc();

   Call LogTrace(@Dflt,'Proc',procedurename());

   MQPDFReqCommArea.$Trace           = @Trace;
   MQPDFReqCommArea.$HandleConnection =
                                  MQReceiverCommArea.$HandleConnection;


   Call YIDMQOP(addr(MQPDFReqCommArea),
                32 + 16 + 8192);
   If MQPDFReqCommArea.$CompCode ^= 0
   then Call HandleException('E#06','YIDMQCN ',
                             'Unable to OPEN PDF MQ');

 End PerformADHOCPDFMQOpen;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformEnclErrorMQOpen: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   MQEnclCommArea                   = '';
   MQEnclCommArea.$QueueName        = EnclErrQueueName;
   MQEnclCommArea.$Trace            = @Trace;
   MQEnclCommArea.$QueueManager     = ImmediateQueueManager; /*AS01*/
   MQEnclCommArea.$HandleConnection =
                                  MQReceiverCommArea.$HandleConnection;

   Call YIDMQOP(addr(MQEnclCommArea),
                16 + 8192);

   If MQEnclCommArea.$CompCode ^= 0
   then Call HandleException('E#06','YIDMQCN ',
                             'Unable to OPEN Encl Error MQ');

 End PerformEnclErrorMQOpen;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformErrorMQOpen: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   MQErrorCommArea                   = '';
   MQErrorCommArea.$QueueName        = ErrorQueueName;
   MQErrorCommArea.$Trace            = @Trace;
   MQErrorCommArea.$QueueManager     = ImmediateQueueManager;  /*AS01*/
   MQErrorCommArea.$HandleConnection =
                                  MQReceiverCommArea.$HandleConnection;

   Call YIDMQOP(addr(MQErrorCommArea),
                16 + 8192);

   If MQErrorCommArea.$CompCode ^= 0
   then Call HandleException('E#06','YIDMQCN ',
                             'Unable to OPEN Error MQ');
 End PerformErrorMQOpen;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
  ReceiveMessageFromMQ: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   Call  YIDMQGT(addr(MQReceiverCommArea),
                (1 +  2),
                 WaitTimeForMQ,
                 MQMessageSize,
                 MQInputMessagePtr,
                 MQMessageLen);

   If MQReceiverCommArea.$CompCode = 0
   then do;

     if substr(MQMessageSample,1,9) = 'SHUT DOWN'
     then do;
       ShutDownMessageReceived = @True;
       Call LogTrace(@Force,'T#50','SHUT DOWN Message Received');
     end;
     else MQMessageCnt = MQMessageCnt + 1;
     Call LogTrace(@Dflt,'T#42','MQ Read Successfull' !!
                                ',Cnt:'!!
                                 trim(char(MQMessageCnt)) !!
                                ',Len:'!!
                                 trim(char(MQMessageLen)) !!
                                ',Sample:'!!
                                 MQMessageSample);
   end;
   else do;
     If MQReceiverCommArea.$Reason ^= 2033
     then Call HandleException('E#07','YIDMQCN ',
                               'Unable to GET MESSAGE FROM MQ');
   end;

 End ReceiveMessageFromMQ;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 ParseAndValidateMQMessage: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   Call LogTrace(@Dflt,'T#99','MQMessageInputData:'!!
                               MQMessageSample);

   XCPARS.HeaderParam.PgmName    = @PgmName;
   XCPARS.HeaderParam.TraceFlag  = @Trace;

   MQArrayCount           = MQMessageLen/4096;

   MQArrayCount           = MQArrayCount + 1;

   Call LogTrace(@Dflt,'T#98','MQArrayCount:'!!
                               MQArrayCount);

   XCPARS.InParam.OperationMode     = 'V';
   XCPARS.InParam.MQArrayCount      = MQArrayCount;
   XCPARS.InParam.MQMessageSize     = MQMessageLen;
   XCPARS.InParam.ptrInputMQContent = addr(MQMessageInputData(1));

   Call YXCPARS(addr(XCPARS));

   Call LogTrace(@Dflt,'T#97','XCPARS.OutParam.ReturnCode'!!
                               XCPARS.OutParam.ReturnCode);
   Select(XCPARS.OutParam.ReturnCode);
    when(0);
    when(12) do;
      BypassDocProcess = @true;
      Call ProcessingError('EnclosureError');
    end;
    otherwise do;
      BypassDocProcess = @true;
      Call ProcessingError('');
    end;
   End;
 End ParseAndValidateMQMessage;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 ProcessMQMessage: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   if ^BypassDocProcess
   then Call ParseAndValidateMQMessage;

   if ^BypassDocProcess
       &(ptrDboxMetadata ^= Null() )
       & (XC401A1T.XC401_CHANNEL >'')
   then do;
     Call ProcessDBoxDocumentDetails;
     if ^BypassDocProcess
     then do;
       TotalDocsSentToDbox =  TotalDocsSentToDbox + 1;
       Call LogTrace(@Force,'T#99','Imported in Dbox Doc UUID:'!!
                                     xc401a1t.xc401_DOC_UUID    !!
                                    'for channel : '            !!
                                     xc401a1t.xc401_Channel);
     end;
   end;

   if ^BypassDocProcess
    &  (XCPARS.OutParam.ELARDetails.ELARDocumentSize > 0 )
   then do;
     Call PopulateAndSendELARMQMessage;
     TotalDocsSentToArchive = TotalDocsSentToArchive + 1;
   end;

   if ^BypassDocProcess
    &  SentToPrintMQ
    &  (XCPARS.OutParam.PrintDetails.PrintDocumentSize > 0 )
   then do;
     Call PopulateAndSendPrintMQMessage;
     TotalDocsSentToPrint = TotalDocsSentToPrint + 1;
   end;

   if DBoxPartUsedSpace > 0
   then do;
     Call UpdateDBoxDocContentPartUsedSpace;
   end;

 End ProcessMQMessage;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 RetrieveAndProcessDocContent: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());


   Call LogTrace(@Dflt,'T#96','SrcFormat:'!!
                           XC401A1T.XC401_DOC_SRC_FORMAT);

   if XC401A1T.XC401_DOC_SRC_FORMAT = 'PDF'
    ! XC401A1T.XC401_DOC_SRC_FORMAT = 'XLS'
   then do;

     DB2DocContentWIPLen = OutParam.DBoxDetails.DBoxDocumentSize;
     ptrPDFContentRow    = addr(DocContent(1));

     do while(XCWDOC.OutParam.reasoncode = 0 &
              DB2DocContentWIPLen > 0        &
              ^BypassDocProcess);

       DB2DocContentDataRecLen = MIN(   32000,
                                     DB2DocContentWIPLen);
       Call LogTrace(@Dflt,'T#08',
                    'Total:'!!
                    trim(char(OutParam.DBoxDetails.DBoxDocumentSize)) !!
                    ',Transferred:'!!
                    trim(char(ControlParam.DocContentLen)) !!
                    ',UnProcessed:'!!
                    trim(char(DB2DocContentWIPLen)) !!
                    ',Append:'!!
                    trim(char(DB2DocContentDataRecLen)));

        PDF_Record = '';
        PDF_Record = substr(DB2DocContentDataRec,1,
                            DB2DocContentDataRecLen);

        Call InsertDocContentInDBOX('PDF');

        DB2DocContentWIPLen = DB2DocContentWIPLen -
                              DB2DocContentDataRecLen;
        ptrPDFContentRow    = PTRADD(ptrPDFContentRow,
                                     DB2DocContentDataRecLen);
     end;
   end;
   else do;

     ptrAFPContent = addr(DocContent(1));
     do while (DocContentSize < OutParam.DBoxDetails.DBoxDocumentSize
              & ^BypassDocProcess);

     Call LogTrace(@Dflt,'T#95','DocContentSize:'!!
                                 DocContentSize );
     Call LogTrace(@Dflt,'T#94','OutParamDocContentSize:'!!
                                 OutParam.DBoxDetails.DBoxDocumentSize);

       AFP_Record =  '';
       AFP_Record =
             ExtractAFPRecord(ptrAFPContent,(AFP_Rec_Length_Numeric+1));

       Call InsertDocContentInDBOX('AFP');

       DocContentSize = DocContentSize + (AFP_Rec_Length_Numeric + 1);

       ptrAFPContent = PTRADD(ptrAFPContent,
                             (AFP_Rec_Length_Numeric + 1));

     end;
   end;

 End RetrieveAndProcessDocContent;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 ExtractAFPRecord: Proc($ptrContent,$LengthOfRecord)
                             Returns(char(32752) var);

   Call LogTrace(@Dflt,'Proc',procedurename());

   dcl $ptrContent            ptr             ;
   dcl $LengthOfRecord        bin fixed(31)   ;
   dcl RemainingContent       char(32752)  based($ptrContent);
   dcl ExtractedContent       char(32752) var init('');;

   ExtractedContent  = substr(RemainingContent,1,
                               $LengthOfRecord );
   Call LogTrace(@Dflt,'T#92','ExtractedContent:'!! ExtractedContent);
   Call LogTrace(@Dflt,'T#93','$LengthOfRecord :'!! $LengthOfRecord);
   return(ExtractedContent);

 End ExtractAFPRecord;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 InsertDocContentInDBOX: Proc($Format);
   Call LogTrace(@Dflt,'Proc',ProcedureName()!!'('!!$Format!!')');
   dcl $Format char(03);

   XCWDOC.HeaderParam.PgmName    = @PgmName;
   XCWDOC.HeaderParam.TraceFlag  = @Trace;

   XCWDOC.InParam.OperationMode  = 'W';
   XCWDOC.InParam.docUUID        = xc401a1t.XC401_DOC_UUID;

   XCWDOC.InParam.TableName  = XCEPHD.Outparam.ModeRetrieve.TableName;
   XCWDOC.InParam.PartNo     = XCEPHD.Outparam.ModeRetrieve.PartNumber;
   XCWDOC.InParam.docFormat  = XCEPHD.InParam.ModeRetrieve.DocFormat;

   if $Format = 'PDF'
   then XCWDOC.InParam.ptrdocContent = addr(PDF_Record);
   else XCWDOC.InParam.ptrdocContent = addr(AFP_Record);

   if ^DBoxDocAlreadyExists then
     Call YXCWDOC(addr(XCWDOC));

   Select(XCWDOC.OutParam.reasoncode);
     when(0);
     when(4) do;
       DBoxDocAlreadyExists = @True;
       BypassDocProcess = @True;
       XCPARS.OutParam.ReturnText = 'Duplicate Document';
       Call ProcessingError('DuplicateDocument');
     end;
     otherwise do;
       Call HandleException('E#60','########',
                             'Unable to INSERT doc Content ' !!
                             'in DBox repository,ReasonCode:'!!
                              XCWDOC.OutParam.reasoncode);
     end;
   End;

 End InsertDocContentInDBOX;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 ProcessDBoxDocumentDetails: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   CurrentDocSourceFormat = xc401a1T.XC401_DOC_SRC_FORMAT ;

   if LastDocSourceFormat ^= CurrentDocSourceFormat
   then call RetrieveDBoxDocContentAvailPartition;

   WA_REQ_PRIORITY = '';
   WA_REQ_PRIORITY = '10';    /*AS01*/

   Select (XC401A1T.XC401_CHANNEL);
     when('PRT') do ;
       SentToPrintMQ = @True;
     end;
     when('RET') do ;
       Call CheckAndCreateDossierForRET ;
     end;
     otherwise;
   End;

   call CheckRecipientIdExistInDBOX(XC401A1T.XC401_RECIPIENT_ID);
   Call RetrieveAndProcessDocContent;
   if ^BypassDocProcess
   then Call InsertDBoxDocContentControlAtEndofContent;

   if ^BypassDocProcess  &  DBoxDetails.MaxIndexRecTagCnt > 0
   then call InsertIndexRecordInDBOX;

   if (XC401A1T.XC401_CHANNEL= 'RET'
    & ^BypassDocProcess )
   then do;
     Call WriteDocMetadataInRET;
   end;

   /* RS01 move before writing Metadata because of pdf_copy */
   if ^BypassDocProcess
   then Call CheckAndCreatePDFConvRequest;

   if ^BypassDocProcess
   then Call WriteDocMetadataInDBox;

   if (Outparam.EnclosureData.TotalEnclCount > 0)
    &  ^BypassDocProcess
   then Call ProcessEnclosureDocument;

   if ^BypassDocProcess
   then Call PopulateAndInsertStatisticsInTID150A1;

 End ProcessDBoxDocumentDetails;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 CheckRecipientIdExistInDBOX : Proc($Recipient_ID);
   Call LogTrace(@Dflt,'Proc',ProcedureName()!!'('!!$Recipient_ID!!')');
   dcl $Recipient_ID     Char(20);

   XC400A1T = '';

   xc400a1t.xc400_recipient_type = XC401A1T.XC401_RECIPIENT_TYPE;
   xc400a1t.xc400_recipient_id   = $Recipient_ID;

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );

     EXEC SQL
       SELECT  XC400_RECIPIENT_TYPE,
               XC400_CREATION_DATE,
               XC400_RECIPIENT_STATUS
         INTO :xc400a1t.xc400_recipient_type,
              :xc400a1t.xc400_creation_date,
              :xc400a1t.xc400_recipient_status
         FROM  TXC400A1
        WHERE  XC400_RECIPIENT_TYPE = :xc400a1t.xc400_recipient_type
          AND  XC400_RECIPIENT_ID   = :xc400a1t.xc400_recipient_id
        WITH UR;

     Select(sqlca.sqlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
         call LogTrace(@Dflt,'T#07',
                             'Recipient '!!
                              xc400a1t.xc400_recipient_id!!
                             'exists in DBox TXC400A1');

         if  xc400_recipient_type    = '01'
         then do;
           Call RetrieveCIFDetailsFromCIFAppl($Recipient_ID);
           RecipientBUid = tcd100.CD100004;
         end;
       end;

       when(100) do;
         RetryCount = MaxRetryCount + 1;
         call LogTrace(@Force,'T#08',
                              'Recipient ' !!
                               xc400a1t.xc400_recipient_id!!
                              'does not exists in DBox TXC400A1');
         if xc400_recipient_type = '01'
         then call RetrieveCIFDetailsFromCIFAppl($Recipient_ID);
         RecipientBUid = tcd100.CD100004;
         Call InsertRecipientInfoInDBox($Recipient_ID);
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
 ; /*put skip lines removed (by topaz plugin) */
           call HandleException('E#21','TXC400A1',
                                      'Unable to Read Recipient Type:'!!
                                       xc400a1t.xc400_recipient_type !!
                                       'ID:'!!
                                       xc400a1t.xc400_recipient_id);
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
         call HandleException('E#21','TXC400A1',
                              'Unable to Read Recipient Type:'!!
                               xc400a1t.xc400_recipient_type !!
                              'ID:'!!
                               xc400a1t.xc400_recipient_id);
       end;
     End;
   end;

 End CheckRecipientIdExistInDBOX;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 CheckAndCreateDossierForRET: proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   /*---------------------------------------------------------------*/
   /* Check whether CIF number exist in the dossier table.          */
   /* if does not exists then make a new entry in dossier table.    */
   /* It also creates incident for Dossier Creation in TXR112A1.    */
   /*---------------------------------------------------------------*/
   If (^CheckIfDossierExists)
   then do;

     /*-------------------------------------------------------------*/
     /* Get CIF Base data from TCD100A1/overwrite doc-Abid          */
     /*-------------------------------------------------------------*/
     call RetrieveCIFDetailsFromCIFAppl(xc401a1t.xc401_recipient_id);

     /*-------------------------------------------------------------*/
     /* Get CIF Relations data from TCD115A1                        */
     /*-------------------------------------------------------------*/
     call RetrieveCIFRelationsFromCIFAppl;
     call createDossier;
     Call logAuditInfo('Busi');

   end;

 End CheckAndCreateDossierForRET;

 /*-------------------------------------------------------------------*/
 /* createDossier: This sub module insert dossier informations        */
 /*                in the dossier table.                          RP05*/
 /*-------------------------------------------------------------------*/
 createDossier: proc;
   call Logtrace(@Dflt,'Proc',procedurename());

   dcl LangCdePic  pic'9';

   xr100a1t.xr100_recip_cifnr  = xc401a1t.xc401_recipient_id;
   xr100a1t.xr100_cif_info     = tcd100.cd100080!!tcd100.cd100081;
   xr100a1t.xr100_buid         = tcd100.CD100004;

   if   xr100a1t.xr100_ret_ao = ''
   then xr100a1t.xr100_ret_ao = 'NULL';

   if   xr100a1t.xr100_ret_office = ''
   then xr100a1t.xr100_ret_office = 'NULL';

   if   tcd100.cd100161 = ''
   then xr100a1t.xr100_ret_category = 'NULL';
   else xr100a1t.xr100_ret_category = tcd100.cd100161;

   if YCDSGETK.cdSGet_Status   = 'I'
   then xr100a1t.xr100_cif_status = '3';
   else xr100a1t.xr100_cif_status = '2';

   xr100a1t.xr100_typcustrecip  = tcd100.cd100023;
   LangCdePic                   = tcd100.cd100301;
   xr100a1t.xr100_lang_cde      = LangCdePic;
   xr100a1t.xr100_rm_pid        = tcd100.cd100033;
   xr100a1t.xr100_client_offic  = substr(tcd100.cd100452,9,7);
   xr100a1t.xr100_dosr_status   = '2';
   xr100a1t.xr100_update_pid    = @PgmName;
   xr100a1t.XR100_CREATION_DATE = DB2_Current_Date;
   xr100a1t.xr100_LAST_ORDER    = '11.11.1111';
   xr100a1t.xr100_country       = tcd100.cd100060;
   xr100a1t.xr100_nxt_order     = '11.11.1111';
   xr100a1t.xr100_Doc_Count     = 0;
   xr100a1t.xr100_page_count    = 0;
   xr100a1t.xr100_is_retmm      = 'N' ;

   xr100a1t.xr100_is_retmm      = RetrieveKuhatFromCIFAppl
                                  (xc401a1t.xc401_recipient_id);
   call LogTrace(@dflt,'Info',' KUHAT for new CIF '!!
                                 xc401a1t.xc401_recipient_id
                                 !!' is '!! xr100a1t.xr100_is_retmm);

   Select(xr100a1t.xr100_is_retmm);
     when ('B','O','P') do;
       xr100a1t.xr100_online_start = DB2_Current_Date;
       xr100a1t.xr100_online_end   = '11.11.1111';
     end;
     when ('M','N','Q') do;
       xr100a1t.xr100_online_start = '11.11.1111';
       xr100a1t.xr100_online_end   = '11.11.1111';
     end;
     otherwise do;
     end;
   End;

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );
     EXEC SQL
       INSERT INTO TXR100A1
             (XR100_RECIP_CIFNR,
              XR100_CIF_INFO,
              XR100_BUID,
              XR100_RET_CATEGORY,
              XR100_RET_OFFICE,
              XR100_RET_AO,
              XR100_CLIENT_OFFIC,
              XR100_TYPCUSTRECIP,
              XR100_RM_PID,
              XR100_COUNTRY,
              XR100_LANG_CDE,
              XR100_DOSR_STATUS,
              XR100_CIF_STATUS,
              XR100_NOTE,
              XR100_UPDATE_PID,
              XR100_TS_UPDATE,
              XR100_IS_RETMM,
              XR100_CREATION_DATE,
              XR100_LAST_ORDER,
              XR100_NXT_ORDER,
              XR100_ONLINE_START,
              XR100_ONLINE_END,
              XR100_DOC_COUNT,
              XR100_PAGE_COUNT)
       VALUES
             (:xr100a1t.xr100_recip_cifnr,
              :xr100a1t.xr100_cif_info,
              :xr100a1t.xr100_buid,
              :xr100a1t.xr100_ret_category,
              :xr100a1t.xr100_ret_office,
              :xr100a1t.xr100_ret_ao,
              :xr100a1t.xr100_client_offic,
              :xr100a1t.xr100_typcustrecip,
              :xr100a1t.xr100_rm_pid,
              :xr100a1t.xr100_country,
              :xr100a1t.xr100_lang_cde,
              :xr100a1t.xr100_dosr_status,
              :xr100a1t.xr100_cif_status,
              :xr100a1t.xr100_note,
              :xr100a1t.xr100_update_pid,
              CURRENT TIMESTAMP,
              :xr100a1t.xr100_is_retmm,
              CURRENT DATE,
              :xr100a1t.xr100_last_order,
              :xr100a1t.xr100_nxt_order,
              :xr100a1t.xr100_online_start,
              :xr100a1t.xr100_online_end,
              :xr100a1t.xr100_Doc_Count,
              :xr100a1t.xr100_Page_Count);

     select(sqlca.sqlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
         call LogTrace(@Dflt,'Info',
                       'Dossier inserted successfully in TXR100A1 ' !!
                       'for CIFN:'!!xr100a1t.xr100_recip_cifnr);
       end;
       when(-803) do;
         RetryCount = MaxRetryCount + 1;
         call LogTrace(@Force,'Info',
                       'Dossier meanwhile Inserted in TXR100A1 ' !!
                       'for CIFN:'!!xr100a1t.xr100_recip_cifnr);
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
 ; /*put skip lines removed (by topaz plugin) */
           call HandleException('E#69','TXR100A1',
                                'Unable to Insert CIF details, CIFN:'!!
                                 xr100a1t.xr100_recip_cifnr);

         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
         call HandleException('E#69','TXR100A1',
                              'Unable to Insert CIF details, CIFN:'!!
                               xr100a1t.xr100_recip_cifnr);
       end;
     end;
   end;

 end createDossier;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 RetrieveKuhatFromCIFAppl: proc($CIFNo)returns(char(01));
    call Logtrace(@Dflt,'Proc',procedurename());

    dcl $CIFNo    char(12);

    cdgetk_in_SQLCA        = addr(sqlca);
    cdgetk_in_cif          = $CIFNo;
    cdGetK_in_TYP(1)       = '314590';
    cdGetK_in_TYP(2)       = '314591';
    cdGetK_in_TYP(3)       = '314768';
    cdGetK_in_TYP(4)       = '315635';
    cdgetk_in_puts         = $@PARM8;
    cdgetk_in_putpid       = 'A123456';
    cdgetk_in_proc         = FIND_KUHAT;

    CALL YCDGETK(PYCDGETK);

    Select(CDGETK_OUT_RC);

       /*-------------------------------------------------------------*/
       /* CIF found                                                   */
       /*-------------------------------------------------------------*/
       when(0,5) do;
          call LogTrace(@Dflt,'T#14',
               'KUHAT Info successfully retrieved by '!!
               'calling YCDGETK for the CIF '!!$CIFNo);
       end;
       /*-------------------------------------------------------------*/
       /* CIF not found                                               */
       /*-------------------------------------------------------------*/
       when(9) do;
          call LogTrace(@Dflt,'T#15',
               'KUHAT not found by '!!
               'calling YCDGETK for the CIF '!!$CIFNo);

       end;

       /*-------------------------------------------------------------*/
       /* All other error cases                                       */
       /*-------------------------------------------------------------*/
       other do;
         BypassDocProcess = @true;
         XCPARS.OutParam.ReturnText ='Module YCDGETK Failed, RC:' !!
         CDGETK_OUT_RC !! '  CIF : '  !!$CIFNo;
         Call ProcessingError('TechnicalError');
      /*    call HandleException('E#77','########',
               'Module YCDGETK Failed, RC:' !!
               CDGETK_OUT_RC !! '  CIF : '  !!$CIFNo)-*/
       end;
    End;

    return(xr100a1t.xr100_IS_RETMM);
 End RetrieveKuhatFromCIFAppl;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 FIND_KUHAT: proc(PCDGETKV);
   call Logtrace(@Dflt,'Proc',procedurename());

   dcl $CIFNo    char(12);
  /* BEGIN %INCLUDE YCDGETKV */
 /*********************************************************************/
 /*                                        * Membername YCDGETKV *    */
 /* Deklarationen f|r                      ***********************    */
 /* Verarbeitungsprocedur von              * KASK 21             *    */
 /* YCDGETK                                ***********************    */
 /*                                        * LM 09.05.2003 / GS  *    */
 /*********************************************************************/
 dcl PCDGETKV        ptr;            /*  Ptr zu Kommunikationsstruktur*/
                                     /*   YCDGETK<->Verarbeitungsproc */
 dcl 1 CDGETKV   based(PCDGETKV),
     2 CDGETKV_PWork   ptr,          /*  Ptr. f|r Transfer von Daten  */
                                     /*  zwischen aufrufendem Programm*/
                                     /*  und Verarbeitungsprozedur    */
     2 CDGETKV_VorzAb  bin fixed(31),/*  Vorzeitiger Abbruch      1=ja*/
     2 CDGETKV_PTCD181 ptr,          /*  Ptr auf gefundene TCD181     */
     2 CDGETKV_PTCD182 ptr,          /*  Ptr auf gefundene TCD182     */
     2 CDGETKV_ANZ_182 bin fixed(31),/*  Anzahl TCD182                */
     2 CDGETKV_Reserve char(36);     /*  Reserve                      */

 dcl 1 TCD181    based(CDGETKV_PTCD181),
  /* BEGIN %INCLUDE TCD181 */
 /*********************************************************************/
 /* Letzte Source-Dnderung:   30. Sep. 2004   10:08   A430378         */
 /*********************************************************************/
 /* PL1-Struktur                               Autor : M. Karas       */
 /* KUHAT eines Parnter (CIF / 3WB)                    KASK 2         */
 /*                                                                   */
 /* CIF-Tabelle TCD181A1                       Ldnge : 363            */
 /*********************************************************************/
   2 CD181001     CHAR        (20),  /* UWI PARTNER                   */
   2 CD181002     CHAR        (04),  /* UWI-TYP (CIF,3WB)             */
   2 CD181003     CHAR        (20),  /* UWI (KUHAT)                   */
   2 CD181004     CHAR        (06),  /* HAT-TYP(6)                    */
   2 CD181005     CHAR        (26),  /* Datum/Zeit g|ltig-ab          */
   2 CD181006     CHAR        (26),  /* Datum/Zeit g|ltig-bis         */
   2 CD181007     CHAR        (01),  /* Status                        */
   2 CD181008     CHAR        (26),  /* Datum/Zeit Ersetzung          */
   2 CD181009     CHAR        (26),  /* Datum/Zeit Einsetzung         */
   2 CD181010     CHAR        (08),  /* PID-Mutation                  */
   2 CD181011     CHAR        (30),  /* Geschdfts-Nummer              */
   2 CD181012     CHAR        (04),  /* Geschdfts-Nummer-Typ          */
   2 CD181013     CHAR        (04),  /* Geschdfts-Nummer IBBB         */
   2 CD181014     DEC FIXED (15,3),  /* Betrag                        */
   2 CD181015     CHAR        (04),  /* Wdhrung                       */
   2 CD181016     CHAR        (10),  /* Datum                         */
   2 CD181017     CHAR       (120),  /* Text                          */
   2 CD181018     CHAR        (20),  /* UWI-Extension TCD182          */
   2 CD181019     CHAR        (01)   /* Visum / Approval              */
  /*   END %INCLUDE TCD181 */
 ;

 dcl 1 TCD182_VAR(10) based(CDGETKV_PTCD182),
  /* BEGIN %INCLUDE TCD182 */
 /*-------------------------------------------------------------------*/
 /*       Letzte Source-Dnderung:   24. Aug. 2004   07:28   A430378   */
 /*-------------------------------------------------------------------*/
 /* PL1-Deklaration f|r Table TCD182A1                                */
 /* KUHAT-Zusatz                                                      */
 /*                                                                   */
 /* PL1-Ldnge: 219     DB2-Ldnge: 86                                  */
 /*                                                                   */
 /* Mike Karas, 044 334 66 68                                         */
 /*-------------------------------------------------------------------*/
   2 CD182001     CHAR (20),         /* KUHTA-Zusatz-UWI              */
   2 CD182002     CHAR (4),          /* KUHAT-Zusatz-Typ              */
   2 CD182011     CHAR (12),         /* KUHAT-Zusatz-Wert             */
   2 CD182012     CHAR (50)          /* KUHAT-Zusatz-Text             */
 /*-------------------------------------------------------------------*/

  /*   END %INCLUDE TCD182 */
 ;

  /*   END %INCLUDE YCDGETKV */

   call logTrace(@Dflt,'T#16','CIF:'!!$CIFNo!!
                        'TCD181.CD181004:'!!TCD181.CD181004);
   select(TCD181.CD181004);               /* check Kuhat combinations */
      when ('314591') do;                 /* Kuhat = 314591 is RETMM */
        if   xr100a1t.xr100_IS_RETMM = 'O'
        then xr100a1t.xr100_IS_RETMM = 'B';
        else xr100a1t.xr100_IS_RETMM = 'M';
      end;
      when ('314768') do;                  /* Kuhat = 314768 is online*/
        Select(xr100a1t.xr100_IS_RETMM);
          when('M')
            xr100a1t.xr100_IS_RETMM = 'B';
          when('Q')
            xr100a1t.xr100_IS_RETMM = 'P';
          otherwise
            xr100a1t.xr100_IS_RETMM = 'O';
        End;
      end;
      when ('315635') do;             /*Kuhat = 315635 is RET27 Normal*/
        if   xr100a1t.xr100_IS_RETMM = 'O'
        then xr100a1t.xr100_IS_RETMM = 'P';
        else xr100a1t.xr100_IS_RETMM = 'Q';
      end;
      other;
   end;

 End FIND_KUHAT;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
  CheckIfDossierExists: Proc returns(bit(01) aligned);
   call Logtrace(@Dflt,'Proc',procedurename());

   xr100a1t.xr100_recip_cifnr = xc401a1t.xc401_recipient_id ;

   /*-----------------------------------------------------------------*/
   /* Checks whether the Dossier for the CIfNo exists or Not          */
   /*-----------------------------------------------------------------*/
   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );
     EXEC SQL
       SELECT xr100_buid,
              xr100_creation_date,
              xr100_ret_office,
              xr100_cif_info,
              xr100_typcustrecip,
              xr100_ret_category,
              xr100_is_retmm,
              xr100_dosr_status,
              xr100_client_offic,
              xr100_ret_ao
       INTO  :xr100a1t.xr100_buid,
             :xr100a1t.xr100_creation_date,
             :xr100a1t.xr100_ret_office,
             :xr100a1t.xr100_cif_info,
             :xr100a1t.xr100_typcustrecip,
             :xr100a1t.xr100_ret_category,
             :xr100a1t.xr100_is_retmm,
             :xr100a1t.xr100_dosr_status,
             :xr100a1t.xr100_client_offic,
             :xr100a1t.xr100_ret_ao
       FROM  TXR100A1
       WHERE XR100_RECIP_CIFNR = :xr100a1t.xr100_recip_cifnr;

       select(sqlca.sqlcode);
         when(0) do;
           RetryCount = MaxRetryCount + 1;
           call LogTrace(@Dflt,'T#09',
                         'Dossier for the CIF '!!
                         xr100a1t.xr100_recip_cifnr!!
                         ' exists in table TXR100A1');
           dossierExist = @True;
         end;
         when(100) do;
           RetryCount = MaxRetryCount + 1;
           call LogTrace(@Force,'T#10',
                         'Dossier for the CIF '!!
                         xr100a1t.xr100_recip_cifnr!!
                         ' DOES NOT exists in table TXR100A1');
           dossierExist = @False;
         end;
         when(-911,-913) do;
           if RetryCount = 1
           then do;
 ; /*put skip lines removed (by topaz plugin) */
             call HandleException('E#71','TXR100A1',
                                'Unable to Read CIF Details for CIFN:'!!
                                 xr100a1t.xr100_recip_cifnr);
           end;
           Delay(DelayTime);
           RetryCount = RetryCount + 1;
         end;
         otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
           call HandleException('E#71','TXR100A1',
                                'Unable to Read CIF Details for CIFN:'!!
                                 xr100a1t.xr100_recip_cifnr);
         end;
       End;
     end;
     return (dossierExist);

 End CheckIfDossierExists;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 RetrieveCIFDetailsFromCIFAppl: proc($CIF_Recipient_ID);
   call Logtrace(@Dflt,'Proc',ProcedureName()!!
                                          '('!!$CIF_Recipient_ID!!')');
   dcl  $CIF_Recipient_ID     Char(20);

   RecipCIFExistsInCIFAppl = @False;

   YCDSGETK.cdSGet_Ppool = addr(tcd100_area);
   YCDSGETK.cdSGet_SQLCA = addr(SQLCA);
   YCDSGETK.cdsget_cif   = $CIF_Recipient_ID;
   YCDSGETK.CDSGET_TYP   = 'I';
   YCDSGETK.cdSGet_Puts  = $@PARM8;
   YCDSGETK.cdSGet_PutPID= 'A123456';

   call YCDSGET(PYCDSGET);

   select(YCDSGETK.cdsget_rc);

     /*---------------------------------------------------------------*/
     /* CIF found                                                     */
     /*---------------------------------------------------------------*/
     when(0) do;
       call LogTrace(@Dflt,'T#09',
                  'CIF Info successfully retrieved by '!!
                  'calling YCDSGET for the CIF '!!YCDSGETK.cdsget_cif);
     end;
     /*---------------------------------------------------------------*/
     /* CIF not found                                                 */
     /*---------------------------------------------------------------*/
     when(11) do;
         call LogTrace(@Force,'T#10','Unable to Retrieve details for '!!
                                     'CIF:'!!YCDSGETK.cdsget_cif !!
                                     ',RC:'!!YCDSGETK.cdsget_rc);
          BypassDocProcess = @True;
          XCPARS.OutParam.ReturnText = 'Unable to Retrieve CIF Details'
                                       !! ' from  TCD100A1';
          Call ProcessingError('TechnicalError');
     end;
     other do;
       BypassDocProcess = @True;
       XCPARS.OutParam.ReturnText = 'Module YCDGET Failed, RC:'
                                  !!' YCDSGETK.cdsget_rc';
       Call ProcessingError('TechnicalError');
     end;
   end;
 End RetrieveCIFDetailsFromCIFAppl;

 /*-------------------------------------------------------------------*/
 /*RetrieveCIFRelationsFromCIFAppl                                    */
 /*-------------------------------------------------------------------*/
 RetrieveCIFRelationsFromCIFAppl: proc;
   call Logtrace(@Dflt,'Proc',procedurename());

   CD115_PARTNER_T_ID = '0003';
   cdOGet_Cif         = xc401a1t.xc401_recipient_id;
   cdOGet_SQLCA       = ADDR(SQLCA);
   cdOGet_PTCD115     = ADDR(TCD115O);
   cdOGet_FuID        = '';
   cdOGet_Status      = 'I';

   call YCDOGET(PYCDOGET);

   select(cdOGet_rc);
     when(0) do;
       xr100a1t.xr100_ret_office =
                   substr(cd115_betrfunk_tab(33).cd115_fi_intern,9,8);
       xr100a1t.xr100_ret_ao     =
                   substr(cd115_betrfunk_tab(26).cd115_fi_intern,9,8);
     end;
     when(11) do;
       BypassDocProcess = @True;
       XCPARS.OutParam.ReturnText = 'Unable to Retrieve CIF Relations';
       Call ProcessingError('TechnicalError');
       xr100a1t.xr100_ret_office = 'NULL';
       xr100a1t.xr100_ret_ao     = 'NULL';
     end;
     when(21) do;
       BypassDocProcess = @True;
       XCPARS.OutParam.ReturnText = 'Null SQLCA Pointer passed to' !!
                                    'YCDOGET';
       Call ProcessingError('TechnicalError');
     end;
     otherwise do;
       BypassDocProcess = @True;
       XCPARS.OutParam.ReturnText = 'Severe error while calling ' !!
                                    'YCDOGET.RC:'!! cdOGet_rc ;
       Call ProcessingError('TechnicalError');
     end;
   end;                                                 /* end select */

 End RetrieveCIFRelationsFromCIFAppl;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 InsertRecipientInfoInDBox : Proc($CIF_RECID);
   Call LogTrace(@Dflt,'Proc',procedurename()!!'('!!$CIF_RECID!!')');
   dcl $CIF_RECID         Char(20);

   xc400a1t = '';
   xc400a1t.xc400_recipient_id     = $CIF_RECID;
   xc400a1t.xc400_recipient_type   = XC401A1T.XC401_RECIPIENT_TYPE;
   xc400a1t.xc400_recipient_status = 'A';
   xc400a1t.xc400_update_id        = @PgmName;

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );
     EXEC SQL
       INSERT INTO TXC400A1
             (XC400_RECIPIENT_ID,
              XC400_RECIPIENT_TYPE,
              XC400_CREATION_DATE,
              XC400_RECIPIENT_STATUS,
              XC400_UPDATE_ID,
              XC400_UPDATE_TS)
       VALUES
             (:xc400a1t.xc400_recipient_id,
              :xc400a1t.xc400_recipient_type,
               CURRENT DATE,
              :xc400a1t.xc400_recipient_status,
              :xc400a1t.xc400_update_id,
               CURRENT TIMESTAMP);

     Select(sqlca.sqlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
         call LogTrace(@Dflt,'Info','Recipient ' !!
                                     xc400a1t.xc400_recipient_id !!
                                    ' Inserted Successfully');
         if XC401A1T.XC401_RECIPIENT_TYPE  = '01'
         then do;
           Call InsertRecipientChannelInfoInDBox;
           Call InsertLogDetails('CIF',xc400a1t.xc400_recipient_id);
         end;
       end;
       when(-803) do;
         RetryCount = MaxRetryCount + 1;
         call LogTrace(@Force,'Info','Recipient ' !!
                                      xc400a1t.xc400_recipient_id !!
                                     ' Already Exists in DBox');
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
 ; /*put skip lines removed (by topaz plugin) */
           call HandleException('E#24','TXC400A1',
                                'Unable to Insert Recipient:'!!
                                 xc400a1t.xc400_recipient_id);
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
         call HandleException('E#24','TXC400A1',
                              'Unable to Insert Recipient:'!!
                               xc400a1t.xc400_recipient_id);
       end;
     End;
   end;

 End InsertRecipientInfoInDBox;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 InsertRecipientChannelInfoInDBox : Proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   xc410a1t = '';
   xc410a1t.XC410_RECIPIENT_TYPE   = xc400a1t.xc400_recipient_type;
   xc410a1t.XC410_RECIPIENT_ID     = xc400a1t.xc400_recipient_id;
   xc410a1t.XC410_CHANNEL          = XC401A1T.XC401_CHANNEL;
   xc410a1t.XC410_DOCBOX_NAME      = tcd100.cd100080!!tcd100.cd100081;
   xc410a1t.XC410_UPDATE_ID        = @PgmName;

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );
     EXEC SQL
       INSERT INTO TXC410A1
             (XC410_RECIPIENT_TYPE,
              XC410_RECIPIENT_ID,
              XC410_CHANNEL,
              XC410_DOCBOX_NAME,
              XC410_UPDATE_ID,
              XC410_UPDATE_TS)
       VALUES
             (:xc410a1t.XC410_RECIPIENT_TYPE,
              :xc410a1t.XC410_RECIPIENT_ID,
              :xc410a1t.XC410_CHANNEL,
              :xc410a1t.XC410_DOCBOX_NAME,
              :xc410a1t.XC410_UPDATE_ID,
               CURRENT TIMESTAMP);

     Select(sqlca.sqlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
         call LogTrace(@Dflt,'Info','Recipient ' !!
                                     xc400a1t.xc400_recipient_id !!
                                    ' Channel Info Inserted' !!
                                    ' Successfully for:'     !!
                                     xc410a1t.XC410_CHANNEL);
       end;
       when(-803) do;
         RetryCount = MaxRetryCount + 1;
         Call ProcessingError('Insert error');
         call LogTrace(@Force,'Info','Recipient ' !!
                                      xc400a1t.xc400_recipient_id !!
                                     ' Channel Info Already Exists'  !!
                                     ' in DBox for:'     !!
                                      xc410a1t.XC410_CHANNEL);
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
 ; /*put skip lines removed (by topaz plugin) */
           call HandleException('E#25','TXC410A1',
                                'Unable to Insert Recipient:'!!
                                 xc400a1t.xc400_recipient_id !!
                                ' Channel Info for:' !!
                                 xc410a1t.XC410_CHANNEL);
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
         call HandleException('E#25','TXC410A1',
                              'Unable to Insert Recipient:'!!
                               xc400a1t.xc400_recipient_id !!
                              ' Channel Info for:' !!
                               xc410a1t.XC410_CHANNEL);
       end;
     End;
   end;

 End InsertRecipientChannelInfoInDBox;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 InsertDBoxDocContentControlAtEndofContent: proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   DBoxPartUsedSpace = DBoxPartUsedSpace +
                       XCWDOC.ControlParam.DocContentLen;

   XCWDOC.HeaderParam.PgmName    = @PgmName;
   XCWDOC.HeaderParam.TraceFlag  = @Trace;

   XCWDOC.InParam.OperationMode  = 'E';
   XCWDOC.InParam.TableName   = XCEPHD.Outparam.ModeRetrieve.TableName;
   XCWDOC.InParam.PartNo      = XCEPHD.Outparam.ModeRetrieve.PartNumber;

   XCWDOC.InParam.DocUUID     = XC401A1T.XC401_DOC_UUID;
   XCWDOC.InParam.DocFormat   = CurrentDocSourceFormat;

   Call YXCWDOC(addr(XCWDOC));

   Select(XCWDOC.OutParam.reasoncode);
     when(0) do;
       Call LogTrace(@Dflt,'T#18','Doc Content control info inserted'
                                !!' successfully');
     end;
     when(4) do;
       BypassDocProcess = @true;
       XCPARS.OutParam.ReturnText = 'Duplicate Document';
       Call ProcessingError('DuplicateDocument');
     end;
     otherwise do;
       Call HandleException('E#61','########',
                            'Unable to Insert Doc Content Control '!!
                            'Info in DBox, YXCWDOC RC:'!!
                             XCWDOC.OutParam.reasoncode);
     end;
   End;

 End InsertDBoxDocContentControlAtEndofContent;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 InsertIndexRecordInDBOX: Proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   dcl wa_Cnt           bin fixed(31) init(0);

   XC411A1T  = '';
   XC411A1T.XC411_DOC_UUID   = XC401A1T.XC401_DOC_UUID;

   do wa_Cnt = 1 to DBoxDetails.MaxIndexRecTagCnt;

     if INDX_FIELD(wa_cnt) ^= ''
     then do;
       XC411A1T.XC411_TAG      = '';
       XC411A1T.XC411_TAG_DATA = '';
       XC411A1T.XC411_TAG      = trim(INDX_TAG(wa_cnt),'','=');
       XC411A1T.XC411_TAG_DATA = INDX_FIELD(wa_cnt);

       RetryCount = 0;
       do while (RetryCount < MaxRetryCount );
         EXEC SQL
           INSERT INTO TXC411A1
                  (XC411_DOC_UUID,
                   XC411_TAG,
                   XC411_TAG_DATA)
           VALUES (:XC411A1T.XC411_DOC_UUID,
                   :XC411A1T.XC411_TAG,
                   :XC411A1T.XC411_TAG_DATA);

           Select(sqlca.sqlcode);
             when(0) do;
               RetryCount = MaxRetryCount + 1;
             end;
             when(-911,-913) do;
               if RetryCount = 1
               then do;
 ; /*put skip lines removed (by topaz plugin) */
                 Call HandleException('E#35','TXC411A1','Unable to'
                  !!'insert INDEX Data for '!!XC411A1T.XC411_DOC_UUID);
               end;
               Delay(DelayTime);
               RetryCount = RetryCount + 1;
             end;
             otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
               Call HandleException('E#35','TXC411A1','Unable to Insert'
                    !!'INDEX Data for '!!XC411A1T.XC411_DOC_UUID);
             end;
           End;
       end;      /*end of do while RetryCount*/
     end;        /*end of If INDX_FIELD(wa_cnt)*/
   end;          /*end of do wa_Cnt*/

 End InsertIndexRecordInDBOX;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 WriteDocMetadataInDBox: Proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   /*XC401A1T= DboxDetails.Xc401A1T; */
   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );
     EXEC SQL
     INSERT INTO TXC401A1
           (XC401_CHANNEL,
            XC401_DOC_UUID,
            XC401_EVENT_UUID,
            XC401_PART_NO,
            XC401_RECIPIENT_TYPE,
            XC401_RECIPIENT_ID,
            XC401_OWNER_TYPE,
            XC401_OWNER_ID,
            XC401_RELATION_TYPE,
            XC401_RELATION_NO,
            XC401_DOC_SRC_FORMAT,
            XC401_DOC_TYPE,
            XC401_DOC_GROUP,
            XC401_DOC_CATEGORY,
            XC401_RET_CATEGORY,
            XC401_APPL_ID,
            XC401_DOC_LANG_CODE_CS,
            XC401_DOC_TITLE,
            XC401_DOC_PAGES,
            XC401_IS_ORIGINAL,
            XC401_IS_SIGNED,
            XC401_IS_IMPORTANT,
            XC401_ACCOUNT_TYPE,
            XC401_DEPOSIT_TYPE,
            XC401_SETTLEMENT_NUMBER,
            XC401_IBAN,
            XC401_IBAN_COUNTER,
            XC401_ACCOUNT_COUNTER,
            XC401_CASH_FLOW,
            XC401_CURRENCY_CODE_ISO,
            XC401_AMOUNT,
            XC401_VALUE_DATE,
            XC401_PERIOD_FROM,
            XC401_PERIOD_TO,
            XC401_BUS_EVENT_DATE,
            XC401_OUT_CREATION_DATE,
            XC401_CUST_ISSUE_DATE,
            XC401_DELETION_DATE,
            XC401_PVS_HEADER,
            XC401_DOC_FILENAME,
            XC401_INPUT_INFO,
            XC401_DOC_WEB_URL,
            XC401_DOC_STATUS,
            XC401_UPDATE_ID,
            XC401_UPDATE_TS)
       VALUES
            (:xc401a1t.xc401_channel,
             :xc401a1t.xc401_doc_uuid,
             :xc401a1t.xc401_event_uuid,
             :xc401a1t.xc401_part_no,
             :xc401a1t.xc401_recipient_type,
             :xc401a1t.xc401_recipient_id,
             :xc401a1t.xc401_owner_type,
             :xc401a1t.xc401_owner_id,
             :xc401a1t.xc401_relation_type,
             :xc401a1t.xc401_relation_no,
             :xc401a1t.xc401_doc_src_format,
             :xc401a1t.xc401_doc_type,
             :xc401a1t.xc401_doc_group,
             :xc401a1t.xc401_doc_category,
             :xc401a1t.xc401_ret_category,
             :xc401a1t.xc401_appl_id,
             :xc401a1t.xc401_doc_lang_code_cs,
             :xc401a1t.xc401_doc_title,
             :xc401a1t.xc401_doc_pages,
             :xc401a1t.xc401_is_original,
             :xc401a1t.xc401_is_signed,
             :xc401a1t.xc401_is_important,
             :xc401a1t.xc401_account_type,
             :xc401a1t.xc401_deposit_type,
             :xc401a1t.xc401_settlement_number,
             :xc401a1t.xc401_iban,
             :xc401a1t.xc401_iban_counter,
             :xc401a1t.xc401_account_counter,
             :xc401a1t.xc401_cash_flow,
             :xc401a1t.xc401_currency_code_iso,
             :xc401a1t.xc401_amount,
             :xc401a1t.xc401_value_date,
             :xc401a1t.xc401_period_from,
             :xc401a1t.xc401_period_to,
             :xc401a1t.xc401_bus_event_date,
             :xc401a1t.xc401_out_creation_date,
             :xc401a1t.xc401_cust_issue_date,
             :xc401a1t.xc401_deletion_date,
             :xc401a1t.xc401_pvs_header,
             :xc401a1t.xc401_doc_filename,
             :xc401a1t.xc401_input_info,
             :xc401a1t.xc401_doc_web_url,
             :xc401a1t.xc401_doc_status,
             :xc401a1t.xc401_update_id,
             :xc401a1t.xc401_update_ts);

     Select(sqlca.sqlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
         call LogTrace(@Dflt,'T#12',
                             'Doc Metadata Inserted Successfully');

         if (IsImportCategoryRet)
         then do;
           Call InsertLogDetails('DOC',xc401a1t.xc401_recipient_id);

           if  ((xr100a1t.xr100_is_retmm = 'O')
               !(xr100a1t.xr100_is_retmm = 'B')
               !(xr100a1t.xr100_is_retmm = 'P'))
           then do;
           end;
           else do;
             if ^DocumentTypePDFCopyB                           /*RS01*/
             then do;
               call SendNotificationToMQ(xc401a1t.xc401_appl_id);
               call AddDeepLinkToDBox;                          /*ME01*/
             end;
           end;
         end;
         else do;
           if (xc401a1t.xc401_recipient_type
                                         = '01')
           then Call InsertLogDetails('DOC',
                         xc401a1t.xc401_recipient_id);

           if (xc401a1t.xc401_doc_status = '30'
            !  xc401a1t.xc401_doc_status = '40')
            & ^DocumentTypePDFCopyB                             /*RS01*/
           then do;
             call SendNotificationToMQ(xc401a1t.xc401_appl_id);
             call AddDeepLinkToDBox;                            /*ME01*/
           end;

         end;
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
           call HandleException('E#51','TXC401A1',
                                'Unable to Store Doc Metadata in DBox');
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
         call HandleException('E#51','TXC401A1',
                              'Unable to Store Doc Metadata in DBox');
       end;
     End;
   end;

 End WriteDocMetadataInDBox;

 /*===================================================================*/
 /*                                                              ME01 */
 /*===================================================================*/
 AddDeepLinkToDBox: Proc;

   Call LogTrace(@Dflt,'Proc',ProcedureName());


   EXEC SQL
        UPDATE TXC401A1
           SET XC401_DOC_WEB_URL = :XMLDocDeepLink
           WHERE XC401_DOC_UUID = :xc401a1t.xc401_doc_uuid
             AND XC401_PART_NO  = :xc401a1t.xc401_part_no;

     if sqlcode ^= 0
       then call HandleException('E#52','TXC401A1',
                                 'Unable to update DeepLink: '!!
                                  XMLDocDeepLink);

   end AddDeepLinkToDBox;
 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 WriteStandaloneMetadataInDBox: Proc;
   Call LogTrace(@Dflt,'Proc',ProcedureName());

  DboxStandalone = '';
   Select (CurrEnclCount);
     when (1) do;
       DboxStandalone = DboxStandalone1 ;
     end;
     when (2) do;
       DboxStandalone = DboxStandalone2 ;
     end;
     when (3) do;
       DboxStandalone = DboxStandalone3 ;
     end;
     when (4) do;
       DboxStandalone = DboxStandalone4 ;
     end;
     when (5) do;
       DboxStandalone = DboxStandalone5 ;
     end;
     when (6) do;
       DboxStandalone = DboxStandalone6 ;
     end;
     otherwise;
   End;


   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );
     EXEC SQL
     INSERT INTO TXC401A1
           (XC401_CHANNEL,
            XC401_DOC_UUID,
            XC401_EVENT_UUID,
            XC401_PART_NO,
            XC401_RECIPIENT_TYPE,
            XC401_RECIPIENT_ID,
            XC401_OWNER_TYPE,
            XC401_OWNER_ID,
            XC401_RELATION_TYPE,
            XC401_RELATION_NO,
            XC401_DOC_SRC_FORMAT,
            XC401_DOC_TYPE,
            XC401_DOC_GROUP,
            XC401_DOC_CATEGORY,
            XC401_RET_CATEGORY,
            XC401_APPL_ID,
            XC401_DOC_LANG_CODE_CS,
            XC401_DOC_TITLE,
            XC401_DOC_PAGES,
            XC401_IS_ORIGINAL,
            XC401_IS_SIGNED,
            XC401_IS_IMPORTANT,
            XC401_ACCOUNT_TYPE,
            XC401_DEPOSIT_TYPE,
            XC401_SETTLEMENT_NUMBER,
            XC401_IBAN,
            XC401_IBAN_COUNTER,
            XC401_ACCOUNT_COUNTER,
            XC401_CASH_FLOW,
            XC401_CURRENCY_CODE_ISO,
            XC401_AMOUNT,
            XC401_VALUE_DATE,
            XC401_PERIOD_FROM,
            XC401_PERIOD_TO,
            XC401_BUS_EVENT_DATE,
            XC401_OUT_CREATION_DATE,
            XC401_CUST_ISSUE_DATE,
            XC401_DELETION_DATE,
            XC401_PVS_HEADER,
            XC401_DOC_FILENAME,
            XC401_INPUT_INFO,
            XC401_DOC_WEB_URL,
            XC401_DOC_STATUS,
            XC401_UPDATE_ID,
            XC401_UPDATE_TS)
       VALUES
            (:DboxStandalone.xc401_channel,
            :DboxStandalone.xc401_doc_uuid,
            :DboxStandalone.xc401_event_uuid,
            :DboxStandalone.xc401_part_no,
            :DboxStandalone.xc401_recipient_type,
            :DboxStandalone.xc401_recipient_id,
            :DboxStandalone.xc401_owner_type,
            :DboxStandalone.xc401_owner_id,
            :DboxStandalone.xc401_relation_type,
            :DboxStandalone.xc401_relation_no,
            :DboxStandalone.xc401_doc_src_format,
            :DboxStandalone.xc401_doc_type,
            :DboxStandalone.xc401_doc_group,
            :DboxStandalone.xc401_doc_category,
            :DboxStandalone.xc401_ret_category,
            :DboxStandalone.xc401_appl_id,
            :DboxStandalone.xc401_doc_lang_code_cs,
            :DboxStandalone.xc401_doc_title,
            :DboxStandalone.xc401_doc_pages,
            :DboxStandalone.xc401_is_original,
            :DboxStandalone.xc401_is_signed,
            :DboxStandalone.xc401_is_important,
            :DboxStandalone.xc401_account_type,
            :DboxStandalone.xc401_deposit_type,
            :DboxStandalone.xc401_settlement_number,
            :DboxStandalone.xc401_iban,
            :DboxStandalone.xc401_iban_counter,
            :DboxStandalone.xc401_account_counter,
            :DboxStandalone.xc401_cash_flow,
            :DboxStandalone.xc401_currency_code_iso,
            :DboxStandalone.xc401_amount,
            :DboxStandalone.xc401_value_date,
            :DboxStandalone.xc401_period_from,
            :DboxStandalone.xc401_period_to,
            :DboxStandalone.xc401_bus_event_date,
            :DboxStandalone.xc401_out_creation_date,
            :DboxStandalone.xc401_cust_issue_date,
            :DboxStandalone.xc401_deletion_date,
            :DboxStandalone.xc401_pvs_header,
            :DboxStandalone.xc401_doc_filename,
            :DboxStandalone.xc401_input_info,
            :DboxStandalone.xc401_doc_web_url,
            :DboxStandalone.xc401_doc_status,
            :DboxStandalone.xc401_update_id,
            :DboxStandalone.xc401_update_ts);
     Select(sqlca.sqlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
         call LogTrace(@Dflt,'T#12',
                             'Doc Metadata Inserted Successfully');

         if (DboxStandalone.xc401_recipient_type
                                             = '01')        then Call
 InsertLogDetails('DOC',DboxStandalone.
                                            xc401_recipient_id);
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
           call HandleException('E#51','TXC401A1',
                                'Unable to Store Doc Metadata in DBox');
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
         call HandleException('E#51','TXC401A1',
                              'Unable to Store Doc Metadata in DBox');
       end;
     End;
   end;  /*end of Do retryCount*/

 End WriteStandaloneMetadataInDBox;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 InsertLogDetails: Proc($Object,$CIF_ID);
   Call LogTrace(@Dflt,'Proc',ProcedureName()!!'('!!$Object
                                             !!','!!$CIF_ID!!')');

   dcl $Object                 char(03);
   dcl $CIF_ID                 char(20);

   IJobName     = ID0000.JES3_JobName.Value;
   IJobNummer   = ID0000.JES3_JobNummer.Value ;
   IJobStep     = '';
   Ipriority    = WA_REQ_PRIORITY;
   IChannel     = XC401A1T.XC401_CHANNEL;
   IJobSMFID    = '';
   IorderID     = '';
   SDataSetName = 'ECM/DOCD/EOSR/IMMEDIATE';
   SJobname     = ID0000.JES3_JobName.Value;
   SJobNummer   = ID0000.JES3_JobNummer.Value   ;
   STimeStamp   = '';
   StructName   = 'XC7010HL';

   Select($Object);
     when('CIF') Call InsertCIFLogDetails($CIF_ID);
     when('DOC') Call InsertDocLogDetails($CIF_ID);
     otherwise do;
       BypassDocProcess = @True;
       XCPARS.OutParam.ReturnText = 'Invalid Log Object :'!!$Object;
       Call ProcessingError('Invalid Log Object');
     end;
   /*  otherwise Call HandleException('E#62','####### ',
                                    'Invalid Log Object :'!!$Object);*/
   End;

 End InsertLogDetails;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 InsertCIFLogDetails: Proc($CIF_ID_Log);
   Call LogTrace(@Dflt,'Proc',ProcedureName()!!'('!!$CIF_ID_Log!!')');
   dcl $CIF_ID_Log             char(20);

   xc103a1t = '';
   xc103a1t.xc103_recip_cifnr =  $CIF_ID_Log;
   xC103a1t.xc103_pid         = @PgmName;
   xc103a1t.xc103_actionid    = 'H01';
   xc103a1t.xc103_act_content = string(ID6060HL);

   xc103a1t.xc103_recip_buid = RecipientBUid;

   xc103a1t.xc103_runstart_ts = '0001-01-01-00.00.00.000000';


   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );
     EXEC SQL
        INSERT INTO TXC103A1
                  ( XC103_RECIP_CIFNR,
                    XC103_ACTION_TS,
                    XC103_PID,
                    XC103_ACTIONID,
                    XC103_RECIP_BUID,
                    XC103_RUNSTART_TS,
                    XC103_ACT_CONTENT )
           VALUES (:xc103a1t.xc103_recip_cifnr ,
                    CURRENT_TIMESTAMP,
                   :xC103a1t.xc103_pid,
                   :xc103a1t.xc103_actionid,
                   :xc103a1t.xc103_recip_buid,
                   :xc103a1t.xc103_runstart_ts,
                   :xc103a1t.xc103_act_content);

     Select(sqlca.sqlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
           Call HandleException('E#63','TXC103A1',
                               'Unable to Insert LOG for '!!
                                xc103a1t.xc103_recip_cifnr);
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
         Call HandleException('E#63','TXC103A1',
                             'Unable to Insert LOG for '!!
                              xc103a1t.xc103_recip_cifnr);
       end;
     End;
   end; /*end of do while retrycount*/
 End InsertCIFLogDetails;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 InsertDocLogDetails: Proc($CIF_ID_Doc);
   Call LogTrace(@Dflt,'Proc',ProcedureName()!!'('!!$CIF_ID_Doc!!')');
   dcl $CIF_ID_Doc             char(20);

   xc105a1t = '';
   xc105a1t.xc105_recip_cifnr =  $CIF_ID_Doc;
   xc105a1t.xc105_uuid_doc_c  =  xc401a1t.xc401_doc_uuid;
   xC105a1t.xc105_pid         = @PgmName;
   xc105a1t.xc105_act_content =  string(ID6060HL);

   xc105a1t.xc105_recip_buid = RecipientBUid;

   xc105a1t.xc105_runstart_ts = '0001-01-01-00.00.00.000000';


   Select(CurrentDocSourceFormat);
      when('LNE','AFP') do;
        xc105a1t.xc105_actionid    = 'H01';
      end;
      when('PDF','XLS') do;
        xc105a1t.xc105_actionid    = 'H02';
      end;
      otherwise
         Call LogTrace(@Force,'E#64',
                           'Invalid Source Format:'!!
                                    CurrentDocSourceFormat);
   End;

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );
     EXEC SQL INSERT  INTO TXC105A1
                     ( XC105_RECIP_CIFNR,
                       XC105_UUID_DOC_C,
                       XC105_ACTION_TS,
                       XC105_PID,
                       XC105_ACTIONID,
                       XC105_RECIP_BUID,
                       XC105_RUNSTART_TS,
                       XC105_ACT_CONTENT)
              VALUES (:xc105a1t.xc105_recip_cifnr,
                      :xc105a1t.xc105_uuid_doc_c,
                       CURRENT_TIMESTAMP,
                      :xC105a1t.xc105_pid,
                      :xc105a1t.xc105_actionid,
                      :xc105a1t.xc105_recip_buid,
                      :xc105a1t.xc105_runstart_ts,
                      :xc105a1t.xc105_act_content);

     Select(sqlca.sqlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
           Call HandleException('E#65','TXC105A1',
                                'Unable to Insert LOG for '!!
                                 xc105a1t.xc105_uuid_doc_c);
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
         Call HandleException('E#65','TXC105A1',
                           'Unable to Insert LOG for '!!
                           xc105a1t.xc105_uuid_doc_c);
       end;
     End;
   end; /*end of do while retrycount*/

 End InsertDocLogDetails;

 /*-------------------------------------------------------------------*/
 /* logAuditInfo: Logs the incident in incident table TXR112A1.       */
 /*-------------------------------------------------------------------*/
 logAuditInfo: proc($DocType);
   dcl $DocType              char(04);

   call Logtrace(@Dflt,'Proc',Procedurename()!!
                                  '('!!$DocType !!')');

   Select($DocType);
     when('Busi') do;
       xr112a1t.xr112_recip_cifnr  = xc401a1t.xc401_recipient_id;
       xr112a1t.xr112_busi_uuid_b  = XC401A1T.XC401_DOC_UUID ;
       xr112a1t.xr112_busi_objtyp  = '05';
       xr112a1t.xr112_incident_cde = '019';
       xr112a1t.xr112_buid         = RecipientBUid;
       xr112a1t.xr112_ret_office   = '';
       xr112a1t.xr112_ret_ao       = '';
       xr112a1t.xr112_ret_category = tcd100.cd100161;
       xr112a1t.xr112_client_offic = '';
       xr112a1t.xr112_printer_name = '';
       xr112a1t.xr112_status       = xr100a1t.xr100_dosr_status;
       xr112a1t.xr112_creator_pid  = @PgmName;
       xr112a1t.xr112_incident_cnt = '';
       xr112a1t.xr112_buid         = xr100a1t.xr100_buid;
       xr112a1t.xr112_ret_office   = xr100a1t.xr100_ret_office;
       xr112a1t.xr112_ret_ao       = xr100a1t.xr100_ret_ao;
       xr112a1t.xr112_ret_category = xr100a1t.xr100_ret_category;
       xr112a1t.xr112_client_offic = xr100a1t.xr100_client_offic;
       xr112a1t.xr112_printer_name = '';
       xr112a1t.xr112_status       = xr101a1t.xr101_doc_status;

       xr112a1t.xr112_creator_pid  = @PgmName;
       xr112a1t.xr112_incident_cnt = xr101a1t.xr101_owner_cifnr;

     end;
     otherwise;
   End;
   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );

     EXEC SQL
       INSERT INTO TXR112A1
             ( XR112_RECIP_CIFNR ,
               XR112_BUSI_UUID_B ,
               XR112_BUSI_OBJTYP ,
               XR112_INCIDENT_CDE,
               XR112_INCIDENT_TS ,
               XR112_BUID        ,
               XR112_RET_OFFICE  ,
               XR112_RET_AO      ,
               XR112_RET_CATEGORY,
               XR112_CLIENT_OFFIC,
               XR112_PRINTER_NAME,
               XR112_STATUS      ,
               XR112_CREATOR_PID ,
               XR112_INCIDENT_CNT)
       VALUES
             (:xr112a1t.xr112_recip_cifnr ,
              :xr112a1t.xr112_busi_uuid_b ,
              :xr112a1t.xr112_busi_objtyp ,
              :xr112a1t.xr112_incident_cde,
              CURRENT TIMESTAMP           ,
              :xr112a1t.xr112_buid        ,
              :xr112a1t.xr112_ret_office  ,
              :xr112a1t.xr112_ret_ao      ,
              :xr112a1t.xr112_ret_category,
              :xr112a1t.xr112_client_offic,
              :xr112a1t.xr112_printer_name,
              :xr112a1t.xr112_status      ,
              :xr112a1t.xr112_creator_pid ,
              :xr112a1t.xr112_incident_cnt);

     Select(sqlca.sqlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
 ; /*put skip lines removed (by topaz plugin) */
           call HandleException('E#70','TXR112A1',
                                'Unable to Insert Incident Details');
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
         call HandleException('E#70','TXR112A1',
                              'Unable to Insert Incident Details');
       end;
     End;
   end; /*End of do while RetryCount*/

 end logAuditInfo;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 ProcessEnclosureDocument: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   CurrEnclCount = 1;

   do while (CurrEnclCount <= Outparam.EnclosureData.TotalEnclCount );
     Call EvaluateAndPopulateEnclosuredata;
     if EnclosureData.XC409_SUP_UUID > ''
     then do;
       if XC401A1T.XC401_CHANNEL = 'RET'
       then do;
         Call CheckIfAlreadyDistributed;
         if ^SupImportBypass
         then do;
           Call WriteStandaloneMetadataInRET ;
           if ^SupImportBypass
           then Call WriteStandaloneMetadataInDBox;
           Call CreateMainDocInfoDocReln(DboxStandalone.xc401_doc_uuid);
         end;
       end;
       else do;
         Select(EnclosureData.xc409_sup_category);
           when('S') do;
             Call WriteStandaloneMetadataInDBox;
             Call CreateMainDocInfoDocReln
                                (DboxStandalone.xc401_doc_uuid);
           end;
           otherwise do;
             Call CreateMainDocInfoDocReln(xc401a1t.xc401_doc_uuid);
           end;
         End;
       end;
       if EnclosureData.xc409_sup_status  = '20'
       then Call UpdateEnclosureStatusToDeployed;
     end;
     CurrEnclCount = CurrEnclCount + 1;
   end;


 End ProcessEnclosureDocument;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 UpdateEnclosureStatusToDeployed: Proc;
   Call logTrace(@Dflt,'PROC',procedurename());

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );

     EXEC SQL
       UPDATE TXC409A1
          SET XC409_SUP_STATUS       = '30',
              XC409_UPDATE_ID        = :@pgmname,
              XC409_UPDATE_TS        = current timestamp
        WHERE XC409_SUP_IDENTIFIER   =
                                 :EnclosureData.XC409_SUP_IDENTIFIER
          AND XC409_SUP_VERSION      =
                                 :EnclosureData.XC409_SUP_VERSION;

     Select(sqlca.sqlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
         Call logTrace(@Dflt,'T#43','Supplement metadata info '!!
                                    'updated successfully');
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
           Call HandleException('E#47','TXC409A1',
                                'Unable to Update Status:'!!
                                 EnclosureData.XC409_SUP_IDENTIFIER   !!
                                 EnclosureData.XC409_SUP_VERSION      !!
                                ' ##Sqlcode : '!!SQLCA.SqlCode);
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
         Call HandleException('E#47','TXC409A1',
                        'Unable to Update Status:'!!
                         EnclosureData.XC409_SUP_IDENTIFIER     !!
                         EnclosureData.XC409_SUP_VERSION        !!
                        ' ##Sqlcode : '!!SQLCA.SqlCode);
       end;
     End;
   end;

 End UpdateEnclosureStatusToDeployed;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 EvaluateAndPopulateEnclosuredata: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());


   EnclosureData = '';
   Select (CurrEnclCount);
     when (1) do;
       EnclosureData = EnclosureData1 ;
     end;
     when (2) do;
       EnclosureData = EnclosureData2 ;
     end;
     when (3) do;
       EnclosureData = EnclosureData3 ;
     end;
     when (4) do;
       EnclosureData = EnclosureData4 ;
     end;
     when (5) do;
       EnclosureData = EnclosureData5 ;
     end;
     when (6) do;
       EnclosureData = EnclosureData6 ;
     end;
     otherwise;
   End;

 End EvaluateAndPopulateEnclosuredata;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 CheckIfAlreadyDistributed: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );

     Call LogTrace(@Dflt,'T#90','EnclosureData.xc409_sup_uuid:' !!
                                  EnclosureData.xc409_sup_uuid);
     xc407a1t                     =  '';
     xc407a1t.xc407_sup_uuid      =  EnclosureData.xc409_sup_uuid;
     xc407a1t.xc407_recipient_id  =  xc400a1t.xc400_recipient_id;

     EXEC SQL
       SELECT  XC407_DOC_UUID
         INTO  :xc407a1t.xc407_doc_uuid
         FROM  TXC407A1,TXC401A1
         WHERE XC407_DOC_UUID     = XC401_DOC_UUID
         AND   XC407_SUP_UUID     = :xc407a1t.xc407_sup_uuid
         AND   XC407_RECIPIENT_ID = :xc407a1t.xc407_recipient_id
         AND   XC401_CHANNEL      = 'RET'
         FETCH FIRST ROW ONLY
       WITH UR;

     Select(SQlcode);
       when(0) do;
         RetryCount = MaxRetryCount + 1;
         SupImportBypass = @True;
         Call LogTrace(@Force,'T#20','Sup:'!!xc407a1t.xc407_sup_uuid!!
                                    ' already distributed' !!
                                    ' to Recipient:'!!
                                     xc407a1t.xc407_recipient_id);
       end;
       when(100) do;
         RetryCount = MaxRetryCount + 1;
         SupImportBypass = @False;
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
 ; /*put skip lines removed (by topaz plugin) */
           call LogTrace(@Force, 'T#20','Deadlock persist');
           call LogTrace(@Force, 'T#21','Supplement ID     : '!!
                                         xc407a1t.xc407_sup_uuid);
           call LogTrace(@Force, 'T#23','Recipient CIF Nr  : '!!
                                        xc407a1t.xc407_recipient_id);
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
         RetryCount = MaxRetryCount + 1;
         call LogTrace(@Dflt, 'T#21','Supplement ID     : '!!
                                       xc407a1t.xc407_sup_uuid);
         call LogTrace(@Dflt, 'T#23','Recipient CIF Nr  : '!!
                                       xc407a1t.xc407_recipient_id);
 ; /*put skip lines removed (by topaz plugin) */
       end;
     End;
  end;

 End CheckIfAlreadyDistributed;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 WriteDocMetadataInRET: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );

     EXEC SQL
        INSERT INTO TXR101A1
            (XR101_UUID_DOC_B,
             XR101_RECIP_CIFNR,
             XR101_PART_NO,
             XR101_DOC_PART_NO,
             XR101_DOC_TB_NAME,
             XR101_UUID_DOC_C,
             XR101_UUID_TXR_C,
             XR101_DOC_WARN_CNT,
             XR101_RET_CATEGORY,
             XR101_TYP_RELATION,
             XR101_TYP_BU_RENUM,
             XR101_TYP_ACCOUNT,
             XR101_TYP_DEPOSIT,
             XR101_OWNER_CIFNR,
             XR101_OWNER_BUID,
             XR101_TYPCUSTOWNER,
             XR101_DOC_SETID,
             XR101_DOC_GROUP,
             XR101_DOC_TYP,
             XR101_T_INFO,
             XR101_DOC_LANG_CDE,
             XR101_DATE_BEVENT,
             XR101_DATE_OUTCR,
             XR101_DATE_ISSUE,
             XR101_DATE_VALUE,
             XR101_DOC_TITLE,
             XR101_DOC_SRC_FRMT,
             XR101_NUM_PAGES,
             XR101_CURRENCY,
             XR101_AMOUNT,
             XR101_IS_ORIGINAL,
             XR101_DATE_PRINT,
             XR101_COPYGRP,
             XR101_PAGEFMT,
             XR101_OWNER_NAME,
             XR101_CARD_NUMBER,
             XR101_DATE_EXPIRY,
             XR101_DATE_NOTIFY,
             XR101_DATE_DELETE,
             XR101_CREATOR_PID,
             XR101_RM_NOTIFY,
             XR101_PO_STATUS,
             XR101_CONTACT_PID,
             XR101_CONTACT_DATE,
             XR101_DELETE_RSCDE,
             XR101_PRINT_STATUS,
             XR101_DOC_NOTE,
             XR101_CONTACT_REMK,
             XR101_DOC_STATUS,
             XR101_RESERVE_PID,
             XR101_TS_RESERVE,
             XR101_UPDATE_PID,
             XR101_TS_UPDATE)
        VALUES
            (:xr101a1t.xr101_uuid_doc_b,
             :xr101a1t.xr101_recip_cifnr,
             :xr101a1t.xr101_part_no,
             :xr101a1t.xr101_doc_part_no,
             :xr101a1t.xr101_doc_tb_name,
             :xr101a1t.xr101_uuid_doc_c,
             :xr101a1t.xr101_uuid_txr_c,
             :xr101a1t.xr101_doc_warn_cnt,
             :xr101a1t.xr101_ret_category,
             :xr101a1t.xr101_typ_relation,
             :xr101a1t.xr101_typ_bu_renum,
             :xr101a1t.xr101_typ_account,
             :xr101a1t.xr101_typ_deposit,
             :xr101a1t.xr101_owner_cifnr,
             :xr101a1t.xr101_owner_buid,
             :xr101a1t.xr101_typcustowner,
             :xr101a1t.xr101_doc_setid,
             :xr101a1t.xr101_doc_group,
             :xr101a1t.xr101_doc_typ,
             :xr101a1t.xr101_t_info,
             :xr101a1t.xr101_doc_lang_cde,
             :xr101a1t.xr101_date_bevent,
             :xr101a1t.xr101_date_outcr,
             :xr101a1t.xr101_date_issue,
             :xr101a1t.xr101_date_value,
             :xr101a1t.xr101_doc_title,
             :xr101a1t.xr101_doc_src_frmt,
             :xr101a1t.xr101_num_pages,
             :xr101a1t.xr101_currency,
             :xr101a1t.xr101_amount,
             :xr101a1t.xr101_is_original,
             :xr101a1t.xr101_date_print,
             :xr101a1t.xr101_copygrp,
             :xr101a1t.xr101_pagefmt,
             :xr101a1t.xr101_owner_name,
             :xr101a1t.xr101_card_number,
             :xr101a1t.xr101_date_expiry,
             :xr101a1t.xr101_date_notify,
             :xr101a1t.xr101_date_delete,
             :xr101a1t.xr101_creator_pid,
             :xr101a1t.xr101_rm_notify,
             :xr101a1t.xr101_po_status,
             :xr101a1t.xr101_contact_pid,
             :xr101a1t.xr101_contact_date,
             :xr101a1t.xr101_delete_rscde,
             :xr101a1t.xr101_print_status,
             :xr101a1t.xr101_doc_note,
             :xr101a1t.xr101_contact_remk,
             :xr101a1t.xr101_doc_status,
             :xr101a1t.xr101_reserve_pid,
             :xr101a1t.xr101_ts_reserve,
             :xr101a1t.xr101_update_pid,
             :xr101a1t.xr101_ts_update);

      select(sqlca.sqlcode);
        when(0) do;
           RetryCount = MaxRetryCount + 1;
           call LogTrace(@Dflt,'T#24', 'xr101a1t.xr101_uuid_doc_c ' !!
                                        xr101a1t.xr101_uuid_doc_c);
           call LogTrace(@Dflt,'T#24',
                               'Meta Data inserted successfully ' !!
                               'in TXR101A1 for Business doc');


        end;

       /*-------------------------------------------------------------*/
       /* Previous version:-                                          */
       /* ===================                                         */
       /* As content is stored before metadata hence this check has   */
       /*    been shifted at Content Insertion procedures             */
       /*                                                             */
       /* New version :-                                              */
       /* ===============                                             */
       /* As enclosure  content won't be replicated, hence this check */
       /*    has to be done while replicating enclosure doc mtadata.  */
       /*                                                             */
       /*-------------------------------------------------------------*/
        when(-803) do;
          RetryCount = MaxRetryCount + 1;
          call LogTrace(@Force,'T#29',
                       'Business Document already exists in TXR101A1');


     /*     Call WriteDuplicateDocNotificationMailBody;       */

          call LogTrace(@Force,'T#32',
                       'Import Bypassed for' !!
                       ' CIF:'!!xr101a1t.xr101_recip_cifnr !!
                       ' DOC:'!!xr101a1t.xr101_uuid_doc_c);
          BypassDocProcess  = @True;
          SupImportBypass  = @True;
        end;
        when(-911,-913) do;
          if RetryCount = 1
          then do;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
            call HandleException('E#73','TXR101A1',
                                 'Unable to Insert Business Document');

          end;
          Delay(DelayTime);
          RetryCount = RetryCount + 1;
        end;
        otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
          call HandleException('E#73','TXR101A1',
                                'Unable to Insert Business Document');

        end;
      end;
    end; /*End of Do while retryCount*/

 End WriteDocMetadataInRET;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 WriteStandaloneMetadatainRET: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());


   RETStandalone = '';
   Select (CurrEnclCount);
     when (1) do;
       RETStandalone = RETStandalone1 ;
     end;
     when (2) do;
       RETStandalone = RETStandalone2 ;
     end;
     when (3) do;
       RETStandalone = RETStandalone3 ;
     end;
     when (4) do;
       RETStandalone = RETStandalone4 ;
     end;
     when (5) do;
       RETStandalone = RETStandalone5 ;
     end;
     when (6) do;
       RETStandalone = RETStandalone6 ;
     end;
     otherwise;
   End;

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );

       EXEC SQL
       INSERT INTO TXR101A1
           (XR101_UUID_DOC_B,
            XR101_RECIP_CIFNR,
            XR101_PART_NO,
            XR101_DOC_PART_NO,
            XR101_DOC_TB_NAME,
            XR101_UUID_DOC_C,
            XR101_UUID_TXR_C,
            XR101_DOC_WARN_CNT,
            XR101_RET_CATEGORY,
            XR101_TYP_RELATION,
            XR101_TYP_BU_RENUM,
            XR101_TYP_ACCOUNT,
            XR101_TYP_DEPOSIT,
            XR101_OWNER_CIFNR,
            XR101_OWNER_BUID,
            XR101_TYPCUSTOWNER,
            XR101_DOC_SETID,
            XR101_DOC_GROUP,
            XR101_DOC_TYP,
            XR101_T_INFO,
            XR101_DOC_LANG_CDE,
            XR101_DATE_BEVENT,
            XR101_DATE_OUTCR,
            XR101_DATE_ISSUE,
            XR101_DATE_VALUE,
            XR101_DOC_TITLE,
            XR101_DOC_SRC_FRMT,
            XR101_NUM_PAGES,
            XR101_CURRENCY,
            XR101_AMOUNT,
            XR101_IS_ORIGINAL,
            XR101_DATE_PRINT,
            XR101_COPYGRP,
            XR101_PAGEFMT,
            XR101_OWNER_NAME,
            XR101_CARD_NUMBER,
            XR101_DATE_EXPIRY,
            XR101_DATE_NOTIFY,
            XR101_DATE_DELETE,
            XR101_CREATOR_PID,
            XR101_RM_NOTIFY,
            XR101_PO_STATUS,
            XR101_CONTACT_PID,
            XR101_CONTACT_DATE,
            XR101_DELETE_RSCDE,
            XR101_PRINT_STATUS,
            XR101_DOC_NOTE,
            XR101_CONTACT_REMK,
            XR101_DOC_STATUS,
            XR101_RESERVE_PID,
            XR101_TS_RESERVE,
            XR101_UPDATE_PID,
            XR101_TS_UPDATE)
       VALUES
             (:RETStandalone.xr101_uuid_doc_b,
            :RETStandalone.xr101_recip_cifnr,
            :RETStandalone.xr101_part_no,
            :RETStandalone.xr101_doc_part_no,
            :RETStandalone.xr101_doc_tb_name,
            :RETStandalone.xr101_uuid_doc_c,
            :RETStandalone.xr101_uuid_txr_c,
            :RETStandalone.xr101_doc_warn_cnt,
            :RETStandalone.xr101_ret_category,
            :RETStandalone.xr101_typ_relation,
            :RETStandalone.xr101_typ_bu_renum,
            :RETStandalone.xr101_typ_account,
            :RETStandalone.xr101_typ_deposit,
            :RETStandalone.xr101_owner_cifnr,
            :RETStandalone.xr101_owner_buid,
            :RETStandalone.xr101_typcustowner,
            :RETStandalone.xr101_doc_setid,
            :RETStandalone.xr101_doc_group,
            :RETStandalone.xr101_doc_typ,
            :RETStandalone.xr101_t_info,
            :RETStandalone.xr101_doc_lang_cde,
            :RETStandalone.xr101_date_bevent,
            :RETStandalone.xr101_date_outcr,
            :RETStandalone.xr101_date_issue,
            :RETStandalone.xr101_date_value,
            :RETStandalone.xr101_doc_title,
            :RETStandalone.xr101_doc_src_frmt,
            :RETStandalone.xr101_num_pages,
            :RETStandalone.xr101_currency,
            :RETStandalone.xr101_amount,
            :RETStandalone.xr101_is_original,
            :RETStandalone.xr101_date_print,
            :RETStandalone.xr101_copygrp,
            :RETStandalone.xr101_pagefmt,
            :RETStandalone.xr101_owner_name,
            :RETStandalone.xr101_card_number,
            :RETStandalone.xr101_date_expiry,
            :RETStandalone.xr101_date_notify,
            :RETStandalone.xr101_date_delete,
            :RETStandalone.xr101_creator_pid,
            :RETStandalone.xr101_rm_notify,
            :RETStandalone.xr101_po_status,
            :RETStandalone.xr101_contact_pid,
            :RETStandalone.xr101_contact_date,
            :RETStandalone.xr101_delete_rscde,
            :RETStandalone.xr101_print_status,
            :RETStandalone.xr101_doc_note,
            :RETStandalone.xr101_contact_remk,
            :RETStandalone.xr101_doc_status,
            :RETStandalone.xr101_reserve_pid,
            :RETStandalone.xr101_ts_reserve,
            :RETStandalone.xr101_update_pid,
            :RETStandalone.xr101_ts_update);

     select(sqlca.sqlcode);
       when(0) do;
         RetryCount =MaxRetryCount + 1;
         call LogTrace(@Dflt,'T#24', 'xr101a1t.xr101_uuid_doc_c ' !!
                                      RETStandalone.xr101_uuid_doc_c);
          call LogTrace(@Dflt,'T#25',
                                   'Meta Data inserted successfully ' !!
                                   'in TXR101A1 for supplement');
       end;

       /*-------------------------------------------------------------*/
       /* Previous version:-                                          */
       /* ===================                                         */
       /* As content is stored before metadata hence this check has   */
       /*    been shifted at Content Insertion procedures             */
       /*                                                             */
       /* New version :-                                              */
       /* ===============                                             */
       /* As enclosure  content won't be replicated, hence this check */
       /*    has to be done while replicating enclosure doc mtadata.  */
       /*                                                             */
       /*-------------------------------------------------------------*/
       when(-803) do;
          RetryCount =MaxRetryCount + 1;
          call LogTrace(@Force,'T#30',
                  'Supplement Document already exists in TXR101A1');

         call LogTrace(@Force,'T#32',
         'Import Bypassed for' !!
         ' CIF:'!!RETStandalone.xr101_recip_cifnr !!
         ' DOC:'!!RETStandalone.xr101_uuid_doc_c );
         BypassDocProcess  = @True;
         SupImportBypass  = @True;
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
           call HandleException('E#74','TXR101A1',
                                'Unable to Insert Enclosure Document');
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
 ; /*put skip lines removed (by topaz plugin) */
          call HandleException('E#74','TXR101A1',
                               'Unable to Insert Enclosure Document');

       end;
     end;
   end; /*End of do while RetryCount*/

 End WriteStandaloneMetadatainRET;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 CreateMainDocInfoDocReln: Proc($DocUUID);
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   dcl $DocUUID               char(36);

   xc407a1t                     =  '';
   xc407a1t.xc407_doc_uuid      =  $DocUUID;
   xc407a1t.xc407_sup_uuid      =  EnclosureData.xc409_sup_uuid;
   xc407a1t.xc407_sup_category  =  EnclosureData.xc409_sup_category;
   xc407a1t.xc407_recipient_type =  xc400a1t.xc400_recipient_type;
   xc407a1t.xc407_recipient_id   =  xc400a1t.xc400_recipient_id;

   if xc401a1t.xc401_channel = 'PRT'
   then  xc407a1t.xc407_sup_status = '40' ;
   else  xc407a1t.xc407_sup_status = '30';
   xc407a1t.xc407_update_id        = @PgmName;

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );
     EXEC SQL
       INSERT INTO TXC407A1
            ( XC407_DOC_UUID,
              XC407_SUP_UUID,
              XC407_SUP_CATEGORY,
              XC407_RECIPIENT_TYPE,
              XC407_RECIPIENT_ID,
              XC407_SUP_STATUS,
              XC407_UPDATE_ID,
              XC407_UPDATE_TS )
       VALUES
            ( :xc407a1t.xc407_doc_uuid  ,
              :xc407a1t.xc407_sup_uuid      ,
              :xc407a1t.xc407_sup_category ,
              :xc407a1t.xc407_recipient_type ,
              :xc407a1t.xc407_recipient_id     ,
              :xc407a1t.xc407_sup_status ,
              :xc407a1t.xc407_update_id ,
               CURRENT TIMESTAMP);

     If xc407a1t.xc407_sup_category = 'E'
     then do;
       Select (SQLCA.SQLCODE);
         when(0,-803) do;
           RetryCount = MaxRetryCount + 1;
         end;
         when(-911,-913) do;
           if RetryCount = 1
           then do;
             Call HandleException('E#49','TXC407A1',
                               'Insert Doc Enclosure Relation Failed');
           end;
           Delay(DelayTime);
           RetryCount = RetryCount + 1;
         end;
         otherwise do;
             Call HandleException('E#49','TXC407A1',
                               'Insert Doc Enclosure Relation Failed');
         end;
       End;  /*End of Select*/
     end;
     else do;
       Select (SQLCA.SQLCODE);
         when(0) do;
           RetryCount = MaxRetryCount + 1;
         end;
         when(-911,-913) do;
           if RetryCount = 1
           then do;
             Call HandleException('E#49','TXC407A1',
                               'Insert Doc Enclosure Relation Failed');
           end;
           Delay(DelayTime);
           RetryCount = RetryCount + 1;
         end;
         otherwise  do;
           Call HandleException('E#49','TXC407A1',
                                'Insert Doc Enclosure Relation Failed');
         end;
       End;
     end;   /*End of If-else xc407a1t.xc407_sup_category*/
   end;     /*End of Do while RetryCount*/

 End CreateMainDocInfoDocReln;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 CheckAndCreatePDFConvRequest: Proc();
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   if XC401A1T.XC401_DOC_SRC_FORMAT = 'LNE' !
      XC401A1T.XC401_DOC_SRC_FORMAT = 'AFP'
   then do;

     Select(XC401A1T.XC401_CHANNEL);
       when ('SEC', 'EMH',
             'BOX', 'EOS')
       do;
         TargetDocumentFormat  = 'PDF';
         Call ProcessPDFConvRequest;
       end;
       when ('PRT') do;
         DocumentTypePDFCopyB = DocumentTypeForPDFCopy();
         if DocumentTypePDFCopyB
         then do;
           TargetDocumentFormat =  'PDC';
           Call ProcessPDFConvRequest;
         end;
       end;
       when ('RET') do;
         if xr100a1t.xr100_IS_RETMM   = 'O'
          ! xr100a1t.xr100_IS_RETMM   = 'B'
          ! xr100a1t.xr100_IS_RETMM   = 'P'
         then do;
           TargetDocumentFormat = 'PDF';
           Call ProcessPDFConvRequest;
         end;
         else do;
           DocumentTypePDFCopyB = DocumentTypeForPDFCopy();
           if DocumentTypePDFCopyB
           then do;
             TargetDocumentFormat  = 'PDC';
             Call ProcessPDFConvRequest;
           end;
         end;
       end;
       otherwise ;
     End;

   end;
 End CheckAndCreatePDFConvRequest;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 RetrievePDFMQDetailsFromConfig: Proc();
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   MQPDFReqCommArea.$QueueName    = trim(RetrieveDBoxConfig(
                                                   '*'
                                                 ,'ADHOC_PDF_CONVERSION'
                                                 ,'QUEUE_NAME'));

   PDFMQMaxMessageLength          = trim(RetrieveDBoxConfig(
                                                   '*'
                                                 ,'ADHOC_PDF_CONVERSION'
                                                 ,'MQ_MESSAGE_LIMIT'));

   MQPDFReqCommArea.$QueueManager = ImmediateQueueManager; /*AS01*/
 End RetrievePDFMQDetailsFromConfig;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 ProcessPDFConvRequest: Proc();
   Call LogTrace(@Dflt,'Proc',ProcedureName());



   PDFMQMessage(*)      = '';                          /*AS01*/
   Base64OutMsg(*)      = '';                          /*AS01*/
   ptrPDFMQMessage      = addr(PDFMQMessage(1));
   PDFMQMessageLength   = 0;

   ConversionRemarks = MQPDFReqCommArea.$QueueName;

   if ^PdfConversionBypass
   then call AppendToPDFMQMessage(MQMsgXMLHeaderNew);

   if ^PdfConversionBypass
   then Call PrepareAndPopulateXMLMessageForDoc();

   if ^PdfConversionBypass
   then Call AppendToPDFMQMessage(TrailerNew);

   if ^PdfConversionBypass
   then Call SendDocPDFConvMQMessage;

   if  ^MQFull
   then do;
    ConversionRemarks = MQPDFReqCommArea.$QueueName;
    Call InsertPDFConvRequest('6');
   end;
 End ProcessPDFConvRequest;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 AppendToPDFMQMessage: Proc($Text);
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   dcl $Text                   char(32000)   varying;
   dcl TextLen                 bin fixed(31)  init(0);

   Call LogTrace(@Dflt,'Proc',procedurename()!!'('!!
                              substr($Text,1,20)!!'...)'
                              !! length($Text));

   TextLen = length($Text);

   substr(PDFMQMessageRec,1,TextLen) = $Text;
   PDFMQMessageLength                = PDFMQMessageLength + TextLen;
   ptrPDFMQMessage                   = PTRADD(ptrPDFMQMessage,TextLen);

   Call LogTrace(@Dflt,'T#16','Append Len:'!! trim(char(TextLen)) !!
                              ',Total Len:'!! PDFMQMessageLength);

 End AppendToPDFMQMessage;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PrepareAndPopulateXMLMessageForDoc: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());


   /* retrieve BU - Information from CIF -----------------------------*/
   CIFDetails.CD100004 = '';
   if ^PdfConversionBypass &
      (xc401a1t.XC401_RECIPIENT_TYPE = '01')
   then do;
     Call RetrieveCIFDetails(xc401a1t.xc401_owner_id);

     /* Try with recipient if owner details not found                 */
     if YCDSGETK.cdsget_rc ^= 0
     then Call RetrieveCIFDetails(XC401A1T.XC401_RECIPIENT_ID);

     if YCDSGETK.cdsget_rc ^= 0
     then do;
       PDFConversionBypass = @True;
       ConversionRemarks = 'Unable to Retrieve details for '!!
                           'CIF:'!!YCDSGETK.cdsget_cif !!
                           ',RC:'!!YCDSGETK.cdsget_rc;
       Call LogTrace(@Force,'T#09',ConversionRemarks);
       Call InsertPDFConvRequest('8');
     end;
   end;

   if ^PdfConversionBypass &
      (xc401a1t.XC401_RECIPIENT_TYPE = '01')
   then Call RetrieveBULegalEntityName(CIFDetails.CD100004,
                                       xc401a1t.xc401_doc_lang_code_cs);
   if ^PdfConversionBypass
   then Call PopulateNEWXMLClientDocPropertiesInMQMessage;

   if ^PdfConversionBypass
   then Call ConvertDBoxDocContentToBase64;

   if ^PdfConversionBypass
   then Call EvaluateAndAppendNewBase64ContentInMQMessage;

 End PrepareAndPopulateXMLMessageForDoc;

 /*-------------------------------------------------------------------*/
 /* Retrieve Business Unit from Cif to determine LE Name              */
 /*-------------------------------------------------------------------*/
 RetrieveCIFDetails: Proc($cif);
   call Logtrace(@Dflt,'Proc',procedurename());
   dcl $cif char(20);

   YCDSGETK.cdSGet_Ppool = addr(CIFDetails);
   YCDSGETK.cdSGet_SQLCA = addr(SQLCA);
   YCDSGETK.cdsget_cif   = trim($cif);
   YCDSGETK.CDSGET_TYP   = 'I';
   YCDSGETK.cdSGet_Puts  = $@PARM8;
   YCDSGETK.cdSGet_PutPID= 'A123456';

   Call YCDSGET(PYCDSGET);                        /* external module  */

   Select(YCDSGETK.cdsget_rc);
     when(0) do;
       Call LogTrace(@Dflt,'T#08',
                  'BU-ID successfully from CIF: '!!YCDSGETK.cdsget_cif);
     end;
     otherwise do;
       Call LogTrace(@Force,'T#08',
                  'BU-ID unsuccessful for CIF: ' !!YCDSGETK.cdsget_cif);
     end;
   End;

 End RetrieveCIFDetails;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 RetrieveBULegalEntityName: Proc($BUID,$LanguageCode);
    Call LogTrace(@Dflt,'Proc','RetrieveBULegalEntityName');

    Dcl $BUID                char(04);
    Dcl $LanguageCode        char(01);

    BULegalEntityName = '';

    /*--- Header Data-------------------------------------------------*/
    header.requestId = xc401a1t.xc401_doc_uuid;

    /*--- Input Data -------------------------------------------------*/
    call bu0140I /* @IF002335#GET_BUSINESS_UNIT_4_0_INPUT_INIT */

         (getBusinessUnitIn);

    getBusinessUnitIn.buId = $BUID;
    getBusinessUnitIn.language.isNull = '0'B;
    getBusinessUnitIn.language.val.selection =
                                   MECC#AB#P#LANGUAGESELECTION_1_BUDEF;

    getBusinessUnitIn.language.val.languageCSCd.isNull = '0'B;
    getBusinessUnitIn.language.val.languageCSCd.val =
                            '00'!!$LanguageCode;
    getBusinessUnitIn.validAsPerDate.isNull = '1'B;

    /*--- Service Call -----------------------------------------------*/
    call bu0140B /* @IF002335#GET_BUSINESS_UNIT_4_0 */

         (retCd,
          header,
          getBusinessUnitIn,
          getBusinessUnitOut,
          sysEx);

    select(retCd);                            /* return code handling */
      /*--- output data valid ----------------------------------------*/
      when(SBIP#RET_CD_01_OK) do;       /* service sucessful          */

       if ^getBusinessUnitOut.languageDependent.isNull then do;
          BULegalEntityName =
             getBusinessUnitOut.languageDependent.val.legalEntityName;
       end;

      end;                                       /* service successful*/

      /*--- Business Exception ---------------------------------------*/
      when(SBIP#RET_CD_01_BUS_EX) do;   /* business exception         */
        PDFConversionBypass = @True;
        ConversionRemarks = 'Unable to Retrieve Legal Entity Name ' !!
                            'for BUID: '!! getBusinessUnitIn.buId !!
                            ',Lang: '!!
                getBusinessUnitIn.language.val.languageCSCd.val;
        Call LogTrace(@Force,'T#10',ConversionRemarks);
        Call InsertPDFConvRequest('8');

        /*--- handle business exception ------------------------------*/
        if ^getBusinessUnitOut.busEx.isNull then do; /* busEx exists  */
          Call LogTrace(@Dflt,'T#11','PDF Conversion Bypassed ' !!
                       'for UUID:'!! XC401A1T.XC401_DOC_UUID);

          select(getBusinessUnitOut.busEx.val.cd); /* exception code  */
            when(BU0140B#BUS_EX_BU000004_LANG_ISO_CD_NOT_VALID);
            when(BU0140B#BUS_EX_BU000001_BUID_NOT_VALID)
               Call LogTrace(@Force,'T#12','Invalid Business Unit.' !!
                             ' => BUID: ' !! getBusinessUnitIn.buId);

            when(BU0140B#BUS_EX_BU000006_VALID_AS_PER_DATE_NOT_VALID);
            when(BU0140B#BUS_EX_BU000002_LANG_SWITCH_NOT_VALID);
            when(BU0140B#BUS_EX_BU000003_LANG_CS_CD_NOT_VALID)
               Call LogTrace(@Force,'T#13','Invalid language code.' !!
                             ' => Code: ' !!
                     getBusinessUnitIn.language.val.languageCSCd.val);

            other do;                            /* unexpected busEx  */
 ; /*put skip lines removed (by topaz plugin) */
            end;                                 /* unexpected busEx  */
          end;                                   /* exception code    */
        end;                                     /* busEx exists      */
        else do;                                 /* no busEx set      */
 ; /*put skip lines removed (by topaz plugin) */
        end;
      end;                                       /* business exception*/

      /*--- System Exception -----------------------------------------*/
      when(SBIP#RET_CD_01_SYS_EX) do;   /* system exception           */
        PDFConversionBypass = @True;
        ConversionRemarks = 'Unable to Retrieve Legal Entity Name ' !!
                            'due to unavailable Resource'           !!
                            'for BUID: '!! getBusinessUnitIn.buId   !!
                            ',Lang: '!!
                getBusinessUnitIn.language.val.languageCSCd.val;
        Call LogTrace(@Force,'T#11',ConversionRemarks);
        Call InsertPDFConvRequest('8');
        if ^sysEx.isNull then do;                /* sysEx exists      */
          /*--- handle system exception ------------------------------*/
          select(sysEx.val.cd); /* exception code                     */

            when(BU0140B#SYS_EX_IJ000002_OUTAGE_UNAVAILABLE_RESOURCE)
               Call LogTrace(@Force,'T#14','Error for Unavailable ' !!
                                          'Resource.');
            when(BU0140B#SYS_EX_IJ000001_OUTAGE_UNAVAILABLE_SERVICE)
               Call LogTrace(@Force,'T#15','Error for Unavailable ' !!
                                          'Service.');

            other do;                            /* unexpected sysEx  */
 ; /*put skip lines removed (by topaz plugin) */
            end;                                 /* unexpected sysEx  */
          end;                                   /* exception code    */
        end;                                     /* sysEx exists      */
      end;                                       /* system exception  */
      otherwise;                                /* unexpected        */

    end;                                      /* return code handling */

 End RetrieveBULegalEntityName;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PopulateNEWXMLClientDocPropertiesInMQMessage: Proc;
   Call Logtrace(@Dflt,'PROC',procedurename());

   /*--------------------- set XML values ----------------------------*/
   AppIDValue = xc401a1t.xc401_doc_uuid!!'/'!!TargetDocumentFormat;

   Call SetProcessKey;
   /*-----------------------------------------------------------------*/
   if PdfConversionBypass then return;

   Call AppendToMQMessage(AddXMLTag('ICTO','ICTO-409'));
   Call AppendToMQMessage('<Doc>');
   Call AppendToMQMessage('<Meta>');
   Call AppendToMQMessage(AddXMLTag('PK',trim(ProcessKey)));
   Call AppendToMQMessage(AddXMLTag('Prio',trim(PriorityKey)));
   Call AppendToMQMessage(AddXMLTag('AppID',trim(AppIDValue)));

   /*------------Setting Watermark ---------------------------------*/
   if ^PdfConversionBypass
    & xc401a1t.xc401_doc_src_format = 'AFP'
    & TargetDocumentFormat          = 'PDC'
   then do;
     Call AppendToMQMessage('<Res>');
     Call AppendToMQMessage('<ID>S1RETCOP');
     Call AppendToMQMessage('</ID>');
     Call AppendToMQMessage('<X>0');
     Call AppendToMQMessage('</X>');
     Call AppendToMQMessage('<Y>0');
     Call AppendToMQMessage('</Y>');
     Call AppendToMQMessage('<O>P');
     Call AppendToMQMessage('</O>');
     Call AppendToMQMessage('</Res>');
     Call AppendToMQMessage('<Res>');
     Call AppendToMQMessage('<ID>S1RETCOP');
     Call AppendToMQMessage('</ID>');
     Call AppendToMQMessage('<X>0');
     Call AppendToMQMessage('</X>');
     Call AppendToMQMessage('<Y>0');
     Call AppendToMQMessage('</Y>');
     Call AppendToMQMessage('<O>L');
     Call AppendToMQMessage('</O>');
     Call AppendToMQMessage('</Res>');
   end;

   Call AppendToMQMessage('<LND>');

   ConfigFormDefvalue = RetrieveDBoxConfig(xc401a1t.xC401_CHANNEL,
                                          'PDF_CONVERSION'
                                         ,'FORMDEF_LNE');
   ConfigPageDefvalue = RetrieveDBoxConfig(xc401a1t.xC401_CHANNEL,
                                          'PDF_CONVERSION'
                                         ,'PAGEDEF_LNE');

   If ConfigFormDefvalue = '' ! ConfigPageDefvalue= ''
   then do;
     PdfConversionBypass = @True;
   end;

   if ^PdfConversionBypass
   then do;
     Call AppendToMQMessage(AddXMLTag('FormDef',ConfigFormDefvalue));
     Call AppendToMQMessage(AddXMLTag('PageDef',ConfigPageDefvalue));

     Call AppendToMQMessage('</LND>');

     Call AppendToMQMessage('<PDF>');

     if BULegalEntityName ^= ''
     then Call AppendToMQMessage(AddXMLTag('Author',
                                 trim(BULegalEntityName)));

     if xc401a1t.xc401_doc_title    ^= ''
     then Call AppendToMQMessage(AddXMLTag('Title',
                    ValidateString(trim(xc401a1t.xc401_doc_title))));
     /*--------------------------------------------------------------*/
     if xc401a1t.xc401_relation_no ^= ''
     then Call AppendToMQMessage(AddXMLTag('Subject',
                                 trim(xc401a1t.xc401_relation_no)));
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'UUID_DOC'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                                trim(xc401a1t.XC401_DOC_UUID)));
     Call AppendToMQMessage('</Attr>');
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'RECIP_CIFNR'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                          trim(xc401a1t.XC401_RECIPIENT_ID)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'OWNER_CIFNR'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                        trim(xc401a1t.XC401_OWNER_ID)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'TYP_RELATION'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                        trim(xc401a1t.XC401_RELATION_TYPE)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'TYP_BU_RENUM'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                        trim(xc401a1t.XC401_RELATION_NO)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'DOC_TRG_FORMAT'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                           'PDF'));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'DOC_TYP'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                           trim(xc401a1t.XC401_DOC_TYPE)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'DOC_GROUP'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                           trim(xc401a1t.XC401_DOC_GROUP)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     if xc401a1t.xc401_appl_id ^= ''
     then do;
       Call AppendToMQMessage('<Attr>');
       Call AppendToMQMessage(AddXMLTag(AttrName,'APPL_ID'));
       Call AppendToMQMessage(AddXMLTag(AttrValue,
                          trim(xc401a1t.xc401_appl_id)));
       Call AppendToMQMessage('</Attr>');
     end;
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'DOC_CATEGORY'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                        trim(xc401a1t.XC401_DOC_CATEGORY)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'DOC_LANG_COD'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                        trim(xc401a1t.XC401_DOC_LANG_CODE_CS)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'PAGES'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                          trim(xc401a1t.XC401_DOC_PAGES)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'IS_ORIGINAL'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                        trim(xc401a1t.XC401_IS_ORIGINAL)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'IS_SIGNED'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,'N'));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     if xc401a1t.xc401_is_important ^= ''
     then do;
       Call AppendToMQMessage('<Attr>');
       Call AppendToMQMessage(AddXMLTag(AttrName,'IS_IMPORTANT'));
       Call AppendToMQMessage(AddXMLTag(AttrValue,
                          trim(xc401a1t.xc401_is_important)));
       Call AppendToMQMessage('</Attr>');
     end;
     /*--------------------------------------------------------------*/
     if xc401a1t.xc401_settlement_number ^= ''
     then do;
       Call AppendToMQMessage('<Attr>');
       Call AppendToMQMessage(AddXMLTag(AttrName,'ORDER_ID'));
       Call AppendToMQMessage(AddXMLTag(AttrValue,
                          trim(xc401a1t.xc401_settlement_number)));
       Call AppendToMQMessage('</Attr>');
     end;
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'IBAN'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                        trim(xc401a1t.xc401_iban)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     if xc401a1t.xc401_iban_counter ^= ''
     then do;
       Call AppendToMQMessage('<Attr>');
       Call AppendToMQMessage(AddXMLTag(AttrName,'IBAN_C'));
       Call AppendToMQMessage(AddXMLTag(AttrValue,
                          trim(xc401a1t.xc401_iban_counter)));
       Call AppendToMQMessage('</Attr>');
     end;
     /*--------------------------------------------------------------*/
     if xc401a1t.XC401_ACCOUNT_COUNTER ^= ''
     then do;
       Call AppendToMQMessage('<Attr>');
       Call AppendToMQMessage(AddXMLTag(AttrName,'ACCOUNT_C'));
       Call AppendToMQMessage(AddXMLTag(AttrValue,
                          trim(xc401a1t.XC401_ACCOUNT_COUNTER)));
       Call AppendToMQMessage('</Attr>');
     end;
     /*--------------------------------------------------------------*/
     if xc401a1t.xc401_cash_flow ^= ''
     then do;
       Call AppendToMQMessage('<Attr>');
       Call AppendToMQMessage(AddXMLTag(AttrName,'FLOW'));
       Call AppendToMQMessage(AddXMLTag(AttrValue,
                          trim(xc401a1t.xc401_cash_flow)));
       Call AppendToMQMessage('</Attr>');
     end;
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'CURRENCY'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                        trim(xc401a1t.XC401_CURRENCY_CODE_ISO)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'AMOUNT'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                          trim(xc401a1t.XC401_AMOUNT)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'DATE_BEVENT'));
     if   xc401a1t.xc401_bus_event_date   ^= '11.11.1111'
     then Call AppendToMQMessage(AddXMLTag(AttrValue,
                                   xc401a1t.xc401_bus_event_date));
     else Call AppendToMQMessage(AddXMLTag(AttrValue,''));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'DATE_VALUE'));
     if   xc401a1t.XC401_VALUE_DATE       ^= '11.11.1111'
     then Call AppendToMQMessage(AddXMLTag(AttrValue,
                                 xc401a1t.XC401_VALUE_DATE));
     else Call AppendToMQMessage(AddXMLTag(AttrValue,''));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'DOC_FILENAME'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
          ValidateString(trim(xc401a1t.XC401_DOC_FILENAME))));
     Call AppendToMQMessage('</Attr>');

     if CIFDetails.CD100004 > '0000'
      & CIFDetails.CD100004 < '9999'
     then do;
       Call AppendToMQMessage('<Attr>');
       Call AppendToMQMessage(AddXMLTag(AttrName,'BUID'));
       Call AppendToMQMessage(AddXMLTag(AttrValue,
                        trim(RecipientBUID)));
       Call AppendToMQMessage('</Attr>');
     end;
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('<Attr>');
     Call AppendToMQMessage(AddXMLTag(AttrName,'CHANNEL'));
     Call AppendToMQMessage(AddXMLTag(AttrValue,
                        trim(xc401a1t.XC401_channel)));
     Call AppendToMQMessage('</Attr>');
     /*--------------------------------------------------------------*/
     if xc401a1t.XC401_RET_CATEGORY ^= ''
     then do;
       Call AppendToMQMessage('<Attr>');
       Call AppendToMQMessage(AddXMLTag(AttrName,'ROUTING'));
       Call AppendToMQMessage(AddXMLTag(AttrValue,
                          trim(xc401a1t.XC401_RET_CATEGORY)));
       Call AppendToMQMessage('</Attr>');
     end;
     /*--------------------------------------------------------------*/
     Call AppendToMQMessage('</PDF>');

     Call AppendToMQMessage('</Meta>');

   end;

 End PopulateNEWXMLClientDocPropertiesInMQMessage;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 SetProcessKey:Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   ProcessKey = '';
   PriorityKey = '';
   Select (XC401A1T.XC401_DOC_SRC_FORMAT );
     when ('AFP') do;
       ProcessKey  = 'BOX-A';
       PriorityKey = '05';
     end;
     when ('LNE') do;
       ProcessKey = 'BOX-L';
       PriorityKey = '05';
     end;
     otherwise ;
   End;

 End SetProcessKey;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 ValidateString: proc ($InputString) returns(char(300) varying);

   Call LogTrace(@Dflt,'Proc',ProcedureName()!!'('!!$InputString!!')');

   dcl $InputString              char(300) varying;

   $InputString =  ReplaceString($InputString,'0D'x,'40'x);
   $InputString =  ReplaceString($InputString,'&','&amp;');
   $InputString =  ReplaceString($InputString,'<','&lt;');
   $InputString =  ReplaceString($InputString,'>','&gt;');

   Call LogTrace(@Dflt,'Proc',ProcedureName()!!'('!!$InputString!!')');
   return($InputString);

 end ValidateString;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 ReplaceString: proc ($SourceString,$Replace,$ReplaceWith)
                                    returns(char(300) varying);
   Call LogTrace(@Dflt,'Proc',ProcedureName()   !!
                              '('!!$SourceString!!
                              ','!!$Replace     !!
                              ','!!$ReplaceWith !!')');

   dcl $SourceString              char(300) varying;
   dcl $Replace                   char(300) varying;
   dcl $ReplaceWith               char(300) varying;
   dcl TargetString               char(300) varying     init('');
   dcl Char_found                 bin fixed(15)  init(0);

   Char_found = index($SourceString,$Replace);

   do while (Char_found > 0);
     TargetString = TargetString
                    !! substr($SourceString,1,(Char_found - 1))
                    !! $ReplaceWith;
     $SourceString = substr($SourceString,(Char_found +
                                           length($Replace)));
     Char_found = index($SourceString,$Replace);
   end;

   TargetString = TargetString !! $SourceString;
   Call LogTrace(@Dflt,'T#30','Target String :'!!TargetString);
   return(TargetString);

 end ReplaceString;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 ConvertDBoxDocContentToBase64: Proc;
   Call LogTrace(@Dflt,'PROC',procedurename());

   Call LogTrace(@Dflt,'T#19','Base64 Input  Len:'!!DBoxDocumentSize );

   Base64OutMsgLen = base64encode (addr(Base64OutMsg(1))
                                  ,cstg(Base64OutMsg)
                                  ,addr(DocContent(1))
                                  ,DBoxDocumentSize
                                  );

   Call LogTrace(@Dflt,'T#19','Base64 output Len:'!!Base64OutMsgLen );

   IF Base64OutMsgLen = -1
   then do;
     PDFConversionBypass = @True;
     ConversionRemarks = 'Unable to Convert to Base64'!!
                         ',INPUT LEN:'!! DBoxDocumentSize;
     Call LogTrace(@force,'E#12',ConversionRemarks);

     Call InsertPDFConvRequest('8');

   end;

 End ConvertDBoxDocContentToBase64;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 AddXMLTag:Proc($Tag,$TagValue) Returns(char(2020) var);
   Call LogTrace(@Dflt,'Proc',procedurename());

   dcl $Tag              char(30)        varying;
   dcl $TagValue         char(2000)      varying;
   dcl Result            char(2020)      varying;

   Call LogTrace(@Dflt,'Proc','AddXMLTag('!!$Tag!!','!!$TagValue!!')');

   Result = '<'!!$Tag!!'>'!!$TagValue!!'</'!!$Tag!!'>';

   Return (Result);

 End AddXMLTag;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 AppendDocContentB64InMQMessage: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   dcl Base64OutMsgRemLen    bin fixed(31) init(0);
   dcl Base64OutMsgXfrLen    bin fixed(31) init(0);

   ptrBase64OutMsg     = addr(Base64OutMsg(1));
   Base64OutMsgRemLen  = Base64OutMsgLen;
   /*-------------------------------------------------------------*/
   do while(Base64OutMsgRemLen > 0);
     Base64OutMsgXfrLen = MIN(32000,Base64OutMsgRemLen);
     Call AppendToMQMessage(substr(Base64OutMsgRec,
                                   1,
                                   Base64OutMsgXfrLen));
     /*---------------------------------------------------------------*/
     Base64OutMsgRemLen = Base64OutMsgRemLen - Base64OutMsgXfrLen;
     ptrBase64OutMsg    = PTRADD(ptrBase64OutMsg,Base64OutMsgXfrLen);
     /*---------------------------------------------------------------*/
   end;

 End AppendDocContentB64InMQMessage;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 AppendToMQMessage: Proc($Text);
   dcl $Text                   char(32000)   varying;
   dcl TextLen                 bin fixed(31)  init(0);

   Call LogTrace(@Dflt,'Proc',procedurename()!!'('!!
                              substr($Text,1,20)!!'...)'
                              !! length($Text));
   /*-----------------------------------------------------------------*/
   TextLen = length($Text);
   /*-----------------------------------------------------------------*/
   substr(PDFMQMessageRec,1,TextLen) = $Text;
   PDFMQMessageLength                = PDFMQMessageLength + TextLen;
   ptrPDFMQMessage                   = PTRADD(ptrPDFMQMessage,TextLen);
   /*-----------------------------------------------------------------*/
   Call LogTrace(@Dflt,'T#16','Append Len:'!! trim(char(TextLen)) !!
                              ',Total Len:'!! PDFMQMessageLength);
   /*-----------------------------------------------------------------*/

 End AppendToMQMessage;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 EvaluateAndAppendNewBase64ContentInMQMessage: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   if Base64OutMsgLen < PDFMQMaxMessageLength
   then do;
     Call AppendToMQMessage('<Content>');
     Call AppendDocContentB64InMQMessage;
     Call AppendToMQMessage('</Content>');
   end;
   else do;
     PDFConversionBypass = @True;
     ConversionRemarks = 'The Base64 Input message length is too high';
     Call LogTrace(@Force,'T#06','UUID: '!!xc126a1t.xc126_doc_uuid);
     Call LogTrace(@Force,'T#06',ConversionRemarks);
     Call InsertPDFConvRequest('S');
   end;

 End EvaluateAndAppendNewBase64ContentInMQMessage;
 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 InsertPDFConvRequest: Proc($Status);
   Call logTrace(@Dflt,'PROC',procedurename()!!'('!!'$Status'
                                             !!$Status !!')');

   dcl $Status         char(01);

   XC126A1T                    = '';
   XC126A1T.XC126_CHANNEL      = xc401a1t.xc401_channel;
   XC126A1T.XC126_DOC_UUID     = xc401a1t.xc401_doc_uuid;
   XC126A1T.XC126_DOC_FORMAT   = TargetDocumentFormat;
   XC126A1T.XC126_REQ_SLOT_NO  = '';
                                                                /*AS01*/
   XC126A1T.XC126_REQ_PRIORITY = '10';
   XC126A1T.XC126_REQ_STATUS   = $Status;
   XC126A1T.XC126_UPDATE_ID    = @PgmName;
   XC126A1T.XC126_REMARKS      = ConversionRemarks;

   EXEC SQL
     INSERT INTO TXC126A1
           (XC126_CHANNEL,
            XC126_DOC_UUID,
            XC126_DOC_FORMAT,
            XC126_REQ_SLOT_NO,
            XC126_REQ_PRIORITY,
            XC126_REQ_STATUS,
            XC126_UPDATE_ID,
            XC126_UPDATE_TS,
            XC126_REMARKS)
     VALUES
           (:xc126a1t.xc126_channel,
            :xc126a1t.xc126_doc_uuid,
            :xc126a1t.xc126_doc_format,
            :xc126a1t.xc126_req_slot_no,
            :xc126a1t.xc126_req_priority,
            :xc126a1t.xc126_req_status,
            :xc126a1t.xc126_update_id,
            CURRENT TIMESTAMP,
            :xc126a1t.xc126_remarks);

   Select(sqlca.sqlcode);
     when(0) do;
       call LogTrace(@Dflt ,'T#15',
                            'PDF Conv, '!!xc126a1t.xc126_channel
                          !!' Prio: '   !!XC126A1T.XC126_REQ_PRIORITY
                          !!' UUID: '   !!XC126A1T.XC126_DOC_UUID);
     end;
     when(-803) do;
       call LogTrace(@Dflt ,'T#16','PDF Conv Request Already Exists, '!!
                                             xc126a1t.xc126_channel
                                 !!' DOC:'!! XC126A1T.XC126_DOC_UUID);
       PdfConversionBypass   = @True;
     end;
     otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
       call LogTrace(@Force,'T#16','sqlca.sqlcode: '!! sqlca.sqlcode);
       call LogTrace(@Dflt ,'T#16','PDFConv Req error while inserting '
                                          !! xc126a1t.xc126_channel
                                 !!' DOC:'!! XC126A1T.XC126_DOC_UUID);
       PdfConversionBypass   = @True;
     end;
   end;

 End InsertPDFConvRequest;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 SendDocPDFConvMQMessage: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   dcl AttCorrelID        char (24)        init('');
   dcl DocumentMQPrty     bin fixed(31)    init(9);

   Call YIDMQPT(addr(MQPDFReqCommArea),
                     AttCorrelID,
                    (2 + 8192),
                     DocumentMQPrty,
                     PDFMQMessageLength,
                     addr(PDFMQMessage(1)));

   Select(MQSignReqCommArea.$Reason);
     when(0) do;
     end;
     when(2053) do;
       Call LogTrace(@Force,'T#20','MQ Full, Unable to send New Msg');
       MQFull = @true;
       PdfConversionBypass  = @true;
       ConversionRemarks    = 'MQ is full and Unable to send New Msg';
       Call InsertPDFConvRequest('1');
     end;
     otherwise do;
       Call HandleException('E#14','YIDMQPT ',
                                  'Unable to PUT  Doc Conv Message'!!
                                   MQPDFReqCommArea.$Reason);
     end;
   End;

 End SendDocPDFConvMQMessage;

 /*===================================================================*/
 /*                                                                   */
 /*===================================================================*/
 DocumentTypeForPDFCopy: proc returns(bit(01));
   Call LogTrace(@Dflt,'Proc',ProcedureName());

   /* tune check since on a inputfile many or all docs have same type */
   if SaveDocType ^= XC401A1T.XC401_DOC_TYPE
   then do;
     XCCNFG                     = '';
     XCCNFG.XC300_CHANNEL       = '*';
     XCCNFG.XC300_CONFIG_GROUP  = 'PDF_CONVERSION';
     XCCNFG.XC300_CONFIG_KEY    = 'DOC_TYPE_FOR_PDFCOPY';
     SAVEDOCTYPE                = XC401A1T.XC401_DOC_TYPE ;
     XCCNFG.XC300_CONFIG_DATA   = SAVEDOCTYPE;
     XCCNFG.TraceFlag           = @Trace;

     Call YXCCNFG('D',addr(XCCNFG));
     if XCCNFG.RC = 0 then SaveDocTypeBit = @True;
     else SaveDocTypeBit = @False;
   end;
   Return(SaveDocTypeBit);

 End DocumentTypeForPDFCopy;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PopulateAndInsertStatisticsInTID150A1: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   TID150A1.TID150UUI = XC401A1T.XC401_DOC_UUID;
   TID150A1.TID150CHA = XC401A1T.XC401_CHANNEL;
   TID150A1.TID150LNR = OutParam.PrintDetails.ListNum;
   TID150A1.TID150VRS = '';
   TID150A1.TID150CRE = JulianDays;
   TID150A1.TID150IDT = XC401A1T.XC401_RELATION_TYPE;
   TID150A1.TID150IDE = XC401A1T.XC401_RELATION_NO ;
   TID150A1.TID150ADT = XC401A1T.XC401_RECIPIENT_TYPE;
   TID150A1.TID150ADR = XC401A1T.XC401_RECIPIENT_ID ;
   TID150A1.TID150BU  = RecipientBUid;
   TID150A1.TID150BKS = '';
   TID150A1.TID150ARE = '';
   TID150A1.TID150CBE = '';
   TID150A1.TID150INS = '';
   TID150A1.TID150ITF = '';
   TID150A1.TID150DSN = 'ECM/DOCD/EOSR/IMMEDIATE';

   Call InsertStatisticsInTID150A1;

 End PopulateAndInsertStatisticsInTID150A1;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 InsertStatisticsInTID150A1: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   RetryCount = 0;
   do while (RetryCount < MaxRetryCount );

      EXEC SQL
       INSERT INTO TID150A1
              (TID150MD     ,
               TID150TST    ,
               TID150UUI    ,
               TID150CHA    ,
               TID150LNR    ,
               TID150VRS    ,
               TID150CRE    ,
               TID150IDT    ,
               TID150IDE    ,
               TID150ADT    ,
               TID150ADR    ,
               TID150BU     ,
               TID150BKS    ,
               TID150ARE    ,
               TID150CBE    ,
               TID150INS    ,
               TID150ITF    ,
               TID150DSN )
       VALUES (:DB2MonthDay ,
               :DB2_Current_Timestamp ,
               :tid150a1.tid150uui ,
               :tid150a1.tid150cha ,
               :tid150a1.tid150lnr ,
               :tid150a1.tid150vrs ,
               :tid150a1.tid150cre ,
               :tid150a1.tid150idt ,
               :tid150a1.tid150ide ,
               :tid150a1.tid150adt ,
               :tid150a1.tid150adr ,
               :tid150a1.tid150bu  ,
               :tid150a1.tid150bks ,
               :tid150a1.tid150are ,
               :tid150a1.tid150cbe ,
               :tid150a1.tid150ins ,
               :tid150a1.tid150itf ,
               :tid150a1.tid150dsn );

     Select(sqlca.sqlcode);
       when(0) do;
         RetryCount =MaxRetryCount+ 1;
         call LogTrace(@Dflt ,'T#15',
                              'Statistics, '!!tid150a1.tid150uui);
       end;
       when(-911,-913) do;
         if RetryCount = 1
         then do;
 ; /*put skip lines removed (by topaz plugin) */
           call HandleException('E#59','TID150A1',
                              'Unable to Insert Statistics Table '
                            !!' DOC:'!! tid150a1.tid150uui);
         end;
         Delay(DelayTime);
         RetryCount = RetryCount + 1;
       end;
       otherwise do;
 ; /*put skip lines removed (by topaz plugin) */
         call HandleException('E#59','TID150A1',
                              'Unable to Insert Statistics Table '
                            !!' DOC:'!! tid150a1.tid150uui);
       end;
     End; /*End of Select*/
   end;   /*end of Do while retrycount*/

 End InsertStatisticsInTID150A1;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PopulateAndSendPrintMQMessage: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   dcl AttCorrelID             char (24)        init('');
   dcl DocumentMQPrty          bin fixed(31)    init(9);


   Call YIDMQPT(addr(MQPrintCommArea),
                     AttCorrelID,
                    (2 + 8192),
                     DocumentMQPrty,
                     XCPARS.OutParam.PrintDetails.PrintDocumentSize,
                     XCPARS.OutParam.PrintDetails.ptrPrintMQDetails);

   Select(MQPrintCommArea.$Reason);
     when(0) do;
       Call LogTrace(@Force,'T#19','Message sent to Print Adaptor MQ');
     end;
     when(2053) do;
       Call LogTrace(@Force,'T#20','MQ Full, Unable to send New Msg');
       Call HandleException('E#14','YIDMQPT ',
                                  'Unable to PUT  Print Message'!!
                                   MQPrintCommArea.$Reason);

     end;
     otherwise do;
       Call HandleException('E#14','YIDMQPT ',
                                  'Unable to PUT  Print Message'!!
                                   MQPrintCommArea.$Reason);
     end;
   End;

 End PopulateAndSendPrintMQMessage;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PopulateAndSendELARMQMessage: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   dcl AttCorrelID        char (24)        init('');
   dcl DocumentMQPrty     bin fixed(31)    init(9);


   Call YIDMQPT(addr(MQELARCommArea),
                     AttCorrelID,
                    (2 + 8192),
                     DocumentMQPrty,
                     XCPARS.OutParam.ELARDetails.ELARDocumentSize,
                     XCPARS.OutParam.ELARDetails.ptrELARMQDetails);

   Select(MQELARCommArea.$Reason);
     when(0) do;
       Call LogTrace(@Force,'T#15','Message Sent to Archive Adaptor');
     end;
     when(2053) do;
       Call LogTrace(@Force,'T#20','MQ Full, Unable to send New Msg');
       Call HandleException('E#14','YIDMQPT ',
                                  'Unable to PUT ELAR Message'!!
                                   MQELARCommArea.$Reason);

     end;
     otherwise do;
       Call HandleException('E#14','YIDMQPT ',
                                  'Unable to PUT ELAR Message'!!
                                   MQELARCommArea.$Reason);
     end;
   End;


 End PopulateAndSendELARMQMessage;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformMQClose: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   Call PerformReceiverMQClose;
   Call PerformADHOCPDFMQClose;
   Call PerformELARMQClose;
   Call PerformPrintMQClose;
   Call PerformEnclErrorMQClose;
   Call PerformErrorMQClose;

 End PerformMQClose;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformELARMQClose: Proc;

   Call LogTrace(@Dflt,'Proc',procedurename());

   Call YIDMQCL(addr(MQELARCommArea));
   if MQELARCommArea.$CompCode ^= 0
   then Call HandleException('E#23','YIDMQCL ',
                                    'Unable to Close ELAR MQ');

 End PerformELARMQClose;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformPrintMQClose: Proc;

   Call LogTrace(@Dflt,'Proc',procedurename());

   Call YIDMQCL(addr(MQPrintCommArea));
   if MQPrintCommArea.$CompCode ^= 0
   then Call HandleException('E#23','YIDMQCL ',
                                    'Unable to Close Print MQ');

 End PerformPrintMQClose;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformADHOCPDFMQClose: Proc;

   Call LogTrace(@Dflt,'Proc',procedurename());

   Call YIDMQCL(addr(MQPDFReqCommArea));
   if MQPDFReqCommArea.$CompCode ^= 0
   then Call HandleException('E#23','YIDMQCL ',
                                    'Unable to Close PDF MQ');

 End PerformADHOCPDFMQClose;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformReceiverMQClose: Proc;

   Call LogTrace(@Dflt,'Proc',procedurename());

   Call YIDMQCL(addr(MQReceiverCommArea));
   if MQReceiverCommArea.$CompCode ^= 0
   then Call HandleException('E#23','YIDMQCL ',
                                    'Unable to Close Receiver MQ');

 End PerformReceiverMQClose;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformMQDisConnection: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   MQReceiverCommArea.$Trace        = @Trace;
   MQReceiverCommArea.$QueueManager = ImmediateQueueManager;

   /*-----------------------------------------------------------------*/
   /* DisConnect from MQ Manager                                      */
   /*-----------------------------------------------------------------*/
   Call YIDMQDC(addr(MQReceiverCommArea));
   if MQReceiverCommArea.$CompCode ^= 0
   then Call HandleException('E#24','YIDMQDC ',
                                    'Unable to Disconnect MQ');

 End PerformMQDisConnection;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 DisplayProgramStatistics: Proc;
   Call LogTrace(@Dflt,'Proc',procedurename());

   Call LogTrace(@Force,'####',' ');
   Call LogTrace(@Force,'####',' ');
   Call LogTrace(@Force,'####','MQ Messages Received                 :'
                                !! MQMessageCnt);
   Call LogTrace(@Force,'####','Total documents Sent to Dbox         :'
                                !! TotalDocsSentToDbox);
   Call LogTrace(@Force,'####','Total documents sent to ELAR adaptor :'
                                !! TotalDocsSentToArchive);
   Call LogTrace(@Force,'####','Total documents Sent to Print adaptor:'
                                !! TotalDocsSentToPrint);
   Call LogTrace(@Force,'####','Doc Bypassed                         :'
                                !! TotalDocsBypassed);

 End DisplayProgramStatistics;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 ProcessingError: Proc($ErrorType);
   Call LogTrace(@Dflt,'Proc',procedurename());

   dcl $ErrorType         char(20);
   dcl CounterArray       bin fixed(31)     init(1);

   call LogTrace(@Dflt,'U#01','ERROR!!!ERROR!!!ERROR!!!' );
   call LogTrace(@Dflt,'U#01','ReturnText'!!
                                 XCPARS.OutParam.ReturnText);

   TotalDocsBypassed = TotalDocsBypassed + 1;

   NumberOfAllocatedErrorMQMsg    = ALLOCN(ErrorMQMessage);
   if NumberOfAllocatedErrorMQMsg > 0
   then Free ErrorMQMessage(NumberOfAllocatedErrorMQMsg);

   Allocate  ErrorMQMessage(XCPARS.InParam.MQArrayCount + 1);
   ptrErrorText   = addr(ErrorMQMessage(1));

   ErrorText = '<Errortext>'!!trim(XCPARS.OutParam.ReturnText)!!
               '</ErrorText>';
   ErrorTextLen      = length(ErrorText);
   substr(ErrorMessageRec,1, ErrorTextLen)= ErrorText;
    ptrErrorText   =  PTRADD(ptrErrorText,ErrorTextLen);

   do while(MQMessageInputData(CounterArray) ^= ' ');

     call LogTrace(@Dflt,'T#88','Array Count :'!! CounterArray);
     call LogTrace(@Dflt,'T#89','MQMessageInputData :'!!
                                 MQMessageInputData(CounterArray));

     substr(ErrorMessageRec,1,4096) =  MQMessageInputData(CounterArray);
     CounterArray   = CounterArray + 1;
     ptrErrorText   =  PTRADD(ptrErrorText,4096);

   end;

   Call PerformMQProcessing($ErrorType);

 End ProcessingError;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformMQProcessing: Proc($ErrType);

   dcl $ErrType         char(20);
   Call LogTrace(@Dflt,'Proc',procedurename());

   if ($ErrType = 'EnclosureError')
   then do;
     Call PopulateAndSendEnclErrorMessage;
   end;
   else do;
     Call PopulateAndSendErrorMessage;
   end;

 End PerformMQProcessing;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PopulateAndSendEnclErrorMessage: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   dcl AttCorrelID        char (24)        init('');
   dcl DocumentMQPrty     bin fixed(31)    init(9);


   Call YIDMQPT(addr(MQEnclCommArea),
                     AttCorrelID,
                    (2 + 8192),
                     DocumentMQPrty,
                     (ErrorTextLen+MQMessageLen),
                     addr(ErrorMQMessage(1)));

   Select(MQEnclCommArea.$Reason);
     when(0) do;
       Call LogTrace(@Force,'T#19','Enclosure Error Message sent'!!
                                   'successfully to Encl Error MQ' );
     end;
     when(2053) do;
       Call LogTrace(@Force,'T#20','MQ Full,Unable to send EnclErrMsg');
       Call HandleException('E#14','YIDMQPT ',
                                  'Unable to PUT Error Message'!!
                                   MQEnclCommArea.$Reason);

     end;
     otherwise do;
       Call HandleException('E#14','YIDMQPT ',
                                  'Unable to PUT Error Message'!!
                                   MQEnclCommArea.$Reason);
     end;
   End;


 End PopulateAndSendEnclErrorMessage;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PopulateAndSendErrorMessage: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   dcl AttCorrelID        char (24)        init('');
   dcl DocumentMQPrty     bin fixed(31)    init(9);


   Call YIDMQPT(addr(MQErrorCommArea),
                     AttCorrelID,
                    (2 + 8192),
                     DocumentMQPrty,
                     (ErrorTextLen+MQMessageLen),
                     addr(ErrorMQMessage(1)));

   Select(MQErrorCommArea.$Reason);
     when(0) do;
       Call LogTrace(@Force,'T#19','Error Message sent'!!
                                   'successfully to Error MQ' );
     end;
     when(2053) do;
       Call LogTrace(@Force,'T#20','MQ Full, Unable to send Err Msg');
       Call HandleException('E#14','YIDMQPT ',
                                  'Unable to PUT Error Message'!!
                                   MQErrorCommArea.$Reason);

     end;
     otherwise do;
       Call HandleException('E#14','YIDMQPT ',
                                  'Unable to PUT Error Message'!!
                                   MQErrorCommArea.$Reason);
     end;
   End;

 End PopulateAndSendErrorMessage;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformErrorMQClose: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   Call YIDMQCL(addr(MQErrorCommArea));
   if MQErrorCommArea.$CompCode ^= 0
   then Call HandleException('E#23','YIDMQCL ',
                                    'Unable to Close Encl Error MQ');

 End PerformErrorMQClose;

 /*-------------------------------------------------------------------*/
 /*                                                                   */
 /*-------------------------------------------------------------------*/
 PerformEnclErrorMQClose: Proc();
   Call LogTrace(@Dflt,'Proc',procedurename());

   Call YIDMQCL(addr(MQEnclCommArea));
   if MQEnclCommArea.$CompCode ^= 0
   then Call HandleException('E#23','YIDMQCL ',
                                    'Unable to Close Error MQ');

 End PerformEnclErrorMQClose;

 END XC7010;